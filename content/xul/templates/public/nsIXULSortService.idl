/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIRDFCompositeDataSource.idl"
#include "nsIRDFResource.idl"

%{C++
class nsRDFSortState;
%}

[ptr] native nsRDFSortState(nsRDFSortState);

interface nsIContent;
interface nsIDOMNode;

/**
 * A service used to sort the contents of a XUL widget.
 */
[scriptable, uuid(BFD05261-834C-11d2-8EAC-00805F29F371)]
interface nsIXULSortService : nsISupports
{
    /**
     *
     * Sort the contents of the widget containing <code>aNode</code>
     * using <code>aSortResource</code> as the comparison key, and
     * <code>aSortDirection</code> as the direction.
     *
     * @param aNode A node in the XUL widget whose children are to be
     * sorted. <code>sort</code> will traverse upwards to find the
     * root node at which to begin the actualy sorting. For optimal
     * results, pass in the root of the widget.
     *
     * @param aSortResource The RDF resource to be used as
     * the comparison key.
     *
     * @param aSortDirection May be either <b>natural</b> to return
     * the contents to their natural (unsorted) order,
     * <b>ascending</b> to sort the contents in ascending order, or
     * <b>descending</b> to sort the contents in descending order.
     */
    void sort(in nsIDOMNode aNode,
              in AString aSortResource,
              in AString aSortDirection);

    /**
     * Used internally for insertion sorting.
     */
    [noscript] void insertContainerNode(in nsIRDFCompositeDataSource db,
                                        in nsRDFSortState sortStatePtr,
                                        in nsIContent root,
                                        in nsIContent trueParent,
                                        in nsIContent container,
                                        in nsIContent node,
                                        in boolean aNotify);
};

%{C++
nsresult
NS_NewXULSortService(nsIXULSortService **result);
%}
