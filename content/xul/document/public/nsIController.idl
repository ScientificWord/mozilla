/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

[scriptable, uuid(D5B61B82-1DA4-11d3-BF87-00105A1B0627)]
interface nsIController : nsISupports {
	boolean isCommandEnabled(in string command);
	boolean supportsCommand(in string command);

	void doCommand(in string command);

	void onEvent(in string eventName);
};


/*

  Enhanced controller interface that allows for passing of parameters
  to commands.
  
*/

interface nsICommandParams;

[scriptable, uuid(EBE55080-C8A9-11D5-A73C-DD620D6E04BC)]
interface nsICommandController : nsISupports
{
  
  void        getCommandStateWithParams( in string command, in nsICommandParams aCommandParams);
    
  void        doCommandWithParams(in string command, in nsICommandParams aCommandParams);

};


/*
  An API for registering commands in groups, to allow for 
  updating via nsIDOMWindowInternal::UpdateCommands.
*/
interface nsISimpleEnumerator;

[scriptable, uuid(9F82C404-1C7B-11D5-A73C-ECA43CA836FC)]
interface nsIControllerCommandGroup : nsISupports
{

  void  addCommandToGroup(in string aCommand, in string aGroup);
  void  removeCommandFromGroup(in string aCommand, in string aGroup);
  
  boolean isCommandInGroup(in string aCommand, in string aGroup);

  /*
    We should expose some methods that allow for enumeration.
  */
  nsISimpleEnumerator getGroupsEnumerator();
  
  nsISimpleEnumerator getEnumeratorForGroup(in string aGroup);

};

