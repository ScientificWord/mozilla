/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2003
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Heikki Toivonen <heikki@netscape.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIDOMRange;
interface nsIDOMDocument;

/**
 * XXX A good XPointerResult would probably mimic XPathresult,
 *     this range list is just the minimum that will be able to represent
 *     all return values, although it would be more user friendly to return
 *     nodes and node lists when they are possible.
 */
[scriptable, uuid(D3992637-F474-4b65-83ED-323FE69C60D2)]
interface nsIXPointerResult : nsISupports
{
  nsIDOMRange                             item(in unsigned long index);
  readonly attribute unsigned long        length;
};


/**
 * Scheme context for nsIXPointerSchemeProcessor. The context consists of
 * all the scheme/data pairs that precede the scheme/data that the
 * nsIXPointerSchemeProcessor is currently evaluating.
 */
[uuid(781F4AA1-EBB3-4667-B1C2-2B35E94C4281)]
interface nsIXPointerSchemeContext : nsISupports
{
  readonly attribute unsigned long count;
  void getSchemeData(in unsigned long index,
                     out DOMString scheme,
                     out DOMString data);
};

%{C++
/**
 * nsIXPointerSchemeProcessor implementations must be registered with the below
 * progid, appended with the scheme name that the processor implements.
 */
#define NS_XPOINTER_SCHEME_PROCESSOR_BASE "@mozilla.org/xml/xpointer;1?scheme="
%}

/**
 * nsIXPointerSchemeProcessors will be called by the XPointer Processor that
 * implements the XPointer Framework. This is done for each scheme the
 * XPointer Processor finds, in left-to-right order.
 */
[uuid(093D3559-B56B-44d0-8764-C25815715080)]
interface nsIXPointerSchemeProcessor : nsISupports
{
  /**
   * Evaluate.
   *
   * @param aDocument The document in which to resolve the XPointer.
   * @param aContext  The XPointer context in which to process aData.
   * @param aData     The data in the scheme that needs to be resolved.
   * @return          The result of the evaluation.
   */
  nsIXPointerResult evaluate(in nsIDOMDocument aDocument,
                             in nsIXPointerSchemeContext aContext,
                             in DOMString aData);
};

/**
 * nsIXPointerEvaluator resolves an XPointer expression
 */
[uuid(ADDD0FE5-8555-45b7-B763-97D5898CE268)]
interface nsIXPointerEvaluator : nsISupports
{
  /**
   * Evaluate an XPointer expression.
   *
   * @param aDocument   The document in which to evaluate.
   * @param aExpression The XPointer expression string to evaluate.
   * @return            The result.
   */
  nsIXPointerResult evaluate(in nsIDOMDocument aDocument,
                             in DOMString aExpression);

};
