/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla XTF project.
 *
 * The Initial Developer of the Original Code is
 * Alex Fritze.
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
interface nsIAtom;

[scriptable, uuid(72152f7f-7e8d-43fd-8477-3f29ae8d240d)]
interface nsIXTFAttributeHandler : nsISupports
{
  // If 'false' the given attribute will be handled by the wrapper.
  // Namespaced attributes will always be handled by the wrapper. The
  // set of attributes handled by the attribute handler should remain
  // constant for its complete lifetime.
  boolean handlesAttribute(in nsIAtom name);
  
  void setAttribute(in nsIAtom name, in AString newValue);
  
  void removeAttribute(in nsIAtom name);

  // If the attribute 'name' is unknown the implementation should mark
  // the returned string as being 'null' (i.e. return 'null' in JS;
  // call SetIsVoid(PR_TRUE) in C++) rather than throw an exception.
  // A 'void' result will be translated into the attribute missing
  // by the wrapper. An empty result will be translated into
  // the attribute having no value.
  AString getAttribute(in nsIAtom name);
  
  boolean hasAttribute(in nsIAtom name);
  
  unsigned long getAttributeCount();

  // note that this method should return an *atom* not a string.
  nsIAtom getAttributeNameAt(in unsigned long index);
};
