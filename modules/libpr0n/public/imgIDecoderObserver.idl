/** -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Stuart Parmenter <pavlov@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "imgIContainerObserver.idl"

interface imgIRequest;
interface imgIContainer;
interface gfxIImageFrame;

%{C++
#include "nsRect.h"
%}

/**
 * imgIDecoderObserver interface
 *
 * This interface is used both for observing imgIDecoder objects and for
 * observing imgIRequest objects.  In the former case, aRequest is
 * always null.
 * XXXldb The two functions should probably be split.
 *
 * @author Stuart Parmenter <pavlov@netscape.com>
 * @version 0.1
 * @see imagelib2
 */
[scriptable, uuid(876f14ee-f27c-41cd-b6fb-9efda3ebc7b5)]
interface imgIDecoderObserver : imgIContainerObserver
{
  /**
   * called at the same time that nsIRequestObserver::onStartRequest would be
   * (used only for observers of imgIRequest objects, which are nsIRequests,
   * not imgIDecoder objects)
   *
   * Unlike nsIRequestObserver::onStartRequest, this can be called
   * synchronously.
   */
  void onStartRequest(in imgIRequest aRequest);

  /**
   * called as soon as the image begins getting decoded
   */
  void onStartDecode(in imgIRequest aRequest);

  /**
   * called once the image has been inited and therefore has a width and height
   */
  void onStartContainer(in imgIRequest aRequest, in imgIContainer aContainer);

  /**
   * called when each frame is created
   */
  void onStartFrame(in imgIRequest aRequest, in gfxIImageFrame aFrame);

  /**
   * called when some part of the frame has new data in it
   */
  [noscript] void onDataAvailable(in imgIRequest aRequest, in gfxIImageFrame aFrame, [const] in nsIntRect aRect);

  /**
   * called when a frame is finished decoding
   */
  void onStopFrame(in imgIRequest aRequest, in gfxIImageFrame aFrame);

  /**
   * probably not needed.  called right before onStopDecode
   */
  void onStopContainer(in imgIRequest aRequest, in imgIContainer aContainer);

  /**
   * called when the decoder is dying off
   */
  void onStopDecode(in imgIRequest aRequest, in nsresult status,
                    in wstring statusArg);

  /**
   * called at the same time that nsIRequestObserver::onStopRequest would be
   * (used only for observers of imgIRequest objects, which are nsIRequests,
   * not imgIDecoder objects)
   *
   * Unlike nsIRequestObserver::onStartRequest, this can be called
   * synchronously.
   */
  void onStopRequest(in imgIRequest aRequest, in boolean aIsLastPart);

};
