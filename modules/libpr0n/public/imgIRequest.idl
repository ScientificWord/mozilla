/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Stuart Parmenter <pavlov@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIRequest.idl"

interface imgIContainer;
interface imgIDecoderObserver;
interface nsIURI;
interface nsIPrincipal;

/**
 * imgIRequest interface
 *
 * @author Stuart Parmenter <stuart@mozilla.com>
 * @version 0.1
 * @see imagelib2
 */
[scriptable, uuid(a297d3fa-5e0c-4e59-9f30-a01c9d4f3f8b)]
interface imgIRequest : nsIRequest
{
  /**
   * the image container...
   * @return the image object associated with the request.
   * @attention NEED DOCS
   */
  readonly attribute imgIContainer image;

  /**
   * Bits set in the return value from imageStatus
   * @name statusflags
   */
  //@{
  const long STATUS_NONE             = 0x0;
  const long STATUS_SIZE_AVAILABLE   = 0x1;
  const long STATUS_LOAD_PARTIAL     = 0x2;
  const long STATUS_LOAD_COMPLETE    = 0x4;
  const long STATUS_ERROR            = 0x8;
  const long STATUS_FRAME_COMPLETE   = 0x10;
  //@}

  /**
   * something
   * @attention NEED DOCS
   */
  readonly attribute unsigned long imageStatus;

  /**
   * The URI the image load was started with.  Note that this might not be the
   * actual URI for the image (e.g. if HTTP redirects happened during the
   * load).
   */
  readonly attribute nsIURI URI;

  readonly attribute imgIDecoderObserver decoderObserver;

  readonly attribute string mimeType;

  /**
   * Clone this request; the returned request will have aObserver as the
   * observer.  aObserver will be notified synchronously (before the clone()
   * call returns) with all the notifications that have already been dispatched
   * for this image load.
   */
  imgIRequest clone(in imgIDecoderObserver aObserver);

  /**
   * The principal gotten from the channel the image was loaded from.
   */
  readonly attribute nsIPrincipal imagePrincipal;
};

