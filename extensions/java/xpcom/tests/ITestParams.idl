/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Java XPCOM Bindings.
 *
 * The Initial Developer of the Original Code is
 * IBM Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * IBM Corporation. All Rights Reserved.
 *
 * Contributor(s):
 *   Javier Pedemonte (jhpedemonte@gmail.com)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsILocalFile;

[scriptable, uuid(c4baf2d9-9fa8-4e17-a88a-d81b052b73e1)]
interface ITestParams : nsISupports
{
/* TEST 'ARRAY' 'IN' PARAMS */

  /**
   * Pass in an array of simple type (byte, short, int, float, etc).
   */
  void testSimpleTypeArrayIn(in unsigned long count,
                             [array, size_is (count)] in octet array);

  /**
   * Pass in an array of ASCII strings.
   */
  void testCharStrTypeArrayIn(in unsigned long count,
                              [array, size_is (count)] in string array);

  /**
   * Pass in an array of Unicode strings.
   */
  void testWCharStrTypeArrayIn(in unsigned long count,
                               [array, size_is (count)] in wstring array);

  /**
   * Pass in an array of IIDs.
   */
  void testIIDTypeArrayIn(in unsigned long count,
                          [array, size_is (count)] in nsIIDPtr array);

  /**
   * Pass in an array of interface pointers (nsILocalFile in this case).
   */
  void testIfaceTypeArrayIn(in unsigned long count,
                            [array, size_is (count)] in nsILocalFile array);


/* TEST 'ARRAY' 'INOUT' PARAMS */

  /**
   * Pass in an array of simple type (byte, short, int, float, etc).
   */
  void testSimpleTypeArrayInOut(in unsigned long count,
                                [array, size_is (count)] inout short array);

  /**
   * Pass in an array of ASCII strings.
   */
  void testCharStrTypeArrayInOut(in unsigned long count,
                                 [array, size_is (count)] inout string array);

  /**
   * Pass in an array of Unicode strings.
   */
  void testWCharStrTypeArrayInOut(in unsigned long count,
                                [array, size_is (count)] inout wstring array);

  /**
   * Pass in an array of IIDs.
   */
  void testIIDTypeArrayInOut(in unsigned long count,
                             [array, size_is (count)] inout nsIIDPtr array);

  /**
   * Pass in an array of interface pointers (nsILocalFile in this case).
   */
  void testIfaceTypeArrayInOut(in unsigned long count,
                             [array, size_is (count)] inout nsILocalFile array);


/* TEST 'ARRAY' 'OUT' PARAMS */

  /**
   * Pass in an array of simple type (byte, short, int, float, etc).
   */
  void testSimpleTypeArrayOut(out unsigned long count,
                              [array, size_is (count)] out char array);

  /**
   * Pass in an array of ASCII strings.
   */
  void testCharStrTypeArrayOut(out unsigned long count,
                               [array, size_is (count)] out string array);

  /**
   * Pass in an array of Unicode strings.
   */
  void testWCharStrTypeArrayOut(out unsigned long count,
                                [array, size_is (count)] out wstring array);

  /**
   * Pass in an array of IIDs.
   */
  void testIIDTypeArrayOut(out unsigned long count,
                           [array, size_is (count)] out nsIIDPtr array);

  /**
   * Pass in an array of interface pointers (nsILocalFile in this case).
   */
  void testIfaceTypeArrayOut(out unsigned long count,
                             [array, size_is (count)] out nsILocalFile array);


/* TEST 'ARRAY' 'RETVAL' PARAMS */

  /**
   * Returns an array of simple type (byte, short, int, float, etc).
   */
  void returnSimpleTypeArray(out unsigned long count,
                     [array, size_is (count), retval] out unsigned long result);

  /**
   * Returns an array of ASCII strings.
   */
  void returnCharStrTypeArray(out unsigned long count,
                            [array, size_is (count), retval] out string result);

  /**
   * Returns an array of Unicode strings.
   */
  void returnWCharStrTypeArray(out unsigned long count,
                           [array, size_is (count), retval] out wstring result);

  /**
   * Returns an array of IIDs.
   */
  void returnIIDTypeArray(out unsigned long count,
                          [array, size_is (count), retval] out nsIIDPtr result);

  /**
   * Returns an array of interface pointers (nsILocalFile in this case).
   */
  void returnIfaceTypeArray(out unsigned long count,
                      [array, size_is (count), retval] out nsILocalFile result);
};
