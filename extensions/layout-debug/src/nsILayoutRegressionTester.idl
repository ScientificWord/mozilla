/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2000
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Don Cone <dcone@netscape.com>
 *   Sion Fraser <sfraser@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIDOMWindow;
interface nsILocalFile;

[scriptable, uuid(1B4CD090-0531-11d6-A876-00105A183419)]
interface nsILayoutRegressionTester : nsISupports
{
  /**
   * Dumps the content of a window
   * @param aWindowToDump       the window to dump (may be an iframe etc)
   * @param aFile               the file to dump to. It will be created if necessary, otherwise
                                truncated. If nil, write to stdout.
   * @param aFlagsMask          some flags that determine what to dump
   * @param aFlagsMask          some flags that determine what to dump
   * @param aResult             a status value indicating whether the dump happened, 
                                whether the page was still loading, or whether some other error happened.
   */
  const short DUMP_FLAGS_MASK_DEFAULT        = 0;
  const short DUMP_FLAGS_MASK_DUMP_STYLE     = 1;
  
  const long DUMP_RESULT_COMPLETED           = 0;   // loaded OK
  const long DUMP_RESULT_LOADING             = 1;   // still loading
  const long DUMP_RESULT_ERROR               = 2;   // an error occurred
  
  long dumpFrameModel(in nsIDOMWindow aWindowToDump, in nsILocalFile aFile, in unsigned long aFlagsMask);

  /**
   * Compares the contents of frame model files
   * @param aBaseFile           the baseline file, opened with read permissions
   * @param aVerFile            file containing the results to verify, opened with read permissions
   * @param aFlags              flags specifying output verbosity
   * @param aResult             result of the comparison: zero if the files are same, non-zero if different
   */
  const short COMPARE_FLAGS_VERBOSE        = 0;
  const short COMPARE_FLAGS_BRIEF          = 1;
  long compareFrameModels(in nsILocalFile aBaseFile, in nsILocalFile aVerFile, in unsigned long aFlags);
};

