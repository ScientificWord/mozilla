These four small extensions create .xpi files using Javascript programs under Firefox.

For example to create a Firebug XPI file with tracing:
-jsconsole  -P mccoy -chrome chrome://mccoy/content/mccoy.xul -source F:\bartonjj\projects\fireclipse\firebug\firebug\branches\firebug1.4  -key firebug  -target F:\bartonjj\projects\fireclipse\getfirebug\moziillasvn\tags\production\releases\firebug\1.4X\firebug-1.3mccoy.xpi

And to create a Firebug XPI file without tracing:
-jsconsole  -P mccoy -chrome chrome://mccoy/content/mccoy.xul -source F:\bartonjj\projects\fireclipse\firebug\firebug\branches\firebug1.4  -key firebug  -target F:\bartonjj\projects\fireclipse\getfirebug\moziillasvn\tags\production\releases\firebug\1.4\firebug-1.3mccoy.xpi -detrace


-jsconsole causes the Error Console to come up. Otherwise you may not see any windows.
-P mccoy is just the name of the Firefox profile containing these four extensions. I also have a copy of Firebug in my 'mccoy' profile, but I don't know if it is needed.
-chrome chrome://mccoy/content.mccoy.xul This loads mccoy so if the command line processing FAILS, mccoy UI will come up.
-source <directory> where files will be extracted. Basically this directory is zipped.
-key <name> The name of the mccoy key to use in signing the update.rdf. The 'name' must be one you used in Mccoy and it becomes the XPI name stem
-target <file> Actually the directory part is used. The file name is created from the key plus a dash plus version info read from branches.properties.
-detrace causes statements of the form "if(FBTrace..." to be removed.

The four directories:

mccoy4firefox: extracted mccoy dlls (Windows only sorry)
mozzipper: zips files
detrace: removes if(FBTrace...
sign: reads metadata and uses it to create install.rdf and update.rdf.

As I recall:

Run with out -target so mccoy comes up (or just run mccoy) Generate a key with the name of your extension, save it.

Create install.rdf.tmp.xml which is install.rdf with @VERSION@ @RELEASE@ and @PUBLICKEY@ variables.
Create update.rdf.tmp.xml which is update.rdf with @VERSION@ @LEAF@ and @PUBLICKEY@ variables.
Create branch.properties containing:
# DO NOT MERGE INTO TRUNK
RELEASE=.0a23
VERSION=1.4X

Run firefox.exe with the above command lines.

The meta-data files are read and templates are substituted.
The install.rdf will get a copy of the public key.
The the source tree will be zipped and hashed, then named <key>-VERSIONRELEASE.xpi
The update.rdf will get a signed copy of the hash inserted.
Both files will end up in the target directory.
The target directory can be the upload directory for the extension (eg SVN).

Both files should installed together.
When users install the xpi, its update URL will point to the update.rdf generated by the above procedure.
Next time the process is repeated, the update.rdf will have a new signed hash and version number.
When Firefox checks the update.rdf it will see the new version number,
use its copy of the public key to decrypt the hash, download the new xpi and check the hash.

This has been used for Firebug and Chromebug XPIs. It's a bit inflexible but if you follow the recipe it creates signed XPIs in a few seconds.

jjb 01MAY09



