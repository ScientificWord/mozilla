/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is XMLterm.
 *
 * The Initial Developer of the Original Code is
 * Ramalingam Saravanan.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/* mozIXMLTerminal.idl: primary interface for XMLterm operations (unscriptable)
 */

#include "nsISupports.idl"
#include "mozILineTerm.idl"
#include "mozIXMLTermShell.idl"

interface nsISelectionController;
interface nsIDocShell;
interface nsIPresShell;

%{C++
#define MOZXMLTERMINAL_CLASSNAME  "XMLTerminal Component"
#define MOZXMLTERMINAL_CONTRACTID "@mozilla.org/xmlterm/xmlterminal;1"

#define MOZXMLTERMINAL_CID                       \
{ /* 0eb82b21-43a2-11d3-8e76-006008948af5 */ \
   0x0eb82b21, 0x43a2, 0x11d3,               \
{0x8e, 0x76, 0x00, 0x60, 0x08, 0x94, 0x8a, 0xf5} }
%}

/* NOT SCRIPTABLE */
[uuid(0eb82b20-43a2-11d3-8e76-006008948af5)]

interface mozIXMLTerminal : nsISupports
{
  /** Initializes XMLterm in specified web shell
   * @param aDocShell web shell in which to embed XMLterm
   * @param aXMLTermShell scriptable wrapper shell for XMLterm
   * @param URL URL of document to be loaded in the window
   *            (set to null string if document is already loaded in window)
   * @param args argument string to be passed to XMLterm
   *             (at the moment this just contains any initial input data)
   */
  void init(in nsIDocShell aDocShell,
            in mozIXMLTermShell aXMLTermShell,
            in wstring aURL,
            in wstring args);

  /** Finalizes (closes) XMLterm
   */
  void finalize();

  /** Polls for readable data from XMLterm
   */
  void poll();

  /** Current entry (command) number
   */
  readonly attribute long currentEntryNumber;

  /** History buffer count
   */
  attribute long history;

  /** Prompt string
   */
  attribute wstring prompt;

  /** Ignore key press flag
   */
  attribute boolean keyIgnore;

  /** Writes string to terminal as if the user had typed it (without authenitcation)
   * @param aString string to be transmitted to terminal
   */
  void sendTextAux(in wstring aString);

  /** Writes string to terminal as if the user had typed it (command input)
   * @param aString string to be transmitted to terminal
   * @param aCookie document.cookie string for authentication
   */
  void sendText(in wstring aString, in wstring aCookie);

  /** Paste data from clipboard into XMLterm at current input line cursor location
   */
  void paste();

  /** Document associated with XMLterm
   */
  readonly attribute nsIDOMDocument document;

  /** Web shell associated with XMLterm
   */
  readonly attribute nsIDocShell docShell;

  /** Presentation shell associated with XMLterm
   */
  readonly attribute nsIPresShell presShell;

  /** DOM document associated with XMLterm
   */
  readonly attribute nsIDOMDocument DOMDocument;

  /** Selection controller associated with XMLterm
   */
  readonly attribute nsISelectionController selectionController;

  /** Flag denoting whether terminal is in full screen mode
   * @param aFlag (output) screen mode flag
   */
  readonly attribute boolean screenMode;

  /** Checks if supplied cookie is valid for XMLTerm
   * @param aCookie supplied cookie string
   * @return PR_TRUE if supplied cookie matches XMLTerm cookie
   */
  boolean matchesCookie(in wstring aCookie);

  /** Resizes XMLterm to match a resized window.
   */
  void resize();

  /** Exports HTML to file, with META REFRESH, if refreshSeconds is non-zero.
   * Nothing is done if display has not changed since last export, unless
   * forceExport is true. Returns true if export actually takes place.
   * If filename is a null string, HTML is written to STDERR.
   */
  boolean exportHTML(in wstring aFilename, in long permissions,
                     in wstring style, in unsigned long refreshSeconds,
                     in boolean forceRefresh);

   /** Shows the caret and make it editable.
   */
  void showCaret();

  /** Returns current screen size in rows/cols and in pixels
   * @param (output) rows
   * @param (output) cols
   * @param (output) xPixels
   * @param (output) yPixels
   */
  void screenSize(out long rows, out long cols,
                  out long xPixels, out long yPixels);
};

/* mozIXMLTermSuspend: interface to suspend/resume select XMLterm operations
 */

/* NOT SCRIPTABLE */
[uuid(0eb82b50-43a2-11d3-8e76-006008948af5)]

interface mozIXMLTermSuspend : nsISupports
{
  attribute boolean suspend;
};
