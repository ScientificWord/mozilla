/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * David Einstein.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIStringEnumerator;

[scriptable, uuid(7EF52EAF-B7E1-462B-87E2-5D1DBACA9048)]

/**
 * This interface represents a Personal Dictionary.
 */

interface mozIPersonalDictionary : nsISupports {

  /**
   * Load the dictionary
   */
  void load();

  /**
   * Save the dictionary
   */
  void save();

  /**
   * Get the (lexicographically sorted) list of words
   */
  readonly attribute nsIStringEnumerator wordList;

  /**
   * Check a unicode string
   */
  boolean check(in wstring word, in wstring lang);

  /**
   * Add a word to the personal dictionary
   */
  void addWord(in wstring word, in wstring lang);

  /**
   * Remove a word from the personal dictionary
   */
  void removeWord(in wstring word, in wstring lang);

  /**
   * Add a word to the ignore all list
   */
  void ignoreWord(in wstring word);

  /**
   * Clear the ignore list
   */
  void endSession();

  /** 
   * These three functions are here in case we want to store previous 
   * misspellings and return them at the head of the misspell list.
   */
 
  /**
   * Add a misspelling to the list of corrections
   */
  void addCorrection(in wstring word,in wstring correction, in wstring lang);

  /**
   * Remove a misspelling from the list of corrections
   */
  void removeCorrection(in wstring word,in wstring correction, in wstring lang);

  /**
   * Get a list of previous corrections for the word
   */
  void getCorrection(in wstring word, [array, size_is(count)] out wstring words, out PRUint32 count);
};
