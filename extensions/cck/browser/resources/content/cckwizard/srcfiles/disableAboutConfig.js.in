/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is a service disables about:config.
 *
 * The Initial Developer of the Original Code is IBM Corp.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

const ABOUT_CONFIG_CONTRACTID = "@mozilla.org/network/protocol/about;1?what=config";
const NS_ABOUT_REDIRECTOR_MODULE_CID      = Components.ID('{f4616ed3-54e5-4d5b-9308-bcecc3a179d0}');

const nsIAboutModule        = Components.interfaces.nsIAboutModule;

function AboutHandler() {}
AboutHandler.prototype =
{
  /* nsISupports */
  QueryInterface : function handler_QI(iid) {
    if (iid.equals(Components.interfaces.nsISupports))
      return this;

    if (nsIAboutModule && iid.equals(nsIAboutModule))
      return this;

    throw Components.results.NS_ERROR_NO_INTERFACE;
  },

  /* nsIAboutModule */
  newChannel : function newChannel(aURI) {
    var ioService = Components.classes["@mozilla.org/network/io-service;1"].getService();
    ioService = ioService.QueryInterface(Components.interfaces.nsIIOService);
    var uri_str = "data:text/html,<h3>about:config has been disabled</h3>";
    var ext_uri = ioService.newURI(uri_str, null, null);
    var ext_channel = ioService.newChannelFromURI(ext_uri);
    return ext_channel;
  },
  getURIFlags : function getURIFlags(aURI) {
    return Components.interfaces.nsIAboutModule.URI_SAFE_FOR_UNTRUSTED_CONTENT;
  }
};


var AboutFactory =
{
  createInstance : function(outer, iid)
  {
    if (outer != null) {
      throw Components.results.NS_ERROR_NO_AGGREGATION;
    }

    return new AboutHandler().QueryInterface(iid);
  }
};


var AboutModule =
{
  registerSelf : function(compMgr, fileSpec, location, type)
  {
    compMgr = compMgr.QueryInterface(Components.interfaces.nsIComponentRegistrar);

    compMgr.registerFactoryLocation(NS_ABOUT_REDIRECTOR_MODULE_CID,
                                    "about:config",
                                    ABOUT_CONFIG_CONTRACTID,
                                    fileSpec,
                                    location,
                                    type);
  },

  unregisterSelf : function(compMgr, fileSpec, location)
  {
    compMgr = compMgr.QueryInterface(Components.interfaces.nsIComponentRegistrar);

    compMgr.unregisterFactoryLocation(NS_ABOUT_REDIRECTOR_MODULE_CID, fileSpec);
  },

  getClassObject : function(compMgr, cid, iid)
  {
    if (cid.equals(NS_ABOUT_REDIRECTOR_MODULE_CID)) {
      return AboutFactory;
    }

    if (!iid.equals(Components.interfaces.nsIFactory)) {
      throw Components.results.NS_ERROR_NOT_IMPLEMENTED;
    }

    throw Components.results.NS_ERROR_NO_INTERFACE;
  },

  canUnload : function(compMgr)
  {
    return true;
  }
};


function NSGetModule(compMgr, fileSpec) {
  return AboutModule;
}

