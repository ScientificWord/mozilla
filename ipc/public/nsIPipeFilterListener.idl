/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "MPL"); you may not use this file
 * except in compliance with the MPL. You may obtain a copy of
 * the MPL at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the MPL is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the MPL for the specific language governing
 * rights and limitations under the MPL.
 * 
 * The Original Code is protoZilla.
 * 
 * The Initial Developer of the Original Code is Ramalingam Saravanan.
 * Portions created by Ramalingam Saravanan <svn@xmlterm.org> are
 * Copyright (C) 2000 Ramalingam Saravanan. All Rights Reserved.
 * 
 * Contributor(s):
 * 
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU General Public License (the "GPL"), in which case
 * the provisions of the GPL are applicable instead of
 * those above. If you wish to allow use of your version of this
 * file only under the terms of the GPL and not to allow
 * others to use your version of this file under the MPL, indicate
 * your decision by deleting the provisions above and replace them
 * with the notice and other provisions required by the GPL.
 * If you do not delete the provisions above, a recipient
 * may use your version of this file under either the MPL or the
 * GPL.
 */

#include "nsIStreamListener.idl"

%{C++
#include "nsString.h"

#define NS_PIPEFILTERLISTENER_CLASSNAME "Pipe Filter Listener"
#define NS_PIPEFILTERLISTENER_CONTRACTID "@mozilla.org/process/pipe-filter-listener;1"
     
#define NS_PIPEFILTERLISTENER_CID                       \
{ /* 8431e1b1-7ab1-11d4-8f02-006008948af5 */     \
   0x8431e1b1, 0x7ab1, 0x11d4,                   \
{0x8f, 0x02, 0x00, 0x60, 0x08, 0x94, 0x8a, 0xf5} }

%}

/* nsIPipeFilterListener is a filter for nsIStreamListener
 */

[scriptable, uuid(8431e1b0-7ab1-11d4-8f02-006008948af5)]
interface nsIPipeFilterListener : nsIStreamListener
{
  readonly attribute ACString startDelimiter;

  readonly attribute ACString endDelimiter;

  /**
   * contains the matched start delimiter up to the end of the line,
   * including the trailing linebreak (but not the preceding linebreak)
   */
  readonly attribute ACString startLine;

  /**
   * contains the matched end delimiter up to the end of the line,
   * including the preceding and trailing linebreaks
   */
  readonly attribute ACString endLine;

  /**
   * Initializes filtering stream
   */

  void init(in nsIStreamListener listener, in nsISupports ctxt,
            in string startDelimiter, in string endDelimiter,
            in unsigned long skipCount,
            in boolean keepDelimiters, in boolean mimeMultipart,
            in nsIStreamListener tailListener);


  void write(in string buf, in unsigned long count,
             in nsIRequest request, in nsISupports ctxt);
};


///////////////////////////////////////////////////////////////////////////////
