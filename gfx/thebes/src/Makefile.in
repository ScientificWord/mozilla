
DEPTH		= ../../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@

include $(DEPTH)/config/autoconf.mk

MODULE		= thebes
LIBRARY_NAME	= thebes
LIBXUL_LIBRARY	= 1
EXPORT_LIBRARY	= 1

REQUIRES = \
	cairo \
	string \
	pref \
	xpcom \
	unicharutil \
	$(LCMS_REQUIRES) \
	$(NULL)

CPPSRCS	= \
	gfxASurface.cpp \
	gfxAlphaRecovery.cpp \
	gfxContext.cpp \
	gfxImageSurface.cpp \
	gfxFont.cpp \
	gfxFontMissingGlyphs.cpp \
	gfxFontTest.cpp \
	gfxFontUtils.cpp \
	gfxMatrix.cpp \
	gfxPath.cpp \
	gfxPattern.cpp \
	gfxPlatform.cpp \
	gfxRect.cpp \
	gfxSkipChars.cpp \
	gfxTextRunCache.cpp \
	gfxTextRunWordCache.cpp \
	$(NULL)

EXTRA_DSO_LDOPTS += \
	$(MOZ_CAIRO_LIBS) \
	$(MOZ_UNICHARUTIL_LIBS) \
	$(XPCOM_LIBS) \
	$(NSPR_LIBS) \
	$(ZLIB_LIBS) \
	$(LCMS_LIBS) \
	$(NULL)


ifeq ($(MOZ_WIDGET_TOOLKIT),windows)
CPPSRCS	+= 	gfxWindowsFonts.cpp \
		gfxWindowsPlatform.cpp \
		gfxWindowsSurface.cpp \
		gfxWindowsNativeDrawing.cpp \
		nsUnicodeRange.cpp \
		$(NULL)
CPPSRCS +=	gfxPDFSurface.cpp

_OS_LIBS	= usp10 msimg32
ifdef GNU_CXX
_OS_LIBS	+= uuid
endif
OS_LIBS		+= $(call EXPAND_LIBNAME,$(_OS_LIBS))

ACDEFINES +=	-UWIN32_LEAN_AND_MEAN
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),os2)
CPPSRCS	+=	gfxOS2Fonts.cpp \
		gfxOS2Platform.cpp \
		gfxOS2Surface.cpp \
		nsUnicodeRange.cpp \
		gfxFontconfigUtils.cpp \
		$(NULL)
CPPSRCS +=	gfxPDFSurface.cpp
EXTRA_DSO_LDOPTS += $(MOZ_CAIRO_LIBS)
REQUIRES += uconv
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),gtk2)
CPPSRCS +=      gfxXlibSurface.cpp gfxPlatformGtk.cpp gfxXlibNativeRenderer.cpp
CPPSRCS +=	gfxPangoFonts.cpp 
CPPSRCS +=	gfxPDFSurface.cpp gfxPSSurface.cpp
CPPSRCS +=	gfxFontconfigUtils.cpp
CPPSRCS +=	nsUnicodeRange.cpp
CSRCS = cairo-xlib-utils.c
EXTRA_DSO_LDOPTS += $(MOZ_PANGO_LIBS) $(ZLIB_LIBS) $(MOZ_XFT_LIBS) $(XLDFLAGS) $(XLIBS)
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),beos)
CPPSRCS	+= 	gfxBeOSSurface.cpp gfxBeOSPlatform.cpp
CPPSRCS +=	gfxPangoFonts.cpp 
#CPPSRCS +=	gfxPDFSurface.cpp
CPPSRCS +=	gfxFontconfigUtils.cpp
CPPSRCS +=	nsUnicodeRange.cpp
EXTRA_DSO_LDOPTS += $(MOZ_PANGO_LIBS) $(CAIRO_FT_LIBS) -lfontconfig -lpangocairo-1.0
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)
CPPSRCS	+= \
	gfxQuartzSurface.cpp \
	gfxQuartzImageSurface.cpp \
	gfxQuartzPDFSurface.cpp \
	gfxPlatformMac.cpp \
	gfxAtsuiFonts.cpp \
	$(NULL)
#CPPSRCS +=	gfxPDFSurface.cpp
CPPSRCS +=      nsUnicodeRange.cpp
CPPSRCS +=      gfxQuartzNativeDrawing.cpp

CMMSRCS = gfxQuartzFontCache.mm

# Always link with OpenGL/AGL
EXTRA_DSO_LDOPTS += -framework OpenGL -framework AGL -framework QuickTime
endif

ifdef MOZ_ENABLE_GLITZ
REQUIRES += 	glitz
CPPSRCS +=	gfxGlitzSurface.cpp

SHARED_LIBRARY_LIBS += $(DIST)/lib/$(LIB_PREFIX)mozglitz.$(LIB_SUFFIX)

ifeq ($(MOZ_WIDGET_TOOLKIT),windows)
REQUIRES +=	glitzwgl
SHARED_LIBRARY_LIBS += $(DIST)/lib/$(LIB_PREFIX)mozglitzwgl.$(LIB_SUFFIX)
OS_LIBS += opengl32.lib 
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),gtk2)
REQUIRES +=	glitzglx
SHARED_LIBRARY_LIBS += $(DIST)/lib/$(LIB_PREFIX)mozglitzglx.$(LIB_SUFFIX)
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)
REQUIRES +=	glitzagl
SHARED_LIBRARY_LIBS += $(DIST)/lib/$(LIB_PREFIX)mozglitzagl.$(LIB_SUFFIX)
endif
endif

EXTRA_DSO_LDOPTS += $(TK_LIBS)

DEFINES += -DIMPL_THEBES

include $(topsrcdir)/config/rules.mk


CXXFLAGS += $(MOZ_CAIRO_CFLAGS) $(TK_CFLAGS)
CFLAGS += $(MOZ_CAIRO_CFLAGS) $(TK_CFLAGS)

ifeq ($(MOZ_WIDGET_TOOLKIT),gtk2)
CXXFLAGS += $(MOZ_PANGO_CFLAGS)
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),beos)
CXXFLAGS += $(CAIRO_FT_CFLAGS)
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),os2)
CXXFLAGS += $(CAIRO_FT_CFLAGS)
endif
