/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Darin Fisher <darin@netscape.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIURI;
interface nsIDOMNode;
interface nsISimpleEnumerator;

[scriptable, uuid(cba513eb-c457-4b93-832c-1a979e66edd1)]
interface nsIPrefetchService : nsISupports
{
    /**
     * Enqueue a request to prefetch the specified URI.
     *
     * @param aURI the URI of the document to prefetch
     * @param aReferrerURI the URI of the referring page
     * @param aSource the DOM node (such as a <link> tag) that requested this
     *        fetch, or null if the prefetch was not requested by a DOM node.
     * @param aExplicit the link element has an explicit prefetch link type
     */
    void prefetchURI(in nsIURI aURI,
                     in nsIURI aReferrerURI,
                     in nsIDOMNode aSource,
                     in boolean aExplicit);

    /**
     * Enqueue a request to prefetch the specified URI, making sure it's in the
     * offline cache.
     *
     * @param aURI the URI of the document to prefetch
     * @param aReferrerURI the URI of the referring page
     * @param aSource the DOM node (such as a <link> tag) that requested this
     *        fetch, or null if the prefetch was not requested by a DOM node.
     * @param aExplicit the link element has an explicit offline link type
     */
    void prefetchURIForOfflineUse(in nsIURI aURI,
                                  in nsIURI aReferrerURI,
                                  in nsIDOMNode aSource,
                                  in boolean aExplicit);

    /**
     * Enumerate the items in the prefetch queue.  Each element in the
     * enumeration is an nsIDOMLoadStatus.
     *
     * @param aIncludeNormalItems include normal prefetch items in the list.
     * @param aIncludeOfflineItems include items being fetched for offline
     *        use.
     */
    nsISimpleEnumerator enumerateQueue(in boolean aIncludeNormalItems,
                                       in boolean aIncludeOfflineItems);

    // XXX do we need a way to cancel prefetch requests?
};
