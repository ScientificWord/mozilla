/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla GNOME integration code.
 *
 * The Initial Developer of the Original Code is
 * IBM Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Brian Ryner <bryner@brianryner.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIArray.idl"

[scriptable, uuid(5009acae-6973-48c3-b6d6-52c692cc5d9d)]
interface nsIGConfService : nsISupports
{
  /* Basic registry access */
  boolean       getBool(in AUTF8String key);
  AUTF8String   getString(in AUTF8String key);
  long          getInt(in AUTF8String key);
  float         getFloat(in AUTF8String key);

  /*
   * Use this to return any list items in GConf, this will return
   * an array of UTF16 nsISupportsString's.
   */
  nsIArray      getStringList(in AUTF8String key);

  void setBool(in AUTF8String key, in boolean value);
  void setString(in AUTF8String key, in AUTF8String value);
  void setInt(in AUTF8String key, in long value);
  void setFloat(in AUTF8String key, in float value);

  /*
   * Look up the handler for a protocol under the
   * /desktop/gnome/url-handlers hierarchy.
   */
  AUTF8String getAppForProtocol(in AUTF8String scheme, out boolean enabled);

  /*
   * Check whether the handler for a scheme requires a terminal to run.
   */
  boolean handlerRequiresTerminal(in AUTF8String scheme);

  /*
   * Set the handler for a protocol, marking it as enabled.
   * This removes any GnomeVFSMimeApp association for the protocol.
   */
  void   setAppForProtocol(in AUTF8String scheme, in AUTF8String command);
};

%{C++
#define NS_GCONFSERVICE_CONTRACTID "@mozilla.org/gnome-gconf-service;1"
%}
