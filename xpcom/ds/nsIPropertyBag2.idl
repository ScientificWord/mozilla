/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org property bag support.
 *
 * The Initial Developer of the Original Code is
 * Christian Biesinger <cbiesinger@web.de>.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *    Darin Fisher <darin@meer.net>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/* nsIVariant based Property Bag support. */

#include "nsIPropertyBag.idl"

[scriptable, uuid(625cfd1e-da1e-4417-9ee9-dbc8e0b3fd79)]
interface nsIPropertyBag2 : nsIPropertyBag
{
  // Accessing a property as a different type may attempt conversion to the
  // requested value

  PRInt32     getPropertyAsInt32       (in AString prop);
  PRUint32    getPropertyAsUint32      (in AString prop);
  PRInt64     getPropertyAsInt64       (in AString prop);
  PRUint64    getPropertyAsUint64      (in AString prop);
  double      getPropertyAsDouble      (in AString prop);
  AString     getPropertyAsAString     (in AString prop);
  ACString    getPropertyAsACString    (in AString prop);
  AUTF8String getPropertyAsAUTF8String (in AString prop);
  boolean     getPropertyAsBool        (in AString prop);

  /**
   * This method returns null if the value exists, but is null.
   */
  void        getPropertyAsInterface   (in AString prop,
                                        in nsIIDRef iid,
                                        [iid_is(iid), retval] out nsQIResult result);

  /**
   * This method returns null if the value does not exist,
   * or exists but is null.
   */
  nsIVariant  get                      (in AString prop);
 
  /**
   * Check for the existence of a key.
   */
  PRBool      hasKey                   (in AString prop);
};
