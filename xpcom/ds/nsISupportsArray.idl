/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */


#include "nsISupports.idl"
#include "nsICollection.idl"

/*
 * This entire interface is deprecated and should not be used.
 * See nsIArray and nsIMutableArray for the new implementations.
 *
 * http://groups.google.com/groups?q=nsisupportsarray+group:netscape.public.mozilla.xpcom&hl=en&lr=&ie=UTF-8&oe=UTF-8&selm=3D779491.3050506%40netscape.com&rnum=2
 * http://groups.google.com/groups?q=nsisupportsarray+group:netscape.public.mozilla.xpcom&hl=en&lr=&ie=UTF-8&oe=UTF-8&selm=al8412%245ab2%40ripley.netscape.com&rnum=8
 */

native nsISupportsArrayEnumFunc(nsISupportsArrayEnumFunc);

%{C++

class nsIBidirectionalEnumerator;
class nsISupportsArray;
 
#define NS_SUPPORTSARRAY_CID                         \
{ /* bda17d50-0d6b-11d3-9331-00104ba0fd40 */         \
    0xbda17d50,                                      \
    0x0d6b,                                          \
    0x11d3,                                          \
    {0x93, 0x31, 0x00, 0x10, 0x4b, 0xa0, 0xfd, 0x40} \
}
#define NS_SUPPORTSARRAY_CONTRACTID "@mozilla.org/supports-array;1"
#define NS_SUPPORTSARRAY_CLASSNAME "Supports Array"
 
// Enumerator callback function. Return PR_FALSE to stop
typedef PRBool (*nsISupportsArrayEnumFunc)(nsISupports* aElement, void *aData);
 
NS_COM nsresult
NS_NewArrayEnumerator(nsISimpleEnumerator* *result,
                      nsISupportsArray* array);
%}

[scriptable, uuid(791eafa0-b9e6-11d1-8031-006008159b5a)]
interface nsISupportsArray : nsICollection {

  [notxpcom] boolean Equals([const] in nsISupportsArray other);
  
  [notxpcom] nsISupports ElementAt(in unsigned long aIndex);
  
  [notxpcom] long IndexOf([const] in nsISupports aPossibleElement);
  [notxpcom] long IndexOfStartingAt([const] in nsISupports aPossibleElement,
                                    in unsigned long aStartIndex);
  [notxpcom] long LastIndexOf([const] in nsISupports aPossibleElement);
  
  // xpcom-compatible versions
  long GetIndexOf(in nsISupports aPossibleElement);
  long GetIndexOfStartingAt(in nsISupports aPossibleElement,
                            in unsigned long aStartIndex);
  long GetLastIndexOf(in nsISupports aPossibleElement);  
  
  [notxpcom] boolean InsertElementAt(in nsISupports aElement,
                                     in unsigned long aIndex);
  [notxpcom] boolean ReplaceElementAt(in nsISupports aElement,
                                      in unsigned long aIndex);

  [notxpcom] boolean RemoveElementAt(in unsigned long aIndex);
  [notxpcom] boolean RemoveLastElement([const] in nsISupports aElement);
  
  // xpcom-compatible versions
  void DeleteLastElement(in nsISupports aElement);
  void DeleteElementAt(in unsigned long aIndex);
  
  [notxpcom] boolean AppendElements(in nsISupportsArray aElements);
  
  void Compact();
  
  [notxpcom, noscript]
      boolean EnumerateForwards(in nsISupportsArrayEnumFunc aFunc,
                                in voidPtr aData);
  [notxpcom, noscript]
      boolean EnumerateBackwards(in nsISupportsArrayEnumFunc aFunc,
                                 in voidPtr aData);

  nsISupportsArray clone();

  [notxpcom] boolean MoveElement(in long aFrom,
                                 in long aTo);

  [notxpcom] boolean InsertElementsAt(in nsISupportsArray aOther,
                                      in unsigned long aIndex);

  [notxpcom] boolean RemoveElementsAt(in unsigned long aIndex,
                                      in unsigned long aCount);

  [notxpcom] boolean SizeTo(in long aSize);
  
};

%{C++

// Construct and return a default implementation of nsISupportsArray:
extern NS_COM nsresult
NS_NewISupportsArray(nsISupportsArray** aInstancePtrResult);

// Construct and return a default implementation of an enumerator for nsISupportsArrays:
extern NS_COM nsresult
NS_NewISupportsArrayEnumerator(nsISupportsArray* array,
                               nsIBidirectionalEnumerator* *aInstancePtrResult);


%}
