<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type" />
  <title>Fixup Design</title>
</head>
<body>
<h1>Fixup Design and Discussion</h1>
This document describes methods to correct poor MathML markup and
build semantically rich MathML in the Prince demo. It is expected that Prince users will
format their mathematics visually. The Prince computation
component, however, expects its input to be more carefully marked up.
Below, I attempt to give a comprehensive set of examples as well as
describe the design of the fixup feature.<br />
Implicit in this discussion is an understanding that the markup
generated by the Prince editor will be in a consistent form and that that
editor expects a consistent form.
At some point, that form will be documented.<br />
<h2>Operations</h2>
It seems best to break the functionality into several commands.<br />
<ol>
  <li style="font-weight: bold;">Cleanup</li>
  It is expected that eventually the editing component will not emit
  the following constructs and so this function will be unnecessary. 
  <ol>
    <li>Coalesce &lt;mn&gt; tags.</li>
    <li>Remove empty tags. (It looks as though empty &lt;mo&gt; tags should be allowed for empty fences.)</li>
    <li>Remove redundant &lt;mrow&gt; tags.</li>
  </ol>
  <li style="font-weight: bold;">Fixup</li>
  Basically, this does exactly what MathML export from SWP does - translates
  visually formatted MathML into rich markup MathML.
  <ol>
    <li>Group implied fences given as &lt;mo&gt; tags.</li>
    <li>Resolve operator precedence (by inserting &lt;mrow&gt; tags).</li>
    <li>Resolve constant versus function differences using definition
sheets and possibly other knowledge. This means inserting ApplyFunction
and InvisibleTimes operators as appropriate.</li>
    <li>Determine operands of various operators: integral,
differential, vector calculus, transforms, etc. (by inserting
&lt;mrow&gt; tags).</li>
    <li>Resolve markup for units, units.</li>
    <li>Subscript and superscript normalization.</li>
    <li>In general, build the "canonical" form for a piece of mathematics.</li>
  </ol>
  <li style="font-weight: bold;">Interpret</li>
  Basically, process the input as though it were to be sent to the engine, but
  don't actually send it.
  <ol>
    <li>Fixup, plus return an error if the MathML is not well-formed mathematically.</li>
    <li>Examples include unmatched fences, input boxes, missing operands.</li>
  </ol>
  <li style="font-weight: bold;">Flatten</li>
  <ol>
    <li>Invert work done by Fixup for easier editing.</li>
  </ol>
</ol>

It is assumed that the input to other computation
commands besides Interpret has already been passed through the Fixup command.
Additionally, the Fixup command assumes the input has already been passed
through the Cleanup command.
Thus, the Cleanup command is special in that it accepts poorly formed MathML.<br />

I believe there are issues with whitespace for the Cleanup and Flatten commands.<br />

<h2>Examples</h2>

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Notation</span></td>
    </tr>
    <tr>
      <td>&amp;af;</td>
      <td>ApplyFunction</td>
    </tr>
    <tr>
      <td>&amp;it;</td>
      <td>InvisibleTimes</td>
    </tr>
    <tr>
      <td>&amp;ic;</td>
      <td>InvisibleComma</td>
    </tr>
    <tr>
      <td>&amp;ip;</td>
      <td>InvisiblePlus (I'm just making this up...)</td>
    </tr>
    <tr>
      <td>&amp;if;</td>
      <td>InvisibleFence (I'm just making this up...)</td>
    </tr>
  </tbody>
</table>

And &lt;mfenced&gt; is a shorthand for the &lt;mrow&gt; form of fences
and described in the MathML specification.

<h3>Cleanup</h3>
This section to be expanded as more functionality is discovered.<br />

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Numbers</span></td>
    </tr>
    <tr>
      <td>&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;</td>
      <td>&lt;mn&gt;12&lt;/mn&gt;</td>
    </tr>
    <tr>
      <td>&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;</td>
      <td>&lt;mn&gt;1.2&lt;/mn&gt;</td>
    </tr>
    <tr>
      <td>&lt;mo&gt;-&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;</td>
      <td>same as input (need semantic analysis)</td>
    </tr>
    <tr>
      <td>&lt;mn&gt;-2&lt;/mn&gt;</td>
      <td>&lt;mo&gt;-&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;</td>
    </tr>
  </tbody>
</table>

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Indices</span></td>
      </tr>
    <tr>
      <td><small>&lt;msub&gt;&lt;mi&gt;m&lt;/mi&gt;
        <br/>&nbsp;
        &lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;</small></td>
      <td><small>&lt;msub&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mrow&gt;&lt;mn&gt;12&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;</small></td>
      </tr>
    <tr>
      <td><small>&lt;msub&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;
        <br/>&nbsp;
        &lt;mo&gt;&amp;ic;&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;</small></td>
      <td><small>same as input</small></td>
      </tr>
  </tbody>
</table>

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Empty Tags</span></td>
    </tr>
    <tr>
      <td>&lt;mi&gt;&lt;/mi&gt; or &lt;mi/&gt;</td>
      <td></td>
    </tr>
    <tr>
      <td>&lt;mn&gt;&lt;/mn&gt; or &lt;mn/&gt;</td>
      <td></td>
    </tr>
    <tr>
      <td>&lt;mo&gt;&lt;/mo&gt; or &lt;mo/&gt;</td>
      <td></td>
    </tr>
    <tr>
      <td>&lt;mrow&gt;&lt;/mrow&gt; or &lt;mrow/&gt;</td>
      <td></td>
    </tr>
  </tbody>
</table>

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Redundant mrow Tags</span></td>
    </tr>
    <tr>
      <td>&lt;mrow&gt;&lt;mrow&gt;...&lt;/mrow&gt;&lt;/mrow&gt;</td>
      <td>&lt;mrow&gt;...&lt;/mrow&gt;</td>
    </tr>
    <tr>
      <td>&lt;math&gt;&lt;mrow&gt;...&lt;/mrow&gt;&lt;/math&gt;</td>
      <td>&lt;math&gt;...&lt;/math&gt;</td>
    </tr>
    <tr>
      <td>&lt;mtd&gt;&lt;mrow&gt;...&lt;/mrow&lt;/mtd&gt;</td>
      <td>&lt;mtd&gt;...&lt;/mtd&gt;</td>
    </tr>
  </tbody>
</table>

<h4>Questions</h4>
<ol>
  <li>What about mixed numbers?</li>
  <li>Any special handling of superscripts? How about &lt;msubsup&gt;?</li>
  <li>What about &lt;mstyle&gt;, &lt;mpadded&gt;, &lt;mphantom&gt;?</li>
</ol>

<h3>Fixup</h3>

Also note that some examples need several passes to reach final form.<br />

See the sample document TestEvaluate.xhtml for even more examples.<br />

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Operator Precedence</span></td>
    </tr>
    <tr>
      <td>a + b - c + d</td>
      <td></td>
    </tr>
    <tr>
      <td>a + b - c * d</td>
      <td></td>
    </tr>
    <tr>
      <td>a + b&nbsp;/ c - d</td>
      <td></td>
    </tr>
    <tr>
      <td>a + b&nbsp;/ c * d</td>
      <td></td>
    </tr>
    <tr>
      <td>a * d - b * c</td>
      <td></td>
    </tr>
    <tr>
      <td>a - b !</td>
      <td></td>
    </tr>
  </tbody>
</table>

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Implied Fences</span></td>
    </tr>
    <tr>
      <td>3 / ( 4 - x )</td>
      <td>&lt;mfrac&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mfenced&gt; 4 - x &lt;/mfenced&gt;&lt;/mfrac&gt;</td>
    </tr>
    <tr>
      <td>( y - x ) - 5</td>
      <td>&lt;mfenced&gt; y - x &lt;/mfenced&gt; - 5</td>
    </tr>
    <tr>
      <td>&lt;mo&gt;(&lt;/mo&gt; y - x
      <br/>&nbsp;
      &lt;msup&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt; </td>
      <td>&lt;msup&gt;&lt;mfenced&gt; y - x &lt;/mfenced&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;</td>
    </tr>
    <tr>
      <td>{ y, x }</td>
      <td>&lt;mfenced open="{" close="}"&gt; y x &lt;/mfenced&gt;</td>
    </tr>
    <tr>
      <td>[ y, x ] </td>
      <td>&lt;mfenced open="[" close="]"&gt; y x &lt;/mfenced&gt;</td>
    </tr>
    <tr>
      <td>| y | </td>
      <td>&lt;mfenced open="|" close="|"&gt; y &lt;/mfenced&gt;</td>
    </tr>
    <tr>
      <td>( y, x ] </td>
      <td>&lt;mfenced open="(" close="]"&gt; y x &lt;/mfenced&gt;</td>
    </tr>
    <tr>
      <td>(y - (x - z )) </td>
      <td>&lt;mfenced&gt; y - &lt;mfenced&gt; x - z &lt;/mfenced&gt;&lt;/mfenced&gt;</td>
    </tr>
    <tr>
      <td>(a,b) &cap; (m,n) </td>
      <td>&lt;mfenced&gt; a b &lt;/mfenced&gt; <mo>&cap;</mo> &lt;mfenced&gt; m n &lt;/mfenced&gt;</td>
    </tr>

  </tbody>
</table>

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr><td colspan="2"><small><span style="font-weight: bold;">Function Arguments and Invisible Times</span></small></td>
</tr>
<tr>
<td><small>f ( 3 )</small></td>
<td><small>f &amp;it; ( 3 )</small></td>
</tr>
<tr>
<td><small>f ( 3 , 4 )</small></td>
<td><small>f &amp;it; &lt;mfenced&gt; 3 , 4 &lt;/mfenced&gt; (scalar/vector multiplication)</small></td>
</tr>
<tr>
<td><small>sin 3</small></td>
<td><small>sin &amp;af; 3</small></td>
</tr>
<tr>
<td><small>sin 3 &amp;pi;</small></td>
<td><small>sin &amp;af; 3 &amp;it; &amp;pi; (does this need an &lt;mrow&gt;?)</small></td>
</tr>
<tr>
<td><small>sin 3 cos 4</small></td>
<td><small></small></td>
</tr>
<tr>
<td><small>a d - b c</small></td>
<td><small></small></td>
</tr>
  </tbody>
</table>

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Definitions</span></td>
    </tr>
    <tr>
      <td>define f(x); f ( 3 )</td>
      <td>f &amp;af; ( 3 )</td>
    </tr>
    <tr>
      <td>define f(x); f ( 3 , 4 )</td>
      <td>f &amp;af; ( 3 , 4 )</td>
    </tr>
    <tr>
      <td>define f; f ( 3 )</td>
      <td>f &amp;it; ( 3 )</td>
    </tr>
  </tbody>
</table>

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Integrals and Other Operators</span></td>
    </tr>
    <tr>
      <td>&amp;int; x d x</td>
      <td></td>
    </tr>
    <tr>
      <td>&amp;int; x d x d y</td>
      <td></td>
    </tr>
    <tr>
      <td>d/dx 2x</td>
      <td></td>
    </tr>
    <tr>
      <td>&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;x&lt;/mi&gt;</td>
      <td></td>
    </tr>
    <tr>
      <td>&amp;nabla; &amp;cdot; 2 x</td>
      <td></td>
    </tr>
    <tr>
      <td>&lt;mi mathvariant="calligraphic"&gt;F&lt;/mi&gt; ( 2 x )</td>
      <td></td>
    </tr>
  </tbody>
</table>

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Miscellaneous</span></td>
    </tr>
    <tr>
      <td>3 3/4</td>
      <td>3 &amp;ip; 3/4</td>
    </tr>
  </tbody>
</table>

Need examples with embellished ops as fences and subscripts on fences 
having semantic meaning.

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Non Errors</span></td>
    </tr>
    <tr>
      <td>a + </td>
      <td>same as input</td>
    </tr>
    <tr>
      <td>&lt;msqrt/&gt; </td>
      <td>same as input</td>
    </tr>
    <tr>
      <td>&lt;msup&gt; ( 2 &lt;/msup&gt; </td>
      <td>same as input</td>
    </tr>
    <tr>
      <td> ( 2 ( ) </td>
      <td>same as input</td>
    </tr>
  </tbody>
</table>
<h3>Interpret</h3>

Note that MathML markup is much richer than LaTeX, so
the current examples of Interpret in SWP 5.5 are not nearly sufficient.
<br />

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="0">
  <tbody>
    <tr>
      <td colspan="2"><span style="font-weight: bold;">Errors</span></td>
    </tr>
    <tr>
      <td>a + </td>
      <td></td>
    </tr>
    <tr>
      <td>&lt;msqrt/&gt; </td>
      <td></td>
    </tr>
    <tr>
      <td>&lt;msup&gt; ( 2 &lt;/msup&gt; </td>
      <td></td>
    </tr>
    <tr>
      <td> ( 2 ( ) </td>
      <td></td>
    </tr>
  </tbody>
</table>

<h3>Flatten</h3>

This is not necessarily the inverse of Fixup, but for output from Fixup it should be.
That is Fixup(Flatten(Fixup(x))) = Fixup(x).

<h2>Design</h2>

For the most part, the design is simple. Add a command ID for Cleanup, Fixup
and Flatten.
(there already is one for Interpret). However, see comments below
about Scientific Word. It is not clear when those remarks will become
urgent.<br />

The hard part is writing the code to implement the features. &nbsp;The
current computation code is written on the assumption that the input is
sufficiently formatted so as to be unambiguous. This helped the
robustness and accuracy of the original implementation. But now it is
necessary to process MathML which is ambiguous, so two resolutions are:<br />

<ol>
  <li>Make the current code more robust.</li>
  <li>Write new code to handle ambiguous input.</li>
</ol>

I expect that both tactics will come into play.<br />

<h2>Implementation Plan</h2>

Interpret does Semantic Analysis, yet Fixup doesn't.
Their frontend syntactic analysis appears to be the same, hence
there will be significant code sharing.

Currently, some examples work for Interpret. In particular, handling of
single pairs of fences and grouping fences with superscripts has been
added to the original code from Jack.<br />
Also, Interpret was restored to the Compute menu.
(Below, &exist; means the item is completed.)
<br />
<ol>
  <li>&exist; Handle nested fences in Interpret.</li>
  <li>&exist; Handle embellished fences in Interpret. (Allow superscripts, multiple decorations, etc.)</li>
  <li>&exist; Add a Cleanup command. It is expected this will involve mostly new
code, though it's possible the input processing will have to be
solidified.</li>
  <li>Change the setup for ComputeDLL to emit &lt;mrow&gt; fences instead of &lt;mfenced&gt;.</li>
  <li>Finish Interpret implementation, i.e. make all testcases pass.
      Here is the list of tasks from Jack's code:
    <ol>
      <li>Add operator information.</li>
      <li>Bind Mixed Numbers.</li>
      <li>Bind Units</li>
      <li>Bind Deg/Min/Sec</li>
      <li>Bind Delimited Integrals</li>
      <li>Bind Operators / Insert ApplyFunction / Insert InvisibleTimes</li>
      The later is done in about ten stages.  Recall that the MathML Operator Dictionary
      gives a "normative" operator precedence table.
    </ol>
  </li>
  <li>Clone Interpret testcases for use in Fixup.</li>
  <li>Add a Fixup command. It is expected this will mostly share code with Interpret.
  Unfortunately, the requirement to handle ill-formed constructs will stress the code.  </li>
  <li>Change Prince so that it runs Cleanup often.</li>
  <li>Change Prince so that it always runs Fixup in computation commands.</li>
  <li>Change Prince so that it always runs Flatten on the results of computation commands.</li>
  <li>Extend test cases to handle definitions, built in functions and constants, and other missing features.</li>
  <li>Extend implementation to work in Scientific Word.</li>
</ol>

Cleanup and Flatten may need a non-whitespace version of MathML output.<br/>

<h2>Usage</h2>
It appears that Cleanup is a robust and simple command. It seems
reasonable to run it every time the user initiates a computation or the
cursor leaves the expression. The result of the Cleanup will replace the
original input. This might create issues with the placement of the
cursor or the Undo stack.<br />

Interpret, however, may add significant markup to the MathML. Time will
tell whether it's appropriate to replace the input or not. In any case,
most input will need to run through Interpret before being handled by
other computation commands.

<h3>Use in Scientific Word</h3>

Although Scientific Word does not support computation, it is expected
that it will output good MathML markup. Hence, the features described
in this document need to be functional in Scientific Word. This is a
problem with the current setup because computation commands are only
processed when an engine is loaded. I see two possible solutions to
this problem.<br />

<ol>
  <li>Implement a new "passthrough" engine which processes Define, Cleanup, Fixup and Flatten commands.
      No external engine is needed.</li>
  <li>Change the current implementation to allow Define, Cleanup, Fixup and Flatten commands to be
      processed even if no engine is loaded.</li>
</ol>

The differences between these approaches seem minor. In either case,
Scientific Word will contain a computation component. &nbsp;And it will
not need a computer algebra system.

<h2>Testjig Tasks</h2>

Jack's testjig program remains extremely useful for verifying the
correctness of changes and for regression testing.
Here is a list of things which could make it better.
<ol>
  <li>Add a notation for failure returns.  (Currently, command failures abort test script.)</li>
  <li>Separate recent lists and controls for xhtml and tscript files.</li>
  <li>Add Cleanup, Fixup and Interpret to health1 test script.  Flatten?</li>
  <li>Add edit field for direct evaluation.</li>
  <li>Better script storage.  I can see two possible solutions:
    <ol>
      <li>Change tscript to be purely as xhtml.
          This at least makes the files viewable in Firefox; possibly editable by Prince later.</li>
      <li>Define new XML format to contain both the tscript information and the expected results.
          Use XSLT to transform this into the tscript and OK files.</li>
    </ol>
  </li>
  <li>Find way to get MuPAD scripts to run cleanly when Maple isn't installed.</li>
</ol>
</body>
</html>
