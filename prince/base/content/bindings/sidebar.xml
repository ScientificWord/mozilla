<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Composer.
   -
   - The Initial Developer of the Original Code is
   - Disruptive Innovations SARL.
   - Portions created by the Initial Developer are Copyright (C) 2006
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Daniel Glazman (daniel.glazman@disruptive-innovations.com), Original Author
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
  <!ENTITY % sidebarDTD SYSTEM "chrome://prince/locale/sidebar.dtd" >
  %sidebarDTD;
]>

<bindings id="sidebarBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="sidebaritems">

    <implementation>
      <method name="init">
        <body>
        <![CDATA[
          // let's find all sidebaritems living in their own window'
          var items = this.getElementsByAttribute("standalone", "true");
          for (var i = 0; i < items.length; i++)
          {
            var item = items[i];
            // retrieve all the data it carries
            var name       = item.getAttribute("name");
            var properties = item.getAttribute("properties");
            var src        = item.getAttribute("src");
            // let's see if we have a localized string for that
            // item name'
            var label      = item.getAttribute("title");

            // show it
            window.openDialog("chrome://prince/content/standaloneSidebar.xul","_blank",
                              "all,dependent,dialog=no", name,
                              label ? label : name, src, item);
          }
        ]]>
        </body>
      </method>

      <property name="mItems"
                readonly="true"
                onget="return this.getElementsByTagName('sidebaritem');" />

      <method name="_getItemsFromName">
        <parameter name="aName"/>
        <body>
        <![CDATA[
          return this.getElementsByAttribute("name", aName);
        ]]>
        </body>
      </method>

    </implementation>

  </binding>

  <binding id="sidebar">

    <content>
      <xul:hbox align="center" class="titlebox">
        <xul:toolbarbutton label="&addSidebarContent.label;" class="sidebar-morebutton" type="menu"
                           tooltiptext="&addSidebarContent.tooltip;">
          <xul:menupopup onpopupshowing="this.parentNode.parentNode.parentNode._updateMissingSidebarItems(this)"/>
        </xul:toolbarbutton>
        <xul:spacer flex="1"/>
        <xul:toolbarbutton class="sidebar-closebutton"
                           tooltiptext="&closeSidebar.tooltip;"
                           oncommand="this.parentNode.parentNode._close()"/>
      </xul:hbox>
      <xul:separator class="groove-thin"/>
      <xul:vbox flex="1" anonid="content">
        <children/>
      </xul:vbox>
    </content>

    <implementation>

      <field name="mXUL_NS">"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"</field>

      <field name="mSidebarItems">null</field>
      <field name="mOtherSidebar">null</field>
      <field name="mSplitter">null</field>

      <property name="mContents"
                readonly="true"
                onget="return this.getElementsByTagName('sidebarcontent');" />
      <property name="mSplitters"
                readonly="true"
                onget="return this.getElementsByTagName('splitter');" />

      <method name="init">
        <parameter name="aSidebarItems"/>
        <parameter name="aOtherSidebar"/>
        <parameter name="aSplitter"/>
        <body>
        <![CDATA[

          if (!aSidebarItems)
            return;

          this.mSidebarItems = aSidebarItems;
          this.mOtherSidebar = aOtherSidebar;
          this.mSplitter     = aSplitter;

          // get the list of sidebaritems shown in this sidebar
          var itemsAttr  = this.getAttribute("sidebaritems");
          var itemsArray = itemsAttr.split(",");
          var ordinalIndex = 1;
          for (var i = 0; i < itemsArray.length; i++)
          {
            // sanity case
            if (itemsArray[i])
            {
              // now, find the corresponding sidebaritem
              var item = aSidebarItems._getItemsFromName(itemsArray[i]).item(0);
              if (item)
              {
                // retrieve all the data it carries
                var properties = item.getAttribute("properties");
                var src        = item.getAttribute("src");
                // the height on the sidebaritem is persistent, and is updated
                // each time a splitter between sidebarcontent elements is moved
                var height     = item.getAttribute("height");

                // let's see if we have a localized string for that
                // item name
                var label      = item.getAttribute("title");

                // create a sidebarcontent
                var sidebarcontent = document.createElementNS(this.mXUL_NS, "sidebarcontent");
                // set the name and the height
                sidebarcontent.setAttribute("name",  itemsArray[i]);
                sidebarcontent.setAttribute("height",  height);
                // append it to the sidebar
                this.appendChild(sidebarcontent);
                // and init it
                sidebarcontent._setLabel(label ? label : itemsArray[i]);
                // now create the iframe
                var iframe = document.createElementNS(this.mXUL_NS, "iframe");
                iframe.setAttribute("flex", "1");
                iframe.setAttribute("src", src);
                sidebarcontent.appendChild(iframe);
                
                sidebarcontent.setAttribute("ordinal", ordinalIndex++);

                // and this is not the last sidebaritem for this sidebar,
                // let's add a splitter
                if (i < itemsArray.length - 1)
                {
                  var splitter = document.createElementNS(this.mXUL_NS, "splitter");
                  // we need to know when the splitter is moved.
                  splitter.setAttribute("oncommand",
                                        "this.parentNode._setPersistentHeights()");
                  // append the splitter to the sidebar
                  splitter.setAttribute("ordinal", ordinalIndex++);
                  this.appendChild(splitter);
                }
              }
            }
          }

        ]]>
        </body>
      </method>

      <method name="_setPersistentHeights">
        <body>
        <![CDATA[

          // early way out if no sidebaritems
          if (!this.mSidebarItems)
            return;

          // browse all sidebarcontent elements in this sidebar
          var contents = this.mContents;
          for (var i = 0; i < contents.length; i++)
          {
            var child = contents[i];
            // find their unique identifier
            var name = child.getAttribute("name");
            if (name.length)
            {
              // find the corresponding sidebaritem
              var items = this.mSidebarItems._getItemsFromName(name);
              if (items && items.length)
              {
                var item = items[0];
                // get the sidebarcontent's height and store it in the
                // sidebaritem
                item.setAttribute("height", child.getAttribute("height"));
                // make it persist so we get it back next session
                document.persist(item.getAttribute("id"), "height");
              }
            }
          }

        ]]>
        </body>
      </method>

      <method name="_updatePersistentItemsList">
        <body>
        <![CDATA[

          function compare(a, b) {
            return a.ordinal - b.ordinal;
          }

          // early way out if no sidebaritems
          if (!this.mSidebarItems)
            return;

          // find all sidebarcontents in the current sidebar
          var contents = this.mContents;
          if (!contents || !contents.length)
          {
            // none, zilch, nada... Make that persist and leave
            this.setAttribute("sidebaritems", "");
            document.persist(this, "sidebaritems");
            return;
          }

          // make an array storing all sidebarcontents
          var itemsArray = [];
          for (var i = 0; i < contents.length; i++)
            itemsArray.push( contents[i] );

          // sort it by ordinal
          itemsArray.sort(compare);

          // now rebuild the sidebaritems attribute on the sidebar
          var newList = "";
          for (var i = 0; i < itemsArray.length; i++)
          {
            var item = itemsArray[i];
            item.setAttribute("ordinal", i * 2 + 1);
            if (i)
              newList += ",";
            newList += item.getAttribute("name");
          }

          // store and persist
          this.setAttribute("sidebaritems", newList);
          document.persist(this, "sidebaritems");

          // don't forget to update splitters' ordinal !
          var splitters = this.mSplitters;
          for (var i = 0; i < splitters.length; i++)
          {
            splitters[i].setAttribute("ordinal", i * 2 + 2);
          }

        ]]>
        </body>
      </method>

      <method name="_addToOtherSidebar">
        <parameter name="aName"/>
        <parameter name="aTitle"/>
        <parameter name="aURL"/>
        <body>
        <![CDATA[
          this.mOtherSidebar.addContent(aName, aTitle, aURL);
        ]]>
        </body>
      </method>

      <method name="addContent">
        <parameter name="aName"/>
        <parameter name="aTitle"/>
        <parameter name="aURL"/>
        <body>
        <![CDATA[
          // what should be the default original for this new content ?
          var ordinalIndex = this.childNodes.length;
          if (ordinalIndex)
          {
            var splitter = document.createElementNS(this.mXUL_NS, "splitter");
            // we need to know when the splitter is moved.
            splitter.setAttribute("oncommand",
                                  "this.parentNode._setPersistentHeights()");
            // append the splitter to the sidebar
            splitter.setAttribute("ordinal", ++ordinalIndex);
            this.appendChild(splitter);
          }

          // create a sidebarcontent
          var sidebarcontent = document.createElementNS(this.mXUL_NS, "sidebarcontent");
          // set the name and the height
          sidebarcontent.setAttribute("name",  aName);
          // append it to the sidebar
          this.appendChild(sidebarcontent);
          // and init it
          sidebarcontent._setLabel(aTitle);
          // now create the iframe
          var iframe = document.createElementNS(this.mXUL_NS, "iframe");
          iframe.setAttribute("flex", "1");
          iframe.setAttribute("src", aURL);
          sidebarcontent.appendChild(iframe);
          
          sidebarcontent.setAttribute("ordinal", ordinalIndex++);

          this._updatePersistentItemsList();
        ]]>
        </body>
      </method>

      <method name="_addSidebarItem">
        <parameter name="aMenuitem"/>
        <body>
        <![CDATA[
          this.addContent( aMenuitem.getAttribute("name"),
                            aMenuitem.getAttribute("label"),
                            aMenuitem.getAttribute("src") );
        ]]>
        </body>
      </method>

      <method name="_updateMissingSidebarItems">
        <parameter name="aPopup"/>
        <body>
        <![CDATA[
          // early way out if no sidebaritems
          if (!this.mSidebarItems)
            return;

          // find all sidebaritems
          var items = this.mSidebarItems.mItems;
          var missingItems = {};
          for (var i = 0; i < items.length; i++)
          {
            var item = items[i];
            var name  = item.getAttribute("name");
            var title = item.getAttribute("title");
            var src   = item.getAttribute("src");

            // don't offer to them to a sidebar if they are
            // already shown in standalone windows
            if (item.getAttribute("standalone") != "true")
              missingItems[name] = [ title, src ]
          }

          // remove from list the ones already in the current sidebar
          var contents = this.mContents;
          for (var i = 0; i < contents.length; i++)
          {
            var content = contents[i];
            name = content.getAttribute("name");
            delete missingItems[name];
          }
          // and remove from list the ones already in the other sidebar
          // if there is one
          if (this.mOtherSidebar)
          {
            contents = this.mOtherSidebar.mContents;
            for (var i = 0; i < contents.length; i++)
            {
              content = contents[i];
              name = content.getAttribute("name");
              delete missingItems[name];
            }
          }

          // popup cleanup
          while (aPopup.hasChildNodes())
            aPopup.removeChild(aPopup.lastChild);

          var empty = true;
          for (i in missingItems)
          {
            empty = false;
            var menuitem = document.createElementNS(this.mXUL_NS, "menuitem");
            var label    = missingItems[i][0];
            menuitem.setAttribute("label", label ? label : i);
            menuitem.setAttribute("tooltiptext", label ? label : i);
            menuitem.setAttribute("name",  i);
            menuitem.setAttribute("src",   missingItems[i][1]);
            menuitem.setAttribute("oncommand", "this.parentNode.parentNode.parentNode.parentNode._addSidebarItem(this)");
            aPopup.appendChild(menuitem);
          }
          if (empty)
          {
            var menuitem = document.createElementNS(this.mXUL_NS, "menuitem");
            menuitem.setAttribute("label", " -- ");
            menuitem.setAttribute("disabled", "true");
            aPopup.appendChild(menuitem);
          }
        ]]>
        </body>
      </method>

      <method name="_close">
        <body>
        <![CDATA[
          if (this.mSplitter)
            this.mSplitter.setAttribute("state", "collapsed");
          else
            this.setAttribute("collapsed", "true");
        ]]>
        </body>
      </method>

    </implementation>

  </binding>

  <binding id="sidebarcontent">

    <content>
      <xul:hbox align="center" class="titlebox" anonid="titlebox">
        <xul:label anonid="name" class="sidebarcontent-name"/>
        <xul:spacer flex="1"/>
        <xul:toolbarbutton label="&actions.label;" class="sidebar-arrowbutton" type="menu">
          <xul:menupopup onpopupshowing="this.parentNode.parentNode.parentNode._updateActionsPopup(this)">
            <xul:menuitem anonid="closemenu"
                          label="&closeMenu.label;"
                          accesskey="&closeMenu.accesskey;"
                          oncommand="this.parentNode.parentNode.parentNode.parentNode._close()"/>
            <xul:menuseparator/>
            <xul:menuitem anonid="moveupmenu"
                          label="&moveUpMenu.label;"
                          accesskey="&moveUpMenu.accesskey;"
                          oncommand="this.parentNode.parentNode.parentNode.parentNode._move(-2)" />
            <xul:menuitem anonid="movedownmenu"
                          label="&moveDownMenu.label;"
                          accesskey="&moveDownMenu.accesskey;"
                          oncommand="this.parentNode.parentNode.parentNode.parentNode._move(+2)" />
            <xul:menuseparator/>
            <xul:menuitem anonid="moveothermenu"
                          label="&moveOtherMenu.label;"
                          accesskey="&moveOtherMenu.accesskey;"
                          oncommand="this.parentNode.parentNode.parentNode.parentNode._moveToOtherSidebar()" />
            <xul:menuseparator/>
            <xul:menuitem anonid="detachmenu"
                          label="&detachMenu.label;"
                          accesskey="&detachMenu.accesskey;"
                          oncommand="this.parentNode.parentNode.parentNode.parentNode._detach()" />
          </xul:menupopup>
        </xul:toolbarbutton>
      </xul:hbox>
      <xul:separator class="groove-thin"/>
      <children/>
    </content>

    <implementation>
      <property name="mTitleBox">
        <getter>
        <![CDATA[
          return document.getAnonymousElementByAttribute(this, "anonid", "titlebox");
        ]]>
        </getter>
      </property>

      <property name="mLabel">
        <getter>
        <![CDATA[
          return this.mTitleBox.firstChild;
        ]]>
        </getter>
      </property>

      <property name="mTitle">
        <getter>
        <![CDATA[
          return this.mLabel.value;
        ]]>
        </getter>
      </property>

      <property name="mContent">
        <getter>
        <![CDATA[
          return this.getElementsByTagName("iframe").item(0);
        ]]>
        </getter>
      </property>

      <method name="_updateActionsPopup">
        <parameter name="aPopup"/>
        <body>
        <![CDATA[
          var isFirst = (this.getAttribute("ordinal") == "1");
          var isLast  = (this.getAttribute("ordinal") == this.parentNode.childNodes.length);
          var moveupmenu   = aPopup.getElementsByAttribute("anonid", "moveupmenu")[0];
          var movedownmenu = aPopup.getElementsByAttribute("anonid", "movedownmenu")[0];
          moveupmenu.setAttribute("disabled", isFirst);
          movedownmenu.setAttribute("disabled", isLast);
          var moveothermenu = aPopup.getElementsByAttribute("anonid", "moveothermenu")[0];
          if (this.parentNode.mOtherSidebar)
            moveothermenu.removeAttribute("disabled");
          else
            moveothermenu.setAttribute("disabled", "true");
        ]]>
        </body>
      </method>

      <method name="_setLabel">
        <parameter name="aLabel"/>
        <body>
        <![CDATA[
          this.mLabel.value = aLabel;
        ]]>
        </body>
      </method>

      <method name="_close">
        <body>
        <![CDATA[
          var currentOrdinal  = parseInt(this.getAttribute("ordinal"));
          var sidebar = this.parentNode;
          if (currentOrdinal == 1)
          {
            // we have a splitter after the current item and we have
            // to remove it
            var splitterOrdinal = currentOrdinal + 1;
            var splitters = this.parentNode.getElementsByAttribute("ordinal", splitterOrdinal);
            if (splitters && splitters.length)
              sidebar.removeChild(splitters[0]);
          }
          else
          {
            // we have a splitter before the current item and we have
            // to remove it
            var splitterOrdinal = currentOrdinal - 1;
            var splitters = this.parentNode.getElementsByAttribute("ordinal", splitterOrdinal);
            if (splitters && splitters.length)
              sidebar.removeChild(splitters[0]);
          }
          sidebar.removeChild(this);

          sidebar._updatePersistentItemsList();
        ]]>
        </body>
      </method>

      <method name="_move">
        <parameter name="aOffset"/>
        <body>
        <![CDATA[
          // we always have a splitter before the current element
          // as we always have another sidebarcontent before the splitter
          var currentOrdinal  = this.getAttribute("ordinal");
          var otherOrdinal = parseInt(currentOrdinal) + aOffset;
          var otherContent = this.parentNode.getElementsByAttribute("ordinal", otherOrdinal).item(0);
          otherContent.setAttribute("ordinal", currentOrdinal);
          this.setAttribute("ordinal", otherOrdinal);

          this.parentNode._updatePersistentItemsList();
        ]]>
        </body>
      </method>

      <method name="_moveToOtherSidebar">
        <body>
        <![CDATA[
          var sidebar = this.parentNode;
          var title = this.mTitle;
          var src   = this.mContent.getAttribute("src");
          var name  = this.getAttribute("name");

          // we cannot really move a sidebarcontent from one
          // sidebar to the other because the iframe's context is
          // lost anyway
          sidebar._addToOtherSidebar(name, title, src);

          // close this one
          this._close();
        ]]>
        </body>
      </method>

      <method name="_detach">
        <body>
        <![CDATA[
          var label = this.mTitle;
          var name  = this.getAttribute("name");
          // find the corresponding sidebaritem
          var sidebar = this.parentNode;
          var items = sidebar.mSidebarItems._getItemsFromName(name);
          if (items && items.length)
          {
            var item = items[0];
            // remember that we want this sidebaritem to be floating alone
            item.setAttribute("standalone", "true");
            document.persist(item.getAttribute("id"), "standalone");

            var src  = item.getAttribute("src");
            // make it float, make it float
            window.openDialog("chrome://prince/content/standaloneSidebar.xul","_blank",
                              "chrome,dependent,titlebar,scrollbars=yes,resizable", name, label, src, item);

          // close this one
            this._close();
          }
        ]]>
        </body>
      </method>

    </implementation>

  </binding>

</bindings>
