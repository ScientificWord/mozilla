<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Composer.
   -
   - The Initial Developer of the Original Code is
   - Disruptive Innovations SARL.
   - Portions created by the Initial Developer are Copyright (C) 2006
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Daniel Glazman (daniel.glazman@disruptive-innovations.com), Original Author
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
  <!ENTITY % structurebarDTD SYSTEM "chrome://prince/locale/structurebar.dtd" >
  %structurebarDTD;
]>

<bindings id="structurebarBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="structurebar" extends="chrome://global/content/bindings/scrollbox.xml#arrowscrollbox">

    <resources>
      <stylesheet src="chrome://prince/skin/structurebar.css"/>
    </resources>

    <implementation>

      <field name="mLastNode">null</field>

      <method name="selectionChanged">
        <parameter name="aArguments"/>
        <parameter name="aNode"/>
        <parameter name="aOneElementSelected"/>
        <body>
        <![CDATA[
          var node = aNode;
          var toolbarbutton;
          if (this.mLastNode == node)
          {
            // avoid rebuilding the whole structure toolbar if possible
            toolbarbutton = this.lastChild;
            while (node && toolbarbutton &&
                   node == toolbarbutton.getUserData("node") &&
                   node.nodeName.toLowerCase() != "html")
            {
              node = node.parentNode;
              toolbarbutton = toolbarbutton.previousSibling;
            }
            // so we rebuild from toolbarbutton up to the root
          }
          else
          {
            // the deepest node is not the one the toolbar is currently showing,
            // so let's clear all
            this.mLastNode = node;
            toolbarbutton = this.lastChild;
          }

          while (toolbarbutton)
          {
            var tmp = toolbarbutton.previousSibling;
            if (toolbarbutton.localName == "toolbarbutton")
              this.removeChild(toolbarbutton);
            toolbarbutton = tmp;
          }

          while (node.nodeName.toLowerCase() != "html")
          {
            var newLabel = document.createElement("toolbarbutton");

            var text = "<" + node.nodeName.toLowerCase();
            if (node.id)
              text += "#" + node.id;
            if (node.className)
              text += "." + node.className.replace( / /g, ".");
            text += ">"

            newLabel.setAttribute("label",     text);
            if (aOneElementSelected && aNode == node)
              newLabel.setAttribute("checked", "true");

            newLabel.setUserData("node", node, null);
            this.insertBefore(newLabel, this.firstChild);

            node = node.parentNode;
          }

          // make sure the deepest element is visible;
          // we always have a lastChild here
          var lastButton = this.lastChild.previousSibling;
          if (lastButton)
            this.ensureElementIsVisible(lastButton);
        ]]>
        </body>
      </method>

      <method name="init">
        <body>
        <![CDATA[
          NotifierUtils.addNotifierCallback("selection", this.selectionChanged, this);
        ]]>
        </body>
      </method>

      <method name="shutdown">
        <body>
        <![CDATA[
          NotifierUtils.removeNotifierCallback("selection", this.selectionChanged, this);
        ]]>
        </body>
      </method>

      <method name="selectNode">
        <parameter name="aNode"/>
        <body>
        <![CDATA[
          var editorElement = msiGetActiveEditorElement();
          var editor = msiGetEditor(editorElement);
          var node   = aNode.getUserData("node");
          if (editor && node)
            editor.selectElement(node);
        ]]>
        </body>
      </method>

    </implementation>

    <handlers>
      <handler event="command">
        <![CDATA[
          var elt = event.target;
          if (elt.localName == "toolbarbutton")
            this.selectNode(elt);
        ]]>
      </handler>
    </handlers>

  </binding>

</bindings>
