<?xml version="1.0"?> 
<!-- Copyright (c) 2004 MacKichan Software, Inc.  All Rights Reserved. -->

<?xml-stylesheet href="chrome://prince/skin/toolbarsOverlay.css" type="text/css"?>
<?xul-overlay href="chrome://prince/content/typesetOverlay.xul" ?>

<!DOCTYPE overlay [
<!ENTITY % DTD SYSTEM "chrome://prince/locale/menuOverlay.dtd">
%DTD;
<!ENTITY % toolbarDTD SYSTEM "chrome://prince/locale/toolbarsOverlay.dtd" >
 %toolbarDTD;
 <!ENTITY % inspectorDTD SYSTEM "chrome://inspector/locale/tasksOverlay.dtd" >
 %inspectorDTD;
]>

<overlay id="editorOverlay"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <script type="application/x-javascript"  src="chrome://prince/content/toolbarsOverlay.js"/>
  <script type="application/x-javascript"  src="chrome://venkman/content/venkman-overlay.js"/>
  <script type="application/x-javascript"  src="chrome://inspector/content/hooks.js"/>
  
  <menu id="fileMenu" label="&fileMenu.label;" accesskey="&filemenu.accesskey;">
    <menupopup id="menu_FilePopup" onpopupshowing="EditorInitFileMenu();">
      <menuitem id="menu_newBlankPage" label="&newBlankPageCmd.label;" 
                accesskey="&newBlankPage.accesskey;" key="key_newBlankPage"
                command="cmd_newEditor"/>
      <menuitem id="openMenuitem" accesskey="&fileopen.accesskey;"
                  key="openeditorkb"
                  observes="cmd_open" 
                  label="&openFileCmd.label;"/>
      <menuitem accesskey="&fileopenremote.accesskey;"  
                  key="openremoteeditorkb" 
                  observes="cmd_openRemote"/>
      <menuitem observes="cmd_openTeX" label="Import TeX ..."/>
      <menuitem observes="cmd_exportTeX" label="Export TeX ..."/>
      <menu id="menu_RecentFiles" accesskey="&filerecentmenu.accesskey;" label="&fileRecentMenu.label;"
            onpopupshowing="BuildRecentFilesMenu();">
        <menupopup id="menupopup_RecentFiles" oncommand="editPage(event.target.getAttribute('value'), window, false);"/>
          <!-- menuitems appended at runtime -->
      </menu>
      <menuitem accesskey="&fileclose.accesskey;" key="closekb" observes="cmd_close"
          label="&closeCmd.label;"/>
      <menuseparator/>
      <menuitem id="saveMenuitem" accesskey="&filesave.accesskey;" key="savekb" observes="cmd_save"
        label="&saveCmd.label;" />
      <menuitem accesskey="&filesaveas.accesskey;" observes="cmd_saveAs"
        label="&saveAsCmd.label;"/>
      <menuitem accesskey="&filerevert.accesskey;" observes="cmd_revert"
        label="&fileRevert.label;" />
      <menuseparator/>
      <menu id="printPreviewMenuItem" accesskey="&fileprintpreview.accesskey;" key="printpreviewkb" 
       observes="cmd_printPreview" label="&printPreviewCmd.label;" >
        <observes id="printPreviewMenuObs" element="defaultCompiler" attribute="defcomp" />
        <menupopup id="printPreviewMenu" tooltiptext="" >
          <menuitem id="printPreviewMenuItem1" label="&printPreviewToolbarCmd.label;" persist="default" default="true"
                    oncommand="goDoCommand('cmd_previewDirect');event.stopPropagation();" for="" onbroadcast="setDefaultmenu(this);" >
            <observes id="ppmObs1" element="defaultCompiler" attribute="defcomp" />
          </menuitem>        
          <menuitem id="printPreviewMenuItem1pdf" label="&pdfpreviewButton.label;" persist="default" default="false"
                    oncommand="goDoCommand('cmd_previewPdf'); event.stopPropagation();"  for="pdf" onbroadcast="setDefaultmenu(this);">
            <observes id="ppmObs2" element="defaultCompiler" attribute="defcomp"  />
          </menuitem>        
          <menuitem id="printPreviewMenuItem1dvi" label="&dvipreviewButton.label;" persist="default" default="false"
                    oncommand="goDoCommand('cmd_previewDvi');;event.stopPropagation();"  for="dvi" onbroadcast="setDefaultmenu(this);">
            <observes id="ppmObs3" element="defaultCompiler" attribute="defcomp"  />
          </menuitem>        
          <menuseparator/>
          <menu id="chooseDefPrinter3" label="&chooseDefPrinter.label;" >
	          <menupopup id="menuChooseDefPrinterPopup3">
	            <menuitem id="directMode3" label="&direct;" checked="true" 
                oncommand="return setDefaultPrinter('',event);" for="" onbroadcast="setDefaultmenu(this);">
                <observes id="ppmObs3" element="defaultCompiler" attribute="defcomp" />
              </menuitem>        
	            <menuitem id="pdfMode3" label="&pdf;" 
                oncommand="return setDefaultPrinter('pdf',event);" for="pdf" onbroadcast="setDefaultmenu(this);">
                <observes id="ppmObs4" element="defaultCompiler" attribute="defcomp" />
              </menuitem>        
	            <menuitem id="dviMode3" label="&dvi;" 
                oncommand="return setDefaultPrinter('dvi',event);" for="dvi" onbroadcast="setDefaultmenu(this);">
                 <observes id="ppmObs5" element="defaultCompiler" attribute="defcomp" />
              </menuitem>        
	          </menupopup>
          </menu>
        </menupopup>
      </menu>
      <menu id="printMenuItem" accesskey="&fileprint.accesskey;" key="printkb" 
       observes="cmd_print" label="&printCmd.label;">
        <observes id="printPreviewMenuObs" element="defaultCompiler" attribute="defcomp" />
        <menupopup id="printMenuPop" tooltiptext="" >
          <menuitem id="printMenuItem1" label="&printButton.label;" persist="default" default="true"
                    oncommand="goDoCommand('cmd_printDirect');;event.stopPropagation();" for="" onbroadcast="setDefaultmenu(this);">
            <observes id="ppmObs7" element="defaultCompiler" attribute="defcomp" />
          </menuitem>        
          <menuitem id="printMenuItem1pdf" label="&pdfprintButton.label;" persist="default" default="false"
                    oncommand="goDoCommand('cmd_printPdf');event.stopPropagation();"  for="pdf" onbroadcast="setDefaultmenu(this);">
            <observes id="ppmObs8" element="defaultCompiler" attribute="defcomp" />
          </menuitem>        
          <menuitem id="printMenuItem1dvi" label="&dviprintButton.label;" persist="default" default="false"
                    oncommand="goDoCommand('cmd_printDvi');event.stopPropagation();"  for="dvi" onbroadcast="setDefaultmenu(this);" >
            <observes id="ppmObs9" element="defaultCompiler" attribute="defcomp"  />
          </menuitem>        
          <menuseparator/>
          <menu id="chooseDefPrinter4" label="&chooseDefPrinter.label;" >
	          <menupopup id="menuChooseDefPrinterPopup10">
	            <menuitem id="directMode7" label="&direct;" checked="true" 
                oncommand="return setDefaultPrinter('',event);" for="" onbroadcast="setDefaultmenu(this);">
                <observes id="ppmObs10" element="defaultCompiler" attribute="defcomp" />
              </menuitem>        
	            <menuitem id="pdfMode7" label="&pdf;" 
                oncommand="return setDefaultPrinter('pdf',event);" for="pdf" onbroadcast="setDefaultmenu(this);">
                <observes id="ppmObs11" element="defaultCompiler" attribute="defcomp" />
              </menuitem>        
	            <menuitem id="dviMode7" label="&dvi;" 
                oncommand="return setDefaultPrinter('dvi',event);" for="dvi" onbroadcast="setDefaultmenu(this);">
                 <observes id="ppmObs12" element="defaultCompiler" attribute="defcomp" />
              </menuitem>        
	          </menupopup>
          </menu>
        </menupopup>
      </menu>
      <menuseparator/>
      <menuitem id="quitMenuItem" accesskey="&fileexit.accesskey;" key="key_quit" 
        observes="cmd_quit" label="&exitCmd.label;"/>
    </menupopup>
  </menu>
  
  <menu id="editMenu" label="&editMenu.label;" accesskey="&editmenu.accesskey;">
    <menupopup id="edEditMenuPopup">
      <menuitem id="menu_undo"
                label="&undoCmd.label;"
                key="key_undo"
                accesskey="&undoCmd.accesskey;"
                command="cmd_undo"/>
      <menuitem id="menu_redo"
                label="&redoCmd.label;"
                key="key_redo"
                accesskey="&redoCmd.accesskey;"
                command="cmd_redo"/>
      <menuseparator id="edEditMenuSep1" />
      <menuitem id="menu_cut"
                label="&cutCmd.label;"
                key="key_cut"
                accesskey="&cutCmd.accesskey;"
                command="cmd_cut"/>
      <menuitem id="menu_copy"
                label="&copyCmd.label;"
                key="key_copy"
                accesskey="&copyCmd.accesskey;"
                command="cmd_copy"/>
      <menuitem id="menu_paste"
                label="&pasteCmd.label;"
                key="key_paste"
                accesskey="&pasteCmd.accesskey;"
                command="cmd_paste"/>
      <menuitem id="menu_delete"
                label="&deleteCmd.label;"
                key="key_delete"
                accesskey="&deleteCmd.accesskey;"
                command="cmd_delete"/>
      <menuseparator id="edEditMenuSep2" />
      <menuitem id="menu_selectAll"
                label="&selectAllCmd.label;"
                key="key_selectAll"
                accesskey="&selectAllCmd.accesskey;"
                command="cmd_selectAll"/>
      <menuseparator id="sep_find"/>
      <menuitem id="menu_find"           accesskey="&editfind.accesskey;"            key="findkb"         observes="cmd_find" label="&findCmd.label;"/>
      <menuitem id="menu_findnext"       accesskey="&editfindnext.accesskey;"        key="findnextkb"     observes="cmd_findNext"/>
      <menuitem id="menu_findprev"       accesskey="&editfindprev.accesskey;"        key="findprevkb"     observes="cmd_findPrev"/>
#      <menuitem id="menu_replace"       accesskey="&editreplace.accesskey;"        key="findprevkb"     observes="cmd_findPrev"/>
      <menuseparator id="sep_checkspelling"/>
      <menuitem id="menu_checkspelling" accesskey="&editcheckspelling.accesskey;"
                key="checkspellingkb"   observes="cmd_spelling" disabled="true"
                label="&checkSpellingCmd.label;"/>
    </menupopup>
  </menu>

  <!-- Insert menu -->
  <menu id="insertMenu" label="&insertMenu.label;" accesskey="&insertmenu.accesskey;">
    <menupopup id="insertMenuPopup">
      <!-- menuitem id="insertImage" accesskey="&insertimage.accesskey;"      observes="cmd_image"       label="&insertImageCmd.label;"/>
      <menuitem id="insertTable" accesskey="&inserttable.accesskey;"      observes="cmd_InsertTable" label="&insertTableCmd.label;"/>
      <menu     accesskey="&insertformmenu.accesskey;"   id="insertFormMenu"        label="&insertFormMenu.label;">
        <menupopup>
          <menuitem accesskey="&insertform.accesskey;"        command="cmd_form"        label="&insertFormCmd.label;"/>
          <menuseparator/>
          <menuitem accesskey="&insertinputtag.accesskey;"    command="cmd_inputtag"    label="&insertInputTagCmd.label;"/>
          <menuitem accesskey="&insertinputimage.accesskey;"  command="cmd_inputimage"  label="&insertInputImageCmd.label;"/>
          <menuitem accesskey="&inserttextarea.accesskey;"    command="cmd_textarea"    label="&insertTextAreaCmd.label;"/>
          <menuitem accesskey="&insertselect.accesskey;"      command="cmd_select"      label="&insertSelectCmd.label;"/>
          <menuitem accesskey="&insertbutton.accesskey;"      command="cmd_button"      label="&insertButtonCmd.label;"/>
          <menuitem accesskey="&insertlabel.accesskey;"       command="cmd_label"       label="&insertLabelCmd.label;"/>
          <menuitem accesskey="&insertfieldset.accesskey;"    command="cmd_fieldset"    label="&insertFieldSetCmd.label;"/>
          <menuseparator/>
          <menuitem accesskey="&insertisindex.accesskey;"     command="cmd_isindex"     label="&insertIsIndexCmd.label;"/>
        </menupopup>
      </menu>
      <menuitem id="insertLink" accesskey="&insertlink.accesskey;"       observes="cmd_link"        label="&insertLinkCmd.label;"   key="insertlinkkb"/>
      <menuitem id="insertAnchor" accesskey="&insertanchor.accesskey;"     observes="cmd_anchor"      label="&insertAnchorCmd.label;"/ -->
      <menuitem id="insertHline" accesskey="&inserthline.accesskey;"      observes="cmd_hline"       label="&insertHLineCmd.label;"/>
      <!-- menuitem id="insertHTMLSource" accesskey="&insertHTMLCmd.accesskey;"   observes="cmd_insertHTMLWithDialog"  key="inserthtmlkb"/>
      <menuitem accesskey="&insertchars.accesskey;"      observes="cmd_insertChars" id="insertChars"/>
      <menu id="insertTOC" label="&tocMenu.label;" accesskey="&tocMenu.accesskey;">
        <menupopup onpopupshowing="InitTOCMenu()">
          <menuitem id="insertTOCMenuitem"
                    label="&insertTOC.label;"
                    accesskey="&insertTOC.accesskey;"
                    oncommand="UpdateTOC()"/>
          <menuitem id="updateTOCMenuitem"
                    label="&updateTOC.label;"
                    accesskey="&updateTOC.accesskey;"
                    oncommand="UpdateTOC()"/>
          <menuitem id="removeTOCMenuitem"
                    label="&removeTOC.label;"
                    accesskey="&removeTOC.accesskey;"
                    oncommand="RemoveTOC()"/>
        </menupopup>
      </menu>
      <menu id="insertSmartWidgetsMenu" label="&insertSmartWidgetsMenu.label;">
        <menupopup id="insertSmartWidgetsMenuPopup">
          <menuitem label="&insertCalendarSW.label;"
                    oncommand="addCalendarSmartWidget();"/>
        </menupopup>
      </menu-->
      <menuseparator id="insertMenuSeparator"/>
<!-- Activate this after Enter key inserts P tag and not BR
      <menuitem accesskey="&insertbreak.accesskey;"      observes="cmd_insertBreak"      label="&insertBreakCmd.label;"/>
-->
      <menuitem id="insertBreakAll" accesskey="&insertbreakall.accesskey;"   observes="cmd_insertBreakAll"   label="&insertBreakAllCmd.label;"/>
    </menupopup>
  </menu>
    
  <menu id="MSITypesetMenu"/>
  <menu id="MSIComputeMenu"/> 
  <menu id="toolsMenu" label="Tools" >
    <menupopup id="toolPopup">
      <menuitem  label="JavaScript debugger" id="venkmanName" oncommand="start_venkman();"/>
      <menuitem id="menu_inspector" label="amp__inspectorTaskCmd.label;" 
                accesskey="amp__inspectorTaskCmd.accesskey;" command="Tasks:Inspector"/>
    </menupopup>
  </menu>
  
  <menu id="helpMenu" label="&helpMenu.label;" accesskey="&helpMenu.accesskey;">
    <menupopup id="helpPopup">
      <menuitem accesskey="&aboutCmd.accesskey;" label="&aboutCmd.label;" id="aboutName" oncommand="goAboutDialog();"/>
    </menupopup>
  </menu>
  
  <menu id="viewMenu" label="View" accesskey="" >
    <menupopup id="viewPopup">
      <menuitem id="viewNormalMode"   type="radio" group="mode" accesskey="&NormalMode.accesskey;"     observes="cmd_NormalMode"
        label="&NormalMode.label;"/>
      <menuitem id="viewAllTagsMode"  type="radio" group="mode" accesskey="&TagsMode.accesskey;"    observes="cmd_AllTagsMode"
        label="&TagsMode.label;"/>
      <menuitem id="viewSourceMode"   type="radio" group="mode" accesskey="&SourceMode.accesskey;" observes="cmd_HTMLSourceMode"
         label="&SourceMode.label;"/>
      <menuitem id="viewPreviewMode"  type="radio" group="mode" accesskey="&PreviewMode.accesskey;"    observes="cmd_PreviewMode"
        label="&PreviewMode.label;"/>
    </menupopup>
  </menu>
  
  <!-- commands updated when the editor gets created -->
  <commandset id="commonEditorMenuItems"
          commandupdater="true"
          events="create"
          oncommandupdate="goUpdateComposerMenuItems(this)"
  >
    <command id="cmd_open"                                          oncommand="goDoCommand('cmd_open')"/>
    <command id="cmd_openRemote"   label="&openremoteCmd.label;"    oncommand="goDoCommand('cmd_openRemote')"/>
    <command id="cmd_close"        label="&closeCmd.label;"         oncommand="goDoCommand('cmd_close')"/>
    <command id="cmd_printSetup"   oncommand="goDoCommand('cmd_printSetup')"/>
<!--
    <command id="cmd_printPreview" label="_amp_printPreviewCmd.label;"  oncommand="goDoCommand('cmd_printPreview')"/>
-->
    <command id="cmd_openTeX" oncommand="openTeX();" />
    <command id="cmd_exportTeX" oncommand="exportTeX();" />
    <command id="cmd_printDirect"  oncommand="goDoCommand('cmd_printDirect')"/>
    <command id="cmd_printPdf"    oncommand="goDoCommand('cmd_printPdf')"/>
    <command id="cmd_printDvi"    oncommand="goDoCommand('cmd_printDvi')"/>
    <command id="cmd_previewDirect"  oncommand="goDoCommand('cmd_previewDirect')"/>
    <command id="cmd_previewPdf"  oncommand="goDoCommand('cmd_previewPdf')"/>
    <command id="cmd_previewDvi"  oncommand="goDoCommand('cmd_previewDvi')"/>
    <command id="cmd_compilePdf"  oncommand="goDoCommand('cmd_compilePdf')"/>
    <command id="cmd_compileDvi"  oncommand="goDoCommand('cmd_compileDvi')"/>
    <command id="cmd_quit"        oncommand="goDoCommand('cmd_quit')"/>
  </commandset>

  <commandset id="composerMenuItems"
          commandupdater="true"
          events="create, mode_switch"
          oncommandupdate="goUpdateComposerMenuItems(this)"
  >
    <!-- format menu -->
    <command id="cmd_listProperties"  oncommand="goDoCommand('cmd_listProperties')"/>
    <command id="cmd_pageProperties"  oncommand="goDoCommand('cmd_pageProperties')"/>
    <command id="cmd_colorProperties" oncommand="goDoCommand('cmd_colorProperties')"/>

    <command id="cmd_link"             oncommand="goDoCommand('cmd_link')"/>
    <command id="cmd_anchor"           oncommand="goDoCommand('cmd_anchor')"/>
    <command id="cmd_image"            oncommand="goDoCommand('cmd_image')"/>
    <command id="cmd_hline"            oncommand="goDoCommand('cmd_hline')"/>
    <command id="cmd_table"            oncommand="goDoCommand('cmd_table')"/>
    <command id="cmd_form"             oncommand="goDoCommand('cmd_form')"/>
    <command id="cmd_inputtag"         oncommand="goDoCommand('cmd_inputtag')"/>
    <command id="cmd_inputimage"       oncommand="goDoCommand('cmd_inputimage')"/>
    <command id="cmd_textarea"         oncommand="goDoCommand('cmd_textarea')"/>
    <command id="cmd_select"           oncommand="goDoCommand('cmd_select')"/>
    <command id="cmd_button"           oncommand="goDoCommand('cmd_button')"/>
    <command id="cmd_label"            oncommand="goDoCommand('cmd_label')"/>
    <command id="cmd_fieldset"         oncommand="goDoCommand('cmd_fieldset')"/>
    <command id="cmd_isindex"          oncommand="goDoCommand('cmd_isindex')"/>
    <command id="cmd_objectProperties" oncommand="goDoCommand('cmd_objectProperties')"/>
    <command id="cmd_insertChars"      oncommand="goDoCommand('cmd_insertChars')"    label="&insertCharsCmd.label;"/>
    <command id="cmd_insertHTMLWithDialog" oncommand="goDoCommand('cmd_insertHTMLWithDialog')"  label="&insertHTMLCmd.label;"/>

    <command id="cmd_insertBreak"      oncommand="goDoCommand('cmd_insertBreak')"/>
    <command id="cmd_insertBreakAll"   oncommand="goDoCommand('cmd_insertBreakAll')"/>
    <command id="cmd_NormalMode"       oncommand="goDoCommand('cmd_NormalMode')"/>
    <command id="cmd_AllTagsMode"      oncommand="goDoCommand('cmd_AllTagsMode')"/>
    <command id="cmd_HTMLSourceMode"   oncommand="goDoCommand('cmd_HTMLSourceMode')"/>
    <command id="cmd_PreviewMode"      oncommand="goDoCommand('cmd_PreviewMode')"/>

    <!-- only used in context popup menu -->
    <command id="cmd_editLink"         oncommand="goDoCommand('cmd_editLink')"/>

    <!-- dummy command used just to disable things in non-HTML modes -->
    <command id="cmd_renderedHTMLEnabler"/>
  </commandset>
  
  <commandset id="composerSaveMenuItems"
          commandupdater="true"
          events="create, save"
          oncommandupdate="goUpdateComposerMenuItems(this)"
  >
    <command id="cmd_save"           label="&saveCmd.label;"           oncommand="goDoCommand('cmd_save')"/>
    <command id="cmd_saveAs"         label="&saveAsCmd.label;"         oncommand="goDoCommand('cmd_saveAs')"/>
    <command id="cmd_exportToText"   label="&exportToTextCmd.label;"   oncommand="goDoCommand('cmd_exportToText')"/>
    <command id="cmd_saveAndChangeEncoding"  label="&saveAndChangeEncodingCmd.label;"  oncommand="goDoCommand('cmd_saveAndChangeEncoding')"/>
    <command id="cmd_publish"        label="&publishCmd.label;"        oncommand="goDoCommand('cmd_publish')"/>
    <command id="cmd_publishAs"      label="&publishAsCmd.label;"      oncommand="goDoCommand('cmd_publishAs')"/>
    <command id="cmd_revert"         label="&fileRevert.label;"        oncommand="goDoCommand('cmd_revert')"/>
    <command id="cmd_preview"                                          oncommand="goDoCommand('cmd_preview')"/>
    <command id="cmd_editSendPage"   label="&sendPageCmd.label;"
                                     accesskey="&sendPage.accesskey;"  oncommand="goDoCommand('cmd_editSendPage')"/>
  </commandset>


  <!-- edit menu commands. These get updated by code in globalOverlay.js -->
  <commandset id="composerEditMenuItems"
          commandupdater="true"
          events="create, mode_switch"
          oncommandupdate="goUpdateComposerMenuItems(this)"
  >
    <command id="cmd_undo" 
             oncommand="goDoCommand('cmd_undo')"
             disabled="true"/>
    <command id="cmd_redo" 
             oncommand="goDoCommand('cmd_redo')"
             disabled="true"/>
    <command id="cmd_cut" 
             oncommand="goDoCommand('cmd_cut')"
             />
    <command id="cmd_copy" 
             oncommand="goDoCommand('cmd_copy')"
             disabled="true"/>
    <command id="cmd_paste" 
             oncommand="goDoCommand('cmd_paste')"
             disabled="true"/>
    <command id="cmd_pasteNoFormatting" oncommand="goDoCommand('cmd_pasteNoFormatting')"
               label="amp_pasteNoFormatting.label;" accesskey="_amp_pasteNoFormatting.accesskey;"/>
    <command id="cmd_delete"
             oncommand="goDoCommand('cmd_delete')"
             valueDefault="&deleteCmd.label;"
             valueDefaultAccessKey="&deleteCmd.accesskey;"
             disabled="true"/>
    <command id="cmd_selectAll"
             oncommand="goDoCommand('cmd_selectAll')"
             disabled="true"/>
    <command id="cmd_preferences"   oncommand="goDoCommand('cmd_preferences')"/>
    <command id="cmd_find"          oncommand="goDoCommand('cmd_find')"/>
    <command id="cmd_findNext"      oncommand="goDoCommand('cmd_findNext')"     label="&findAgainCmd.label;"/>
    <command id="cmd_findPrev"      oncommand="goDoCommand('cmd_findPrev')"     label="&findPrevCmd.label;"/>
    <command id="cmd_spelling"      oncommand="goDoCommand('cmd_spelling')"/>
    <command id="cmd_validate"      label="&validateCmd.label;" accesskey="&validate.accesskey;" oncommand="goDoCommand('cmd_validate')"/>
    <command id="cmd_checkLinks"    oncommand="goDoCommand('cmd_checkLinks')"/>
    <command id="cmd_pasteQuote"    oncommand="goDoCommand('cmd_pasteQuote')" label="&pasteAsQuotationCmd.label;"/>
    <command id="cmd_publishSettings" label="_amp_publishSettings.label;" accesskey="_amp_publishSettings.accesskey;" oncommand="goDoCommand('cmd_publishSettings')"/>
  </commandset>

  <!-- style related commands that update on creation, and on selection change -->
  <commandset id="composerStyleMenuItems"
          commandupdater="true"
          events="create, style, mode_switch"
          oncommandupdate="goUpdateComposerMenuItems(this)"
  >
    <command id="cmd_bold"          state="false"     oncommand="doStyleUICommand('cmd_bold')"/>
    <command id="cmd_italic"        state="false"     oncommand="doStyleUICommand('cmd_italic')"/>
    <command id="cmd_underline"     state="false"     oncommand="doStyleUICommand('cmd_underline')"/>
    <command id="cmd_tt"            state="false"     oncommand="doStyleUICommand('cmd_tt')"/>
    <command id="cmd_smiley"/>

    <command id="cmd_strikethrough" state="false"     oncommand="doStyleUICommand('cmd_strikethrough');"/>
    <command id="cmd_superscript"   state="false"     oncommand="doStyleUICommand('cmd_superscript');"/>
    <command id="cmd_subscript"     state="false"     oncommand="doStyleUICommand('cmd_subscript');"/>
    <command id="cmd_nobreak"       state="false"     oncommand="doStyleUICommand('cmd_nobreak');"/>

    <command id="cmd_em"            state="false"     oncommand="doStyleUICommand('cmd_em')"/>
    <command id="cmd_strong"        state="false"     oncommand="doStyleUICommand('cmd_strong')"/>
    <command id="cmd_cite"          state="false"     oncommand="doStyleUICommand('cmd_cite')"/>
    <command id="cmd_abbr"          state="false"     oncommand="doStyleUICommand('cmd_abbr')"/>
    <command id="cmd_acronym"       state="false"     oncommand="doStyleUICommand('cmd_acronym')"/>
    <command id="cmd_code"          state="false"     oncommand="doStyleUICommand('cmd_code')"/>
    <command id="cmd_samp"          state="false"     oncommand="doStyleUICommand('cmd_samp')"/>
    <command id="cmd_var"           state="false"     oncommand="doStyleUICommand('cmd_var')"/>

    <command id="cmd_ul"            state="false"     oncommand="doStyleUICommand('cmd_ul')"/>
    <command id="cmd_ol"            state="false"     oncommand="doStyleUICommand('cmd_ol')"/>

    <command id="cmd_indent"                          oncommand="goDoCommand('cmd_indent')"/>
    <command id="cmd_outdent"                         oncommand="goDoCommand('cmd_outdent')"/>

    <!-- the state attribute gets filled with the paragraph format before the command is exectued -->
    <command id="cmd_paragraphState"  state=""         oncommand="doStatefulCommand('cmd_paragraphState', event.target.value)"/>
    <command id="cmd_fontFace"        state=""         oncommand="doStatefulCommand('cmd_fontFace', event.target.value)"/>

    <!-- No "oncommand", use EditorSelectColor() to bring up color dialog -->
    <command id="cmd_fontColor"       state=""/>
    <command id="cmd_backgroundColor" state=""/>
    <command id="cmd_highlight"       state="transparent"  oncommand="EditorSelectColor('Highlight', event);"/>

    <command id="cmd_fontSize"                         oncommand="goDoCommand('cmd_fontSize')"/>
    <command id="cmd_align"           state=""/>

    <command id="cmd_absPos"          state=""        oncommand="goDoCommand('cmd_absPos')"/>
    <command id="cmd_increaseZIndex"  state=""        oncommand="goDoCommand('cmd_increaseZIndex')"/>
    <command id="cmd_decreaseZIndex"  state=""        oncommand="goDoCommand('cmd_decreaseZIndex')"/>

    <command id="cmd_advancedProperties"              oncommand="goDoCommand('cmd_advancedProperties')"/>

    <command id="cmd_increaseFont"                    oncommand="goDoCommand('cmd_increaseFont')"/>
    <command id="cmd_decreaseFont"                    oncommand="goDoCommand('cmd_decreaseFont')"/>
    
    <command id="cmd_removeStyles"                    oncommand="goDoCommand('cmd_removeStyles')"/>
    <command id="cmd_removeLinks"                     oncommand="goDoCommand('cmd_removeLinks')"/>
    <command id="cmd_removeNamedAnchors"              oncommand="goDoCommand('cmd_removeNamedAnchors')"/>
    <command id="cmd_updateStructToolbar"             oncommand="goDoCommand('cmd_updateStructToolbar')"/>
  </commandset>

  <!-- commands updated only when the menu gets created -->
  <commandset id="composerListMenuItems"
          commandupdater="true"
          events="create, mode_switch"
          oncommandupdate="goUpdateComposerMenuItems(this)">
    <!-- List menu  -->
    <command id="cmd_dt"                  oncommand="doStyleUICommand('cmd_dt')"/>
    <command id="cmd_dd"                  oncommand="doStyleUICommand('cmd_dd')"/>
    <command id="cmd_removeList"          oncommand="goDoCommand('cmd_removeList')"/>
    <!-- cmd_ul and cmd_ol are shared with toolbar and are in composerStyleMenuItems commandset -->
  </commandset>

  <commandset id="composerTableMenuItems"
          commandupdater="true"
          events="create, mode_switch"
          oncommandupdate="goUpdateTableMenuItems(this)">
    <!-- Table menu -->
    <command id="cmd_SelectTable"         oncommand="goDoCommand('cmd_SelectTable')"/>
    <command id="cmd_SelectRow"           oncommand="goDoCommand('cmd_SelectRow')"/>
    <command id="cmd_SelectColumn"        oncommand="goDoCommand('cmd_SelectColumn')"/>
    <command id="cmd_SelectCell"          oncommand="goDoCommand('cmd_SelectCell')"/>
    <command id="cmd_SelectAllCells"      oncommand="goDoCommand('cmd_SelectAllCells')"/>
    <command id="cmd_InsertTable"         oncommand="goDoCommand('cmd_InsertTable')"/>
    <command id="cmd_InsertRowAbove"      oncommand="goDoCommand('cmd_InsertRowAbove')"/>
    <command id="cmd_InsertRowBelow"      oncommand="goDoCommand('cmd_InsertRowBelow')"/>
    <command id="cmd_InsertColumnBefore"  oncommand="goDoCommand('cmd_InsertColumnBefore')"/>
    <command id="cmd_InsertColumnAfter"   oncommand="goDoCommand('cmd_InsertColumnAfter')"/>
    <command id="cmd_InsertCellBefore"    oncommand="goDoCommand('cmd_InsertCellBefore')"/>
    <command id="cmd_InsertCellAfter"     oncommand="goDoCommand('cmd_InsertCellAfter')"/>
    <command id="cmd_DeleteTable"         oncommand="goDoCommand('cmd_DeleteTable')"/>
    <command id="cmd_DeleteRow"           oncommand="goDoCommand('cmd_DeleteRow')"/>
    <command id="cmd_DeleteColumn"        oncommand="goDoCommand('cmd_DeleteColumn')"/>
    <command id="cmd_DeleteCell"          oncommand="goDoCommand('cmd_DeleteCell')"/>
    <command id="cmd_DeleteCellContents"  oncommand="goDoCommand('cmd_DeleteCellContents')"/>
    <command id="cmd_NormalizeTable"      oncommand="goDoCommand('cmd_NormalizeTable')"/>
    <command id="cmd_JoinTableCells"      oncommand="goDoCommand('cmd_JoinTableCells')"/>
    <command id="cmd_SplitTableCell"      oncommand="goDoCommand('cmd_SplitTableCell')"/>
    <command id="cmd_ConvertToTable"      oncommand="goDoCommand('cmd_ConvertToTable')"/>
    <command id="cmd_TableOrCellColor"    oncommand="goDoCommand('cmd_TableOrCellColor')"/>
    <command id="cmd_editTable"           oncommand="goDoCommand('cmd_editTable')"/>
  </commandset>
  <commandset id="tasksCommands">
    <command id="Tasks:Inspector" oncommand="inspectDOMDocument();"/>
    <command id="Tasks:InspectPage" oncommand="inspectDOMDocument(_content.document);"/>
  </commandset>

  <keyset id="tasksKeys">
    <key id="key_inspectPage" key="i" modifiers="accel,shift" command="Tasks:InspectPage"/>
  </keyset>
  
    <!-- DEBUG only -->
  <menu id="debugMenu" label="&debugMenu.label;">
  <menupopup id="menu_debugPopup">
    <menuitem label="&newEditorTestPage.label;" oncommand="window.openDialog('chrome://editor/content','_blank','chrome,all,dialog=no','chrome://editor/content/EditorInitPage.html')"/>
    <menuitem label="&textEditorCmd.label;"     oncommand="EditorNewPlaintext();" />
    <menuitem label="&outputTextCmd.label;"
           oncommand="EditorGetText()"/>
    <menuitem label="&outputHTMLCmd.label;"
           oncommand="EditorGetHTML()"/>
    <menuseparator />
    <menuitem label="&pasteAsQuotationCmd.label;"
           accesskey="&editpastequotation.accesskey;"
           oncommand="goDoCommand('cmd_pasteQuote')"/>
    <menuitem label="&editRewrapCmd.label;"
           oncommand="try { GetCurrentEditor().rewrap(true); } catch (e) {}"/>
    <menuitem label="&editStripQuotesCmd.label;"
           oncommand="try { GetCurrentEditor().stripCites(); } catch (e) {}"/>
    <menuitem label="&insertTextCmd.label;"
           oncommand="EditorInsertText('All good things come to those who wait. ')"/>
    <menuitem id="menu_checkLinks" observes="cmd_checkLinks"
     label="&checkLinksCmd.label;"/>
    <menuseparator />
    <menuitem label="&testSelectionCmd.label;"
           oncommand="EditorTestSelection()"/>
    <menuitem label="&testTableLayoutCmd.label;"
           oncommand="EditorTestTableLayout()"/>
    <menuitem label="&showEmbeddedCmd.label;"
           oncommand="EditorShowEmbeddedObjects()"/>
    <menuitem label="&dumpContentCmd.label;"
           oncommand="EditorDumpContent()"/>
    <menuitem label="&testDocumentCmd.label;"
           oncommand="EditorTestDocument()"/>
    <menuitem label="&runUnitTestsCmd.label;"
           oncommand="EditorUnitTests()"/>
    <menuseparator />
    <menuitem label="&dumpUndoStack.label;"
           oncommand="DumpUndoStack()"/>
    <menuitem label="&dumpRedoStack.label;"
           oncommand="DumpRedoStack()"/>
    <menuitem label="&executeJSTransactionViaTxmgr.label;"
           oncommand="ExecuteJSTransactionViaTxmgr()"/>
    <menuitem label="&executeJSTransactionViaEditor.label;"
           oncommand="ExecuteJSTransactionViaEditor()"/>
    <menuseparator />
    <menuitem label="&startLogCmd.label;"
           oncommand="EditorStartLog()"/>
    <menuitem label="&stopLogCmd.label;"
           oncommand="EditorStopLog()"/>
    <menuitem label="&runLogCmd.label;"
           oncommand="EditorRunLog()"/>
    <menuseparator />
    <menuitem label="&setFocusCmd.label;"
            accesskey="&toolsetfocus.accesskey;"
            oncommand="window.focus()"/>
    <menuseparator />
    <menuitem label="Prepare Plot"              oncommand="TestPreparePlotAll();"/>
    <menuitem label="Prepare Plot and Graph"	oncommand="TestPreparePlotGraph();"/>
    <menuitem label="Plot Tests"				oncommand="TestGraphScript();"/>
    <menuseparator />
    <menuitem label="Configuration"
            oncommand='window.openDialog("chrome://global/content/config.xul","Configure Prince", "chrome ");'/>
    <menuitem label="Plugins"
            oncommand='window.openDialog("chrome://communicator/content/plugins.html","Installed plugins", "chrome ");'/>
    <menuitem label="Stop animation"
            oncommand='stopAnimation();' />
    <menuitem label="Start animation"
            oncommand='startAnimation();' />
    <menuitem label="Test ChamWindow" oncommand='window.openDialog("chrome://editor/content/chamtest.xul","Cham Test", 
      "chrome,close,titlebar,modal=false");' />

  </menupopup>
  </menu>
  <!-- end DEBUG only -->

  
</overlay>
