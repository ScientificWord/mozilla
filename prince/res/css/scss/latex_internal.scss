

invis {
  display: none;
}

texbdata {
  display: none;
}

space {
/*  display: -moz-inline-box;  */
  display: inline-block;
  vertical-align: baseline;
}
  
*[showinvis="true"] space {
  border-bottom-width: thin;
  border-bottom-style: solid;
  border-bottom-color: green;
}

*[showinvis="true"] invis {
  display: inline;
}

*[showinvis="true"] space[type="noIndent"] {
  display: none;
}

*[showinvis="true"] space[type="noIndent"]:after {
  content: "\002190";
  color: green;
}

linebox {
  display: -moz-inline-box;
  width: 100%;
}

/*
space.stretchySpace[fillWith="line"] {
  border-bottom: thin solid;  Note that omitting the border-color causes the text color to be used (per CSS 2.1 specification)
}

space.stretchySpace[fillWith="dots"] {
  border-bottom: thin dotted;
}

*[showinvis="true"] space.stretchySpace {
  border-bottom-color: green;
}
*/

/*  Display values: "inline-block", "inline-table" produces parsing error. "-moz-inline-box", "inline" ignore width and padding.
      "-moz-inline-block" breaks line, also ignores width and padding. 
    Solution used is derived from Bugzilla comment at "https://bugzilla.mozilla.org/show_bug.cgi?id=9458#c37", and is
    partially embedded in the XBL in latex.xml#vspace. */
vertspace {
  display: -moz-inline-box;
  vertical-align: baseline;
  overflow: hidden;
  max-width: 1px;
  white-space: pre;
}
  
span.vertspace, span.breakvspace {
  display: block;
}

*[showinvis="true"] span.vertspace {
  border-left: thin solid green;
}

rulebox {
  display: -moz-inline-box;
  /*vertical-align: baseline;*/
  position: relative;
  overflow: hidden;
  white-space: pre;
}

msirule, span.msirule {
  display: inline-block;
  overflow: hidden;
}

msibr {
  display: inline;
  white-space: pre;
}

breakobj {
  display: inline;
  white-space: pre;
}

*[showinvis="true"] breakobj:before, *[showinvis="true"] msibr:before {
  color: green;
  content: attr(invisDisplay);
}

span {
  display: inline;
}

button.expander {
  background-repeat: no-repeat;
  border: 1px solid black;
  top: 4pt; 
  left: 0px; 
  height: 18px;
  width: 18px;
  margin-left: 5px;
  margin-right: 5px;
  margin-bottom: 4px;
  vertical-align: text-bottom;
  display: none;
  -moz-user-select:none;
}

*[showexpanders="true"] button.expander {
  display: inline;
}

button.inline {
  font-size: 90%;
  margin-top: -5px;
  margin-bottom: -8px;
}

button.inline [type="transparentbutton"] {
  background-color: transparent;
}

button.bibitemlabel {
  display: inline;
  background-color: transparent;
  font-size: 90%;
  margin-top: -5px;
  margin-bottom: -8px;
}

button[class="indexbutton"] {
  -moz-user-modify: read-only;
  -moz-user-select: all;	  
}

/*button[class="indexbutton"] > * {
  display: none;
}
*/

/* Following was an attempt to get the button to cycle through the different index levels (primary, secondary, tertiary).
   It's being commented out as it didn't work, but I may want to revive it.  rwa 03-09-2012

button[class="indexbutton"][state="1"]>span[class="indexSec"],
button[class="indexbutton"][state="1"]>secspec,
button[class="indexbutton"][state="1"]>span[class="indexTer"],
button[class="indexbutton"][state="1"]>terspec,
button[class="indexbutton"][state="2"]>span[class="indexPri"],
button[class="indexbutton"][state="2"]>prispec,
button[class="indexbutton"][state="2"]>span[class="indexTer"],
button[class="indexbutton"][state="2"]>terspec,
button[class="indexbutton"][state="3"]>span[class="indexPri"],
button[class="indexbutton"][state="3"]>prispec,
button[class="indexbutton"][state="3"]>span[class="indexSec"],
button[class="indexbutton"][state="3"]>secspec {
  display: none;
}

button[class="indexbutton"][specAppearance~="p"]>span[class="indexPri"],
button[class="indexbutton"][specAppearance~="s"]>span[class="indexSec"],
button[class="indexbutton"][specAppearance~="t"]>span[class="indexTer"] {
  display: none;
}
*/