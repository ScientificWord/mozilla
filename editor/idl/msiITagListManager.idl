
#include "nsISupports.idl"

interface nsIAtom;
interface nsEditor;
interface nsIDOMNode;
interface nsIDOMDocument;
interface nsIFile;
interface nsStringArray;
interface nsIAtom;

/*This interface manages a store of information about the editing behavior of tags.
Since the tags are possibly in name spaces, each tag is identified by an atom (for the name space) and a string (for the tag name).
The store is initialized by reading XML files that contain the relevant information for the tags. The definition of the structure
of these files is likely to change, so it is documented by the source code only.

Since this information is document-dependent, there is one store per editor. The store contains a pointer to its editor.

The store contains a string array for each class of tags (text, structure, paragraph, etc.) and allows for getting and setting
these string arrays. We may make this read-only, since the tag data should be set from the tag info files only.
*/

[scriptable, uuid(9BA9E685-EF5A-49b3-96DC-8D8EC355A690)]
interface msiITagListManager : nsISupports
{
	attribute nsEditor editor;
	//attribute AString strTagInfoPath;

	AString currentValue( in AString strTagClass, out nsIAtom atomNS );
	void enable();
    void reset();  //initializes the store to an empty store
    boolean AddTagInfo ( in AString strTagInfoPath );
	void buildStringArray( in  AString strTagClass );

	boolean getTagInClass( in AString strTagClass, in AString strTag, in nsIAtom atomNS);
	AString getClassOfTag( in AString strTag, in nsIAtom atomNS);
	AString getRealClassOfTag( in AString strTag, in nsIAtom atomNS);
	boolean tagCanContainTag( in AString strTagOuter, in nsIAtom atomNSOuter, in AString strTagInner, in nsIAtom atomNSInner);
	boolean nodeCanContainTag( in nsIDOMNode node, in AString strTagInner, in nsIAtom atomNSInner);
	boolean nodeCanContainNode( in nsIDOMNode nodeOuter, in nsIDOMNode nodeInner);
	boolean levelCanContainLevel( in AString strTagOuter, in nsIAtom atomNSOuter, in AString strTagInner, in nsIAtom atomNSInner);
    boolean getDiscardEmptyBlockNode( in nsIDOMNode node);
	void fixTagsAfterSplit( in nsIDOMNode firstNode, inout nsIDOMNode secondNode);
    AString getStringPropertyForTag( in AString strTag, in nsIAtom atomNS, in AString propertyName );
    AString getTagOfNode( in nsIDOMNode node, out nsIAtom atomNS);
    void buildParentTagList();
  // return a comma-separated list of all the tags containing the selection.
    AString getParentTagList(in AString strSep, in boolean includeTypeInState, in boolean includedNS);
	nsIAtom nameSpaceAtomOfTagKey( in AString key);
	AString getDefaultParagraphTag( out nsIAtom atomNamespace );
	AString getClearTextTag( out nsIAtom atomNamespace );
	AString getClearStructTag( out nsIAtom atomNamespace );
	AString getClearEnvTag( out nsIAtom atomNamespace );
	AString getClearListTag( out nsIAtom atomNamepace );
    nsIDOMNode getNewInstanceOfNode( in AString strTag, in nsIAtom atomNS, in nsIDOMDocument doc);
	boolean selectionContainedInTag( in AString strTag, in nsIAtom atomNS);
  // return a comma-separated list of all the tags in a class -- used for section tags mostly. The includeNS parameter is not used yet.
    AString getTagsInClass( in AString strTagClass, in AString strSep, in boolean includeNS );
    void    setTagVisibility( in AString strTag, in nsIAtom atomNS, in boolean hidden);
    void    setTagName( in AString strCurrent, in nsIAtom atomNS, in AString strNew);
	void	rebuildHash();
	PRInt32 getMinDepth();
};
