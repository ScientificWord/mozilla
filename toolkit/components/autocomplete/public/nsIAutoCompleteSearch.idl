/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Joe Hewitt <hewitt@netscape.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIAutoCompleteResult;
interface nsIAutoCompleteObserver;

[scriptable, uuid(DE8DB85F-C1DE-4d87-94BA-7844890F91FE)]
interface nsIAutoCompleteSearch : nsISupports
{
  /*
   * Search for a given string and notify a listener (either synchronously
   * or asynchronously) of the result
   *
   * @param searchString - The string to search for
   * @param searchParam - An extra parameter
   * @param previousResult - A previous result to use for faster searching
   * @param listener - A listener to notify when the search is complete
   */
  void startSearch(in AString searchString,
                   in AString searchParam,
                   in nsIAutoCompleteResult previousResult,
                   in nsIAutoCompleteObserver listener);

  /*
   * Stop all searches that are in progress
   */
  void stopSearch();
};

[scriptable, uuid(18C36504-9A4C-4ac3-8494-BD05E00AE27F)]
interface nsIAutoCompleteObserver : nsISupports
{ 
  /*
   * Called when a search is complete and the results are ready
   *
   * @param search - The search object that processed this search
   * @param result - The search result object
   */
  void onSearchResult(in nsIAutoCompleteSearch search, in nsIAutoCompleteResult result);
};
