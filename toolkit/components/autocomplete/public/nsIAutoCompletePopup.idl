/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Joe Hewitt <hewitt@netscape.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIDOMElement;
interface nsIAutoCompleteInput;

[scriptable, uuid(1b9d7d8a-6dd0-11dc-8314-0800200c9a66)]
interface nsIAutoCompletePopup : nsISupports
{
  /*
   * The input object that the popup is currently bound to
   */
  readonly attribute nsIAutoCompleteInput input;

  /*
   * An alternative value to be used when text is entered, rather than the
   * value of the selected item
   */
  readonly attribute AString overrideValue;

  /*
   * The index of the result item that is currently selected
   */
  attribute long selectedIndex;

  /* 
   * Indicates if the popup is currently open
   */
  readonly attribute boolean popupOpen;

  /* 
   * Bind the popup to an input object and display it with the given coordinates
   *
   * @param input - The input object that the popup will be bound to
   * @param element - The element that the popup will be aligned with
   */
  void openAutocompletePopup(in nsIAutoCompleteInput input, in nsIDOMElement element);

  /* 
   * Close the popup and detach from the bound input
   */
  void closePopup();

  /*
   * Instruct the result view to repaint itself to reflect the most current
   * underlying data
   */
  void invalidate();
    
  /*
   * Change the selection relative to the current selection and make sure
   * the newly selected row is visible
   *
   * @param reverse - Select a row above the current selection
   * @param page - Select a row that is a full visible page from the current selection
   * @return The currently selected result item index
   */
  void selectBy(in boolean reverse, in boolean page);
};
