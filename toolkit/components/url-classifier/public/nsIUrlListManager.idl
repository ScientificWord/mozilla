/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Url Classifier code
 *
 * The Initial Developer of the Original Code is
 * Google Inc.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Tony Chang <tony@ponderer.org> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * Interface for a class that manages updates of the url classifier database.
 */

// Interface for JS function callbacks
[scriptable, function, uuid(fa4caf12-d057-4e7e-81e9-ce066ceee90b)]
interface nsIUrlListManagerCallback : nsISupports {
  void handleEvent(in ACString value);
};


[scriptable, uuid(9c5598ec-9986-40cf-af40-b5e0d817a3a0)]
interface nsIUrlListManager : nsISupports
{
    /**
     * Set the URL we check for updates.
     */
    void setUpdateUrl(in ACString url);

    /**
     * Set the URL we use to get keys used to decrypt URLs in
     * enchash tables.
     */
    void setKeyUrl(in ACString url);

    /**
     * Set the URL that we will query for complete hashes after a partial
     * hash match.
     */
    void setGethashUrl(in ACString url);

    /**
     * Add a table to the list of tables we are managing.  The name is a
     * string of the format provider_name-semantic_type-table_type.  For
     * example, goog-white-enchash or goog-black-url.
     */
    boolean registerTable(in ACString tableName,
                          in boolean requireMac);

    /**
     * Turn on update checking for a table.  I.e., during the next server
     * check, download updates for this table.
     */
    void enableUpdate(in ACString tableName);

    /**
     * Turn off update checking for a table.
     */
    void disableUpdate(in ACString tableName);

    /**
     * Lookup a key.  Should not raise exceptions.  Calls the callback
     * function with a comma-separated list of tables to which the key
     * belongs.
     */
    void safeLookup(in ACString key,
                    in nsIUrlListManagerCallback cb);

    void checkForUpdates();
};
