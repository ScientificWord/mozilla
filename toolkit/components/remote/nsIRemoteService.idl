/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Christopher Blizzard <blizzard@mozilla.org>.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Benjamin Smedberg <benjamin@smedbergs.us>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIDOMWindow;

/**
 * Start and stop the remote service (xremote/phremote), and register
 * windows with the service for backwards compatibility with old xremote
 * clients.
 *
 * @status FLUID This interface is not frozen and is not intended for embedders
 *               who want a frozen API. If you are an embedder and need this
 *               functionality, contact Benjamin Smedberg about the possibility
 *               of freezing the functionality you need.
 */

[scriptable, uuid(a2240f6a-f1e4-4548-9e1a-6f3bc9b2426c)]
interface nsIRemoteService : nsISupports
{
  /**
   * Start the remote service. This should not be done until app startup
   * appears to have been successful.
   *
   * @param appName     (Required) Sets a window property identifying the
   *                    application.
   * @param profileName (May be null) Sets a window property identifying the
   *                    profile name.
   */
  void startup(in string appName, in string profileName);

  /**
   * Register a XUL window with the xremote service. The window will be
   * configured to accept incoming remote requests. If this method is called
   * before startup(), the registration will happen once startup() is called.
   */
  void registerWindow(in nsIDOMWindow aWindow);

  /**
   * Stop the remote service from accepting additional requests.
   */
  void shutdown();
};
