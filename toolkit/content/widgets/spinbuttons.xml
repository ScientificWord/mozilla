<?xml version="1.0" encoding="UTF-8"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Mozilla.org code.
   -
   - The Initial Developer of the Original Code is
   - Håkan Waara.
   - Portions created by the Initial Developer are Copyright (C) 2001
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Håkan Waara (Original Author)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either of the GNU General Public License Version 2 or later (the "GPL"),
   - or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings id="spinbuttonsBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="spinbuttons"
           extends="chrome://global/content/bindings/general.xml#basecontrol">

    <resources>
      <stylesheet src="chrome://global/skin/spinbuttons.css"/>
    </resources>

    <content>
      <xul:vbox class="spinbuttons-box" flex="1">
        <xul:button anonid="increaseButton" type="repeat" flex="1"
                    class="spinbuttons-button spinbuttons-up"
                    xbl:inherits="disabled,disabled=increasedisabled"/>
        <xul:button anonid="decreaseButton" type="repeat" flex="1"
                    class="spinbuttons-button spinbuttons-down"
                    xbl:inherits="disabled,disabled=decreasedisabled"/>
      </xul:vbox>
    </content>

    <implementation>
      <property name="_increaseButton" readonly="true">
        <getter>
          return document.getAnonymousElementByAttribute(this, "anonid", "increaseButton");
        </getter>
      </property>
      <property name="_decreaseButton" readonly="true">
        <getter>
          return document.getAnonymousElementByAttribute(this, "anonid", "decreaseButton");
        </getter>
      </property>

      <property name="increaseDisabled"
                onget="return this._increaseButton.getAttribute('disabled') == 'true';"
                onset="if (val) this._increaseButton.setAttribute('disabled', 'true');
                       else this._increaseButton.removeAttribute('disabled'); return val;"/>
      <property name="decreaseDisabled"
                onget="return this._decreaseButton.getAttribute('disabled') == 'true';"
                onset="if (val) this._decreaseButton.setAttribute('disabled', 'true');
                       else this._decreaseButton.removeAttribute('disabled'); return val;"/>
    </implementation>

    <handlers>
      <handler event="mousedown">
        <![CDATA[
          // on the Mac, the native theme draws the spinbutton as a single widget
          // so a state attribute is set based on where the mouse button was pressed
          if (event.originalTarget == this._increaseButton)
            this.setAttribute("state", "up");
          else if (event.originalTarget == this._decreaseButton)
            this.setAttribute("state", "down");
        ]]>
      </handler>
      
      <handler event="mouseup">
        this.removeAttribute("state");
      </handler>
      <handler event="mouseout">
        this.removeAttribute("state");
      </handler>

      <handler event="command">
        <![CDATA[
          var eventname;
          if (event.originalTarget == this._increaseButton)
            eventname = "up";
          else if (event.originalTarget == this._decreaseButton)
            eventname = "down";

          var evt = document.createEvent("Events");
          evt.initEvent(eventname, true, true);
          var cancel = this.dispatchEvent(evt);
          
          if (this.hasAttribute("on" + eventname)) {
            var fn = new Function("event", this.getAttribute("on" + eventname));
            if (fn.call(this, event) == false)
              cancel = true;
          }

          return !cancel;
        ]]>
      </handler>

    </handlers>
  </binding>

</bindings>
