/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998-2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Daniel Veditz <dveditz@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * nsPIXPIProxy
 *
 * Used to handle miscellaneous things that XPInstall needs to perform
 * over on the main UI thread.
 */
[scriptable,uuid(6F9D2890-167D-11d5-8DAF-000064657374)]
interface nsPIXPIProxy : nsISupports
{
    void refreshPlugins(in boolean reloadPages);
    void notifyRestartNeeded();

   /**
    * Puts up an alert dialog with an OK button.
    *
    * @param title
    *        Text to appear in the title of the dialog.
    * @param text
    *        Text to appear in the body of the dialog.
    */
    void alert(in wstring title, in wstring text);

    /**
     * Puts up a dialog with up to 3 buttons and an optional, labeled checkbox.
     *
     * @param aDialogTitle
     *        Text to appear in the title of the dialog.
     * @param aText
     *        Text to appear in the body of the dialog.
     * @param aButtonFlags
     *        A combination of Button Flags.
     * @param aButton0Title
     *        Used when button 0 uses TITLE_IS_STRING
     * @param aButton1Title
     *        Used when button 1 uses TITLE_IS_STRING
     * @param aButton2Title
     *        Used when button 2 uses TITLE_IS_STRING
     * @param aCheckMsg
     *        Text to appear with the checkbox.  Null if no checkbox.
     * @param aCheckState    
     *        Contains the initial checked state of the checkbox when this method
     *        is called and the final checked state after this method returns.
     *
     * @return index of the button pressed.
     *
     * Buttons are numbered 0 - 2. The implementation can decide whether the
     * sequence goes from right to left or left to right.  Button 0 is the
     * default button unless one of the Button Default Flags is specified.
     *
     * The value for aButtonFlags is constructed using the constants defined by
     * nsIPromptService.
     *
     * @see nsIPromptService
     */
    PRInt32 confirmEx(in wstring aDialogTitle,
                      in wstring aText,
                      in unsigned long aButtonFlags,
                      in wstring aButton0Title,
                      in wstring aButton1Title,
                      in wstring aButton2Title,
                      in wstring aCheckMsg,
                      inout boolean aCheckState);
};
