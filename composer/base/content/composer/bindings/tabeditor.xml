<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Mozilla Composer.
   -
   - The Initial Developer of the Original Code is
   - Disruptive Innovations SARL.
   - Portions created by the Initial Developer are Copyright (C) 2006
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Daniel Glazman (daniel.glazman@disruptive-innovations.com), Original Author
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
  <!ENTITY % tabEditorDTD SYSTEM "chrome://composer/locale/tabeditor.dtd" >
  %tabEditorDTD;
]>

<bindings id="tabEditorBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="tabeditor">

    <resources>
      <stylesheet src="chrome://composer/skin/tabeditor.css"/>
    </resources>

    <content>
      <xul:tabbox anonid="EditorTabbox" flex="1" onselect="">
        <xul:hbox class="tabbrowser-strip chromeclass-toolbar">

          <xul:tabs flex="1" class="tabbrowser-tabs" anonid="EditorTabs" closebutton="true"
                    setfocus="false" onselect="onTabSelected(event)"/>
        </xul:hbox>
        <xul:tabpanels anonid="EditorTabpanels" selectedIndex="0" flex="1"
                       style="border: red solid thick; background-color: gray ! important"/>
      </xul:tabbox>
    </content>

    <implementation>

      <property name="mTabbox">
        <getter>
        <![CDATA[
          return document.getAnonymousElementByAttribute(this, "anonid", "EditorTabbox");
        ]]>
        </getter>
      </property>

      <property name="mTabs">
        <getter>
        <![CDATA[
          return document.getAnonymousElementByAttribute(this, "anonid", "EditorTabs");
        ]]>
        </getter>
      </property>

      <property name="mTabpanels">
        <getter>
        <![CDATA[
          return document.getAnonymousElementByAttribute(this, "anonid", "EditorTabpanels");
        ]]>
        </getter>
      </property>

      <constructor>
        <![CDATA[
          this.setAttribute("empty", "true");
        ]]>
      </constructor>

      <property name="selectedTab">
        <getter>
        <![CDATA[
          return this.mTabbox.selectedTab;
        ]]>
        </getter>
        <setter>
        <![CDATA[
          this.mTabbox.selectedTab = val;
        ]]>
        </setter>
      </property>

      <property name="selectedIndex">
        <getter>
        <![CDATA[
          return this.mTabbox.selectedIndex;
        ]]>
        </getter>
        <setter>
        <![CDATA[
          this.mTabbox.selectedIndex = val;
        ]]>
        </setter>
      </property>

      <method name="addEditor">
        <parameter name="aURL"/>
        <parameter name="aTitle"/>
        <body>
          <![CDATA[
            function EditorContentListener(aTabeditor, aEditor, aURL, aTab)
            {
              this.init(aTabeditor, aEditor, aURL, aTab);
            }

            EditorContentListener.prototype = {
            
              init : function(aTabeditor, aEditor, aURL, aTab)
                {
                  this.mTabeditor = aTabeditor;
                  this.mEditor = aEditor;
                  this.mURL = aURL;
                  this.mTab = aTab;
                },
            
              QueryInterface : function(aIID)
                {
                  if (aIID.equals(Components.interfaces.nsIWebProgressListener) ||
                      aIID.equals(Components.interfaces.nsISupportsWeakReference) ||
                      aIID.equals(Components.interfaces.nsISupports))
                    return this;
                  throw Components.results.NS_NOINTERFACE;
                },
            
              onStateChange : function(aWebProgress, aRequest, aStateFlags, aStatus)
              {
                const nsIWebProgressListener = Components.interfaces.nsIWebProgressListener;
            
                var progress = document.getElementById("progress");
                var statusbarDeck = document.getElementById("statusbarDeck");
            
                if (aStateFlags & nsIWebProgressListener.STATE_IS_REQUEST)
                {
                  if (aStateFlags & nsIWebProgressListener.STATE_START)
                  {
                    this._requestsStarted++;
                  }
                  else if (aStateFlags & nsIWebProgressListener.STATE_STOP)
                  {
                    this._requestsFinished++;
                  }
                  if (this._requestsStarted > 1)
                  {
                    var value = (100 * this._requestsFinished) / this._requestsStarted;
                    if (progress)
                      progress.setAttribute("mode", "determined");
                    if (progress)
                      progress.setAttribute("value", value + "%");
                  }
                }
            
                if (aStateFlags & nsIWebProgressListener.STATE_IS_NETWORK)
                {
                  if (aStateFlags & nsIWebProgressListener.STATE_START)
                  {
                    if (statusbarDeck)
                      statusbarDeck.selectedPanel = document.getElementById("progressBar");
                    if (progress)
                      progress.setAttribute("style", "");
                    this.mTab.setAttribute("busy", "true");
                  }
                  else if (aStateFlags & nsIWebProgressListener.STATE_STOP)
                  {
                    if (progress)
                      progress.setAttribute("style", "display: none");
                    this.onStatusChange(aWebProgress, aRequest, 0, "Done");
                    this._requestsStarted = this._requestsFinished = 0;

                    this.mTab.removeAttribute("busy");

                    if (statusbarDeck)
                      statusbarDeck.selectedPanel = document.getElementById("editorBar");

                    var editor = this.mEditor.getEditor(this.mEditor.contentWindow);
                    if (editor && !this.mEditorSheets)
                    {
                      this.mEditorSheets = true;
                      editor instanceof Components.interfaces.nsIPlaintextEditor;
                      editor instanceof Components.interfaces.nsIHTMLEditor;
                      editor instanceof Components.interfaces.nsIEditorStyleSheets;

                      editor.addOverrideStyleSheet("chrome://composer/content/EditorContent.css");
                      editor.addOverrideStyleSheet("chrome://composer/content/EditorOverride.css");
                    }
                  }
                  window.updateCommands("navigation");
                }
              },
            
              onProgressChange : function(aWebProgress, aRequest,
                                          aCurSelfProgress, aMaxSelfProgress,
                                          aCurTotalProgress, aMaxTotalProgress)
                {
                },
            
              onLocationChange : function(aWebProgress, aRequest, aLocation)
                {
                },
            
              onStatusChange : function(aWebProgress, aRequest, aStatus, aMessage)
                {
                  var status = document.getElementById("status");
                  if (status) status.setAttribute("label", aMessage);
                },
            
              onSecurityChange : function(aWebProgress, aRequest, aState)
                {
                },
            
                _requestsStarted: 0,
                _requestsFinished: 0,

                mTabeditor: null,
                mEditor: null,
                mEditorSheets: false,
                mURL: null,
                mTab: null
            };

            var newEditorElement = this._newEditor();

            var newTab = this.mTabs.appendItem(aTitle, aURL);
            newTab.setAttribute("label", aTitle);
            newTab.setAttribute("class", "tabbrowser-tab");
            newTab.setAttribute("maxwidth", 200);
            newTab.setAttribute("width", 0);
            newTab.setAttribute("minwidth", 30);
            newTab.setAttribute("flex", 100);

            this.mTabpanels.appendChild(newEditorElement);

            newEditorElement.makeEditable("html", true);

            var docShell = newEditorElement.boxObject.QueryInterface(Components.interfaces.nsIEditorBoxObject).docShell;
            var progress = docShell.QueryInterface(Components.interfaces.nsIInterfaceRequestor).getInterface(Components.interfaces.nsIWebProgress);
            var progressListener = new EditorContentListener(this, newEditorElement, aURL, newTab);
            progress.addProgressListener(progressListener, Components.interfaces.nsIWebProgress.NOTIFY_ALL);

            newEditorElement.addEventListener("pageshow", function(evt) { if (evt.originalTarget == content.document){} }, true);

            // select that new tab
            this.selectedTab = newTab;
            this.selectedIndex = this.mTabpanels.childNodes.length - 1;
            window.EditorLoadUrl(newEditorElement, aURL);

            return {tab: newTab, panel: newEditorElement};
          ]]>
        </body>
      </method>

      <method name="stopWebNavigation">
        <body>
        <![CDATA[
          var editor = this.getCurrentEditorElement();
          var tab    = this.selectedTab;
          if (tab.hasAttribute("busy"))
            editor.webNavigation.stop(Components.interfaces.nsIWebNavigation.STOP_ALL);
        ]]>
        </body>
      </method>

      <method name="_newEditor">
        <body>
        <![CDATA[
            var editors = this.mTabpanels.childNodes;
            for (var i = 0; i < editors.length; i++)
              editors.item(i).removeAttribute("type");

            var newEditorElement = document.createElement("editor");
            newEditorElement.setAttribute("editortype", "html");
            newEditorElement.setAttribute("type", "content-primary");

            return newEditorElement;
          }
        ]]>
        </body>
      </method>

      <method name="getCurrentEditorElement">
        <body>
        <![CDATA[
            return this.mTabpanels.selectedPanel;
          }
        ]]>
        </body>
      </method>

      <method name="IsDocumentAlreadyEdited">
        <parameter name="aURL"/>
        <body>
        <![CDATA[
            var editors = this.mTabpanels.childNodes;
            for (var i = 0; i < editors.length; i++)
            {
              var editorElt = editors.item(i);
              var editor = editorElt.getEditor(editorElt.contentWindow);
              if (editor.document.URL == aURL)
                return editorElt;
            }
            return null;
          }
        ]]>
        </body>
      </method>

      <method name="onTabSelected">
        <parameter name="aEvent"/>
        <body>
        <![CDATA[
          window.updateCommands("navigation");
        ]]>
        </body>
      </method>

    </implementation>

  </binding>

</bindings>
