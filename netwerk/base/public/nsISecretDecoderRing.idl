/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   thayes@netscape.com
 *   bryner@brianryner.com
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * Buffer type - for storing 8-bit octet values.
 */
[ptr] native buffer(unsigned char);

[scriptable, uuid(0EC80360-075C-11d4-9FD4-00C04F1B83D8)]
interface nsISecretDecoderRing: nsISupports {

  /**
   * Encrypt a buffer - callable only from C++.
   *
   * @return The length of the data in the output buffer.
   */
  [noscript] long encrypt(in buffer data, in long dataLen, out buffer result);

  /**
   * Decrypt a buffer - callable only from C++.
   *
   * @return The length of the data in the output buffer.
   */
  [noscript] long decrypt(in buffer data, in long dataLen, out buffer result);

  /**
   * Encrypt nul-terminated string to BASE64 output.
   */
  string encryptString(in string text);

  /**
   * Decrypt BASE64 input to nul-terminated string output.  There is
   * no check for embedded nul values in the decrypted output.
   */
  string decryptString(in string crypt);

  /**
   * Prompt the user to change the password on the SDR key.
   */
  void changePassword();

  /**
   * Logout of the security device that protects the SDR key.
   */
  void logout();

  /**
   * Logout of the security device that protects the SDR key and tear
   * down authenticated objects.
   */
  void logoutAndTeardown();
};

/**
 * Configuration interface for the Secret Decoder Ring
 *  - this interface allows setting the window that will be
 *    used as parent for dialog windows (such as password prompts)
 */
[scriptable, uuid(01D8C0F0-0CCC-11d4-9FDD-000064657374)]
interface nsISecretDecoderRingConfig: nsISupports {
  void setWindow(in nsISupports w);
};
