/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/**
 * @status UNDER_REVIEW
 */
 
/**
 * This is the prompt interface which can be used without knowlege of a
 * parent window. The parentage is hidden by the GetInterface though
 * which it is gotten. This interface is identical to nsIPromptService
 * but without the parent nsIDOMWindow parameter. See nsIPromptService
 * for all documentation.
 *
 * Accesskeys can be attached to buttons and checkboxes by inserting
 * an & before the accesskey character. For a real &, use && instead.
 */  

#include "nsISupports.idl"

[scriptable, uuid(a63f70c0-148b-11d3-9333-00104ba0fd40)]
interface nsIPrompt : nsISupports
{
    void alert(in wstring dialogTitle,
               in wstring text);

    void alertCheck(in wstring dialogTitle,
                    in wstring text,
                    in wstring checkMsg,
                    inout boolean checkValue);

    boolean confirm(in wstring dialogTitle,
                    in wstring text);

    boolean confirmCheck(in wstring dialogTitle,
                         in wstring text,
                         in wstring checkMsg,
                         inout boolean checkValue);
                         
    const unsigned long BUTTON_POS_0              = 1;
    const unsigned long BUTTON_POS_1              = 1 << 8;
    const unsigned long BUTTON_POS_2              = 1 << 16;
     
    const unsigned long BUTTON_TITLE_OK            = 1;
    const unsigned long BUTTON_TITLE_CANCEL        = 2;
    const unsigned long BUTTON_TITLE_YES           = 3;
    const unsigned long BUTTON_TITLE_NO            = 4;
    const unsigned long BUTTON_TITLE_SAVE          = 5;
    const unsigned long BUTTON_TITLE_DONT_SAVE     = 6;
    const unsigned long BUTTON_TITLE_REVERT        = 7;

    const unsigned long BUTTON_TITLE_IS_STRING     = 127;
    
    const unsigned long BUTTON_POS_0_DEFAULT       = 0 << 24;
    const unsigned long BUTTON_POS_1_DEFAULT       = 1 << 24;
    const unsigned long BUTTON_POS_2_DEFAULT       = 2 << 24;

    /* used for security dialogs, buttons are initially disabled */
    const unsigned long BUTTON_DELAY_ENABLE        = 1 << 26;

    const unsigned long STD_OK_CANCEL_BUTTONS      = (BUTTON_TITLE_OK * BUTTON_POS_0) +
                                                    (BUTTON_TITLE_CANCEL * BUTTON_POS_1);
    const unsigned long STD_YES_NO_BUTTONS         = (BUTTON_TITLE_YES * BUTTON_POS_0) +
                                                    (BUTTON_TITLE_NO * BUTTON_POS_1);

    PRInt32 confirmEx(in wstring dialogTitle,
                   in wstring text,
                   in unsigned long buttonFlags,
                   in wstring button0Title,
                   in wstring button1Title,
                   in wstring button2Title,
                   in wstring checkMsg,
                   inout boolean checkValue);

     boolean prompt(in wstring dialogTitle,
                    in wstring text,
                    inout wstring value, 
                    in wstring checkMsg,
                    inout boolean checkValue);

     boolean promptPassword(in wstring dialogTitle,
                            in wstring text,
                            inout wstring password,
                            in wstring checkMsg,
                            inout boolean checkValue);
 
     boolean promptUsernameAndPassword(in wstring dialogTitle,
                                       in wstring text,
                                       inout wstring username,
                                       inout wstring password,
                                       in wstring checkMsg,
                                       inout boolean checkValue);
    
    boolean select(in wstring dialogTitle,
                   in wstring text,
                   in  PRUint32 count,
                   [array, size_is(count)] in wstring selectList,
                   out long outSelection);
};
