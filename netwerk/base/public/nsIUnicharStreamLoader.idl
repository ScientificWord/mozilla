/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *    Darin Fisher <darin@netscape.com>  (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIUnicharInputStream;
interface nsIUnicharStreamLoader;
interface nsIChannel;

[scriptable, uuid(e06e8b08-8cdd-4503-a0a0-6f3b943602af)]
interface nsIUnicharStreamLoaderObserver : nsISupports
{
  /**
   * Called when the first full segment of data if available.
   *
   * @param aLoader the unichar stream loader
   * @param aContext the aContext parameter passed to the loader's init method
   * @param aFirstSegment the raw bytes of the first full data segment
   * @param aLength the length of aFirstSegment
   *
   * @return charset corresponding to this stream
   */
  ACString onDetermineCharset(in nsIUnicharStreamLoader aLoader,
                              in nsISupports aContext,
                              [size_is(aLength)] in string aFirstSegment,
                              in unsigned long aLength);

  /**
   * Called when the entire stream has been loaded.
   *
   * @param aLoader the unichar stream loader
   * @param aContext the aContext parameter passed to the loader's init method
   * @param aStatus the status of the underlying channel
   * @param aUnicharData the unichar input stream containing the data.  This
   *        can be null in some failure conditions.
   *
   * This method will always be called asynchronously by the
   * nsUnicharIStreamLoader involved, on the thread that called the
   * loader's init() method.
   */
  void onStreamComplete(in nsIUnicharStreamLoader aLoader,
                        in nsISupports aContext,
                        in nsresult aStatus,
                        in nsIUnicharInputStream aUnicharData);
};

[scriptable, uuid(8a3eca16-167e-443d-9485-7e84ed822e95)]
interface nsIUnicharStreamLoader : nsISupports
{
  const unsigned long DEFAULT_SEGMENT_SIZE = 4096;

  /**
   * Initializes the unichar stream loader
   *
   * @param aChannel the channel to read data from.  This should _not_ be
   *        opened; the loader will open the channel itself.
   * @param aObserver the observer to notify when a charset is needed and when
   *        the load is complete
   * @param aContext an opaque context pointer
   * @param aSegmentSize the size of the segments to use for the data, in bytes
   *
   * @note Failure to open the channel will cause init() to throw.  A
   *       successful call to init() means that onStreamComplete is guaranteed
   *       to be called on aObserver asynchronously (i.e. after init() returns).
   */
  
  void init(in nsIChannel aChannel,
            in nsIUnicharStreamLoaderObserver aObserver,
            in nsISupports aContext,
            in unsigned long aSegmentSize);

  /**
   * The channel attribute is only valid inside the onDetermineCharset
   * and onStreamComplete callbacks.  Otherwise it will be null.
   */
  readonly attribute nsIChannel channel;

  /**
   * The charset that onDetermineCharset returned, if that's been
   * called.
   */
  readonly attribute ACString charset;
};
