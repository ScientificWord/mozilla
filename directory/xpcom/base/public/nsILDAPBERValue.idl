/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * 
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the mozilla.org LDAP XPCOM SDK.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Dan Mosedale <dmose@netscape.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * Representation of a BER value as an interface containing an array of
 * bytes.  Someday this should perhaps be obsoleted by a better, more
 * generalized version of nsIByteBuffer, but that's currently not even
 * scriptable (see bug 125596).  
 */
[scriptable, uuid(c817c5fe-1dd1-11b2-a10b-ae9885762ea9)]
interface nsILDAPBERValue : nsISupports 
{
    /**
     * Set the BER value from an array of bytes (copies).
     *
     * @exception NS_ERROR_OUT_OF_MEMORY    couldn't allocate buffer to copy to
     */
    void set(in unsigned long aCount, 
             [array, size_is(aCount)] in octet aValue);

    /** 
     * Set the BER value from a UTF8 string (copies).
     *
     * @exception NS_ERROR_OUT_OF_MEMORY    couldn't allocate buffer to copy to
     */
    void setFromUTF8(in AUTF8String aValue);

    /** 
     * Get the BER value as an array of bytes.  Note that if this value is
     * zero-length, aCount and aRetVal will both be 0.  This means that 
     * (in C++ anyway) the caller MUST test either aCount or aRetval before
     * dereferencing aRetVal.
     *
     * @exception NS_ERROR_OUT_OF_MEMORY    couldn't allocate buffer to copy to
     */
    void get(out unsigned long aCount, 
             [retval, array, size_is(aCount)] out octet aRetVal);
};

