/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla browser.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   pav
 *   Blake Ross (blaker@netscape.com)
 *   Benjamin Smedberg <bsmedberg@covad.net>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIChromeRegistry.idl"

[scriptable, uuid(382370d0-a7cd-47ae-aa4e-af74f5edf652)]
interface nsIChromeRegistrySea : nsIXULChromeRegistry
{
  /* Applies a skin or locale to all possible packages */
  void selectSkin(in ACString skinName, in boolean useProfile);
  void selectLocale(in ACString localeName, in boolean useProfile);
  void deselectSkin(in ACString skinName, in boolean useProfile);
  void deselectLocale(in ACString localeName, in boolean useProfile);
  PRInt32 isSkinSelected(in ACString skinName, in boolean useProfile);
  PRInt32 isLocaleSelected(in ACString localeName, in boolean useProfile);
 
  //Special additional APIs for locales and skin.
  void selectLocaleForProfile(in ACString localeName, in wstring profilePath);
  void selectSkinForProfile(in ACString skinName, in wstring profilePath);

  /* runtimeProvider == true: don't assert the runtime change */
  void setRuntimeProvider(in boolean runtimeProvider); 

  boolean checkThemeVersion(in ACString skinName);
  boolean checkLocaleVersion(in ACString localeName);

  /* Apply skin/locale to a specific package */
  void selectSkinForPackage(in ACString skinName,
                            in wstring packageName,
                            in boolean useProfile);
  
  void selectLocaleForPackage(in ACString localeName,
                              in wstring packageName,
                              in boolean useProfile);
  
  void deselectSkinForPackage(in ACString skinName,
                              in wstring packageName,
                              in boolean useProfile);
  
  void deselectLocaleForPackage(in ACString localeName,
                                in wstring packageName,
                                in boolean useProfile);
  
  boolean isSkinSelectedForPackage(in ACString skinName,
                                   in wstring packageName,
                                   in boolean useProfile);
  
  boolean isLocaleSelectedForPackage(in ACString localeName,
                                     in wstring packageName,
                                     in boolean useProfile);

  ACString getSelectedSkin(in ACString packageName);

  /* Installation APIs */
  void installSkin(in string baseURL,
                   in boolean useProfile,
                   in boolean allowScripts);
  
  void uninstallSkin(in ACString skinName, in boolean useProfile);

  void installLocale(in string baseURL, in boolean useProfile);
  void uninstallLocale(in ACString localeName, in boolean useProfile);

  void installPackage(in string baseURL, in boolean useProfile);
  void uninstallPackage(in ACString packageName, in boolean useProfile);

  /* Whether or not an addon package can dynamically overlay another package. 
     You can use these APIs to effectively disable a chrome add-on without
     uninstalling it. */
  void setAllowOverlaysForPackage(in wstring packageName, in boolean allowOverlays);
};
