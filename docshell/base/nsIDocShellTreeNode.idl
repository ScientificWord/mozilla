/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla browser.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications, Inc.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Travis Bogard <travis@netscape.com>
 *   Steve Clark <buster@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIDocShellTreeItem;

/**
 * The nsIDocShellTreeNode supplies the methods for interacting with children
 * of a docshell.  These are essentially the methods that turn a single docshell
 * into a docshell tree. 
 */

/*
 * Long-term, we probably want to merge this interface into
 * nsIDocShellTreeItem.  Need to eliminate uses of this interface
 * first.
 */

[scriptable, uuid(37f1ab73-f224-44b1-82f0-d2834ab1cec0)]
interface nsIDocShellTreeNode : nsISupports
{
	/*
	The current number of DocShells which are immediate children of the 
	this object.
	*/
	readonly attribute long childCount;

	/*
	Add a new child DocShellTreeItem.  Adds to the end of the list.
	Note that this does NOT take a reference to the child.  The child stays
	alive only as long as it's referenced from outside the docshell tree.
	@throws NS_ERROR_ILLEGAL_VALUE if child corresponds to the same
	        object as this treenode or an ancestor of this treenode
	@throws NS_ERROR_UNEXPECTED if this node is a leaf in the tree.
	*/
	void addChild(in nsIDocShellTreeItem child);

	/*
	Removes a child DocShellTreeItem.
	@throws NS_ERROR_UNEXPECTED if this node is a leaf in the tree.
	*/
	void removeChild(in nsIDocShellTreeItem child);

	/**
	 * Return the child at the index requested.  This is 0-based.
	 *
	 * @throws NS_ERROR_UNEXPECTED if the index is out of range
	 */
	nsIDocShellTreeItem getChildAt(in long index);

	/*
	Return the child DocShellTreeItem with the specified name.
	aName - This is the name of the item that is trying to be found.
	aRecurse - Is used to tell the function to recurse through children.
		Note, recursion will only happen through items of the same type.
	aSameType - If this is set only children of the same type will be returned.
	aRequestor - This is the docshellTreeItem that is requesting the find.  This
		parameter is used when recursion is being used to avoid searching the same
		tree again when a child has asked a parent to search for children.
	aOriginalRequestor - The original treeitem that made the request, if any.
    	This is used to ensure that we don't run into cross-site issues.

	Note the search is depth first when recursing.
	*/
	nsIDocShellTreeItem findChildWithName(in wstring aName,
	                                      in boolean aRecurse,
	                                      in boolean aSameType,
	                                      in nsIDocShellTreeItem aRequestor,
	                                      in nsIDocShellTreeItem aOriginalRequestor);
};

