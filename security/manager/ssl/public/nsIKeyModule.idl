/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Google Inc.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Tony Chang <tc@google.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

// An opaque key object.
[scriptable, uuid(4b31f4ed-9424-4710-b946-79b7e33cf3a8)]
interface nsIKeyObject : nsISupports
{
  // Key types
  const short SYM_KEY = 1;
  const short PRIVATE_KEY = 2;
  const short PUBLIC_KEY = 3;

  // Algorithm types
  const short RC4 = 1;
  const short AES_CBC = 2;

  // aAlgorithm is an algorithm type
  // aKey is either a PK11SymKey, SECKEYPublicKey, or a SECKEYPrivateKey.
  // The nsIKeyObject will take ownership of the key and be responsible
  // for freeing the key memory when destroyed.
  [noscript] void initKey(in short aAlgorithm, in voidPtr aKey);

  // Return a pointer to the underlying key object
  [noscript] voidPtr getKeyObj();

  // Will return NS_ERROR_NOT_INITIALIZED if initKey hasn't been run
  short getType();
};

[scriptable, uuid(264eb54d-e20d-49a0-890c-1a5986ea81c4)]
interface nsIKeyObjectFactory : nsISupports
{
  nsIKeyObject lookupKeyByName(in ACString aName);

  nsIKeyObject unwrapKey(in short aAlgorithm,
                         [const, array, size_is(aWrappedKeyLen)] in octet aWrappedKey,
                         in unsigned long aWrappedKeyLen);

  // TODO: deriveKeyFrom*


  // DO NOT USE
  // This is not FIPS compliant and should not be used.
  nsIKeyObject keyFromString(in short aAlgorithm, in ACString aKey);
};
