/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Google Inc.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Tony Chang <tc@google.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIKeyModule.idl"

interface nsIInputStream;

/**
 * Stream cipher interface.  We're basically copying the interface from
 * nsICryptoHash interface.
 */
[scriptable, uuid(1d507cd6-1630-4710-af1b-4012dbcc514c)]
interface nsIStreamCipher : nsISupports
{
    /**
     * Initialize a stream cipher.
     * @param aKey nsIKeyObject
     */
    void init(in nsIKeyObject aKey);

    /**
     * Initialize a stream cipher with an initialization vector.
     * @param aKey nsIKeyObject
     * @param aIV the initialization vector
     * @param aIVLen the length of the initialization vector
     */
    void initWithIV(in nsIKeyObject aKey,
                    [const, array, size_is(aIVLen)] in octet aIV,
                    in unsigned long aIVLen);

    /**
     * Update from an array of bytes.
     */
    void update([const, array, size_is(aLen)] in octet aData, in unsigned long aLen);

    /**
     * Update from a stream.
     */
    void updateFromStream(in nsIInputStream aStream, in long aLen);

    /**
     * A more script friendly method (not in nsICryptoHash interface).
     */
    void updateFromString(in ACString aInput);

    /**
     * @param aASCII if true then the returned value is a base-64
     *        encoded string.  if false, then the returned value is
     *        binary data.
     */
    ACString finish(in PRBool aASCII);

    /**
     * Discard aLen bytes of the keystream.
     * These days 1536 is considered a decent amount to drop to get
     * the key state warmed-up enough for secure usage.
     */
    void discard(in long aLen);
};
