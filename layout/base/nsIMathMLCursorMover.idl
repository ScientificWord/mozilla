#include "nsISupports.idl"

interface nsIFrame;

[scriptable, uuid(F85AD3B9-D72D-42cf-94DE-779565620E6A)]

/**
 * A MathMLCursorMover handles cursor movement between frames (either the source
 * frame or the destination frame is a MathML frame). Within frames, and if neither
 * of the frames supports this interface, the default cursor movement is used, which
 * goes character by character through the document. The MathMLCursorMover handles the 
 * following cases:	<ul>
 *  <li> There are two cursor positions between characters, as when a fraction follows 
 *    symbols. The cursor can be at the end of the main line characters, or before the
 *    first character in the numerator. </li>
 *  <li> We override the default "next character", as when the cursor leaves a fraction
 *    when it leaves the numerator (and skips the denominator)</li>
 *  <li> We want to force the order of traversal through sub- and super-scripts.</li>
 */

interface nsIMathMLCursorMover : nsISupports
{
/**
 * This method is called when the cursor is leaving a frame, and most frequently a frame will call this 
 * function on its parent (if it supports this interface). A case where the parent can better handle this
 * is the fraction, which knows it has a numerator and a denominator. Those frames may not know they are
 * part of a fraction.
 *
 * @leavingFrame is the frame that the cursor is leaving
 * @count is 1 or 0, and it tells how many characters the cursor can still cross. For example, when the 
 * cursor moves from after the last character before a fraction to before the first character in the numberator,
 * the value of count should be decremented to 0, since moving to the new cursor position counts as a move,
 * even though no characters have been crossed.
 * @aOutFrame is used to return the final frame containing the cursor. It must be passed along a chain of
 * calls.
 * @aOutOffset is used to return the cursor position in aOutFrame.
 * @Returns the new value of count, which may be of interest to the caller.
 */

  long moveOutToRight(in nsIFrame leavingFrame, out nsIFrame aOutFrame, out long aOutOffset, in long count);

/**
 * This is the same as |moveOutToRight| except the cursor motion is right to left.
 */
   
  long moveOutToLeft(in nsIFrame leavingFrame, out nsIFrame aOutFrame, out long aOutOffset, in long count);

/**
 * This method is called on a frame when the cursor enters the frame. This will frequently be called
 * by the frame's parent.
 *
 * @leavingFrame is the frame that the cursor is leaving. It is quite likely a sibling.
 * @count is 1 or 0, and it tells how many characters the cursor can still cross. For example, when the 
 * cursor moves from after the last character before a fraction to before the first character in the numberator,
 * the value of count should be decremented to 0, since moving to the new cursor position counts as a move,
 * even though no characters have been crossed.
 * @aOutFrame is used to return the final frame containing the cursor. It must be passed along a chain of
 * calls.
 * @aOutOffset is used to return the cursor position in aOutFrame.
 * @return the new value of count, which may be of interest to the caller.
 */
  long enterFromRight(in nsIFrame leavingFrame, out nsIFrame aOutFrame, out long aOutOffset, in long count);

/**
 * This is the same as |enterFromRight| except the cursor motion is right to left.
 */

  long enterFromLeft(in nsIFrame leavingFrame, out nsIFrame aOutFrame, out long aOutOffset, in long count);
};

