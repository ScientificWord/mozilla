/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SVG project.
 *
 * The Initial Developer of the Original Code is
 * Crocodile Clips Ltd.
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex.fritze@crocodile-clips.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"


%{C++
struct nsRect;
%}

[ref] native nsRectRef(nsRect);

typedef PRUint32 nscolor;

interface nsIRenderingContext;
interface nsPresContext;
interface nsIDOMSVGMatrix;
interface nsISVGRendererSurface;

/**
 * \addtogroup renderer_interfaces Rendering Engine Interfaces
 * @{
 */

/**
 * One of a number of interfaces (all starting with nsISVGRenderer*)
 * to be implemented by an SVG rendering engine. See nsISVGRenderer
 * for more details.
 *
 * This interface abstracts a rendering engine-native canvas object
 * onto which path and glyph geometries can be painted.
 *
 * A canvas object is instantiated by the backend for a given
 * Mozilla-native rendering object with a call to
 * nsISVGRenderer::createCanvas().
 */
[scriptable, uuid(81eb1fc4-ea69-45dd-b31e-fe2cbcab04a5)]
interface nsISVGRendererCanvas : nsISupports
{
  /**
   * Lock a portion of the canvas and obtain a rendering context onto
   * which Mozilla can paint non-svg content. This is needed for
   * (partial) foreignObject support.
   *
   * lockRenderingContext() calls are paired with
   * unlockRenderingContext() calls.
   *
   * @param rect Area to be locked.
   * @return Mozilla-native rendering context for the locked area.
   */
  [noscript] nsIRenderingContext lockRenderingContext(in nsIDOMSVGMatrix aCTM);

  /**
   * Unlock the canvas portion locked with a previous call to
   * lockRenderingContext(). 
   */
  void unlockRenderingContext();

  // XXX do we need this?
  nsPresContext getPresContext();

  /**
   * Fill the canvas with the given color.
   *
   * @param color Fill color.
   */
  void clear(in nscolor color);

  /**
   * Ensure that all renderings on the canvas have been flushed to the
   * Mozilla-native rendering context.
   */
  void flush();

  /**
   * Set render mode (normal, clipping, or clip render to mask)
   */
  const unsigned short SVG_RENDER_MODE_NORMAL    = 0;
  const unsigned short SVG_RENDER_MODE_CLIP      = 1;
  const unsigned short SVG_RENDER_MODE_CLIP_MASK = 2;
  attribute unsigned short renderMode;

  /**
   * Push/Pop clip path.
   */
  void pushClip();
  void popClip();

  /**
   * Set rectangular clip region.
   */
  void setClipRect(in nsIDOMSVGMatrix canvasTM, in float x, in float y,
                   in float width, in float height);

  /**
   * Push/Pop surface as primary drawing surface.
   *
   * surface: surface to push
   * isSubSurface: boolean to tell whether this should be treated like
   *               the "root" surface in terms of transformation correction
   *               or as an absolute surface.
   */
  void pushSurface(in nsISVGRendererSurface surface, in boolean isSubSurface);
  void popSurface();

  /**
   * Get the current drawing surface dimensions.
   */
  void getSurfaceSize(out unsigned long width, out unsigned long height);

  /**
   * Surface composition.
   */
  void compositeSurface(in nsISVGRendererSurface surface,
                        in float opacity);

  void compositeSurfaceWithMask(in nsISVGRendererSurface surface,
                                in nsISVGRendererSurface mask);

  void compositeSurfaceMatrix(in nsISVGRendererSurface surface,
                              in nsIDOMSVGMatrix canvasTM,
                              in float opacity);
};

/** @} */
