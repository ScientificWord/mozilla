/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Dave Hyatt <hyatt@mozilla.org> (Original Author)
 *   HÃ¥kan Waara <hwaara@chello.se>
 *   Jan Varga <jan@mozdevgroup.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

interface nsITreeBoxObject;
interface nsITreeColumn;

#include "nsISupports.idl"

[scriptable, uuid(ab6fe746-300b-4ab4-abb9-1c0e3977874c)]
interface nsITreeSelection : nsISupports
{
  /**
   * The tree widget for this selection.
   */
  attribute nsITreeBoxObject tree;

  /**
   * This attribute is a boolean indicating single selection.
   */
  readonly attribute boolean single;

  /**
   * The number of rows currently selected in this tree.
   */
  readonly attribute long count;

  /**
   * Indicates whether or not the row at the specified index is
   * part of the selection.
   */
  boolean isSelected(in long index);

  /**
   * Deselect all rows and select the row at the specified index. 
   */
  void select(in long index);

  /**
   * Perform a timed select.
   */
  void timedSelect(in long index, in long delay);

  /**
   * Toggle the selection state of the row at the specified index.
   */
  void toggleSelect(in long index);

  /**
   * Select the range specified by the indices.  If augment is true,
   * then we add the range to the selection without clearing out anything
   * else.  If augment is false, everything is cleared except for the specified range.
   */
  void rangedSelect(in long startIndex, in long endIndex, in boolean augment);

  /**
   * Clears the range.
   */
  void clearRange(in long startIndex, in long endIndex);

  /**
   * Clears the selection.
   */
  void clearSelection();

  /**
   * Inverts the selection.
   */
  void invertSelection();

  /**
   * Selects all rows.
   */
  void selectAll();

  /**
   * Iterate the selection using these methods.
   */
  long getRangeCount();
  void getRangeAt(in long i, out long min, out long max);

  /**
   * Can be used to invalidate the selection.
   */
  void invalidateSelection();

  /**
   * Called when the row count changes to adjust selection indices.
   */
  void adjustSelection(in long index, in long count);

  /**
   * This attribute is a boolean indicating whether or not the
   * "select" event should fire when the selection is changed using
   * one of our methods.  A view can use this to temporarily suppress
   * the selection while manipulating all of the indices, e.g., on 
   * a sort.
   */
  attribute boolean selectEventsSuppressed;

  /**
   * The current item (the one that gets a focus rect in addition to being
   * selected).
   */
  attribute long currentIndex;

  /**
   * The current column.
   */
  attribute nsITreeColumn currentColumn;

  /**
   * The selection "pivot".  This is the first item the user selected as
   * part of a ranged select.
   */
  readonly attribute long shiftSelectPivot;
};
