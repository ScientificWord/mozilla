/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */


#include "nsISupports.idl"
#include "nsIEventSink.idl"

/* THIS IS A PUBLIC EMBEDDING API */


/**
 * The nsIDragHelperService is a service that wraps the dispatch
 * of drag events into gecko with the appropriate management of
 * the nsDragService/nsDragSession. It frees the application from
 * having to manage details specific to how Gecko processes drag
 * and drop.
 *
 * If the browser takes up the entire window, this is straightforward:
 * call |enter| when the mouse enters the window, |tracking| while the
 * mouse moves/hovers inside the window, and |leave| when the mouse
 * exits the window. Call |drop| when the mouse is released w/in the window.
 *
 * If the browser does not take up the entire window, call |enter|
 * when the mouse enters the rectangle bounding the browser, |tracking|
 * while it is inside, |leave| when the mouse leaves the rectangle, and
 * |drop| when the mouse is released w/in the rectangle. Note that the
 * application is responsible for knowing where in its window the browser
 * has been placed.
 *
 * @status UNDER_REVIEW
 */

native DragReference(DragReference);


[uuid(22ac1757-14c5-45ef-841e-ca6e932b989c)]
interface nsIDragHelperService : nsISupports
{
  /**
   * Call when the mouse has entered the rectangle bounding the browser
   * during a drag.
   *
   * @param inDragRef the native DragReference
   * @param inSink the event sink to which the event will be dispatched
   */   
  void enter ( in DragReference inDragRef, in nsIEventSink inSink ) ;
  
  /**
   * Call when the mouse is inside the rectangle bounding the browser
   * during a drag. The return value indicates if Gecko would accept the
   * contents of the drag if a drop were to happen with the mouse in the
   * current position. This can be used for doing some rudimentary drop
   * feedback.
   *
   * @param inDragRef the native DragReference
   * @param inSink the event sink to which the event will be dispatched
   *
   * @result <code>PR_TRUE</code> if the drag would be accepted by Gecko.
   *
   */   
  boolean tracking ( in DragReference inDragRef, in nsIEventSink inSink ) ;

  /**
   * Call when the mouse has left the rectangle bounding the browser
   * during a drag.
   *
   * @param inDragRef the native DragReference
   * @param inSink the event sink to which the event will be dispatched
   */   
  void leave ( in DragReference inDragRef, in nsIEventSink inSink ) ;

  /**
   * Call when a drop occurs inside the rectangle bounding the browser.
   *
   * @param inDragRef the native DragReference
   * @param inSink the event sink to which the event will be dispatched
   *
   * @result <code>PR_TRUE</code> if the drag was accepted by Gecko.
   */   
  boolean drop ( in DragReference inDragRef, in nsIEventSink inSink ) ;

};
