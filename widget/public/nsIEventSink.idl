/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */


#include "nsISupports.idl"

/* THIS IS A PUBLIC EMBEDDING API */

/**
 * The nsIEventSink is implemented internally by Gecko as the conduit
 * through which native events travel into Gecko. You obtain an
 * event sink by QI'ing the top-level nsIWidget, usually a window.
 *
 * @status UNDER_REVIEW
 */
 
[uuid(c0d3a7c8-1dd1-11b2-8903-adcd22d004ab)]
interface nsIEventSink : nsISupports
{
  /**
   * Entry point for native events into Gecko.
   *
   * @return <code>PR_TRUE</code> if event was handled
   *         <code>PR_FALSE</code> if not handled
   *
   * On Mac, <code>anEvent</code> is a native <code>EventRecord*</code>.
   */   
  boolean dispatchEvent ( in voidPtr anEvent ) ;
  
  /**
   * Alerts gecko of a drag event. 
   *
   * @param aMessage the message parameter for a Gecko NS_DRAGDROP_EVENT (See nsGUIEvent.h for list).
   * @param aMouseGlobalX x coordinate of mouse, in global coordinates
   * @param aMouseGlobalY y coordinate of mouse, in global coordinates
   * @param aKeyModifiers a native bitfield of which modifier keys are currently pressed
   *
   * @return <code>PR_TRUE</code> if event was handled
   *         <code>PR_FALSE</code> if not handled
   */
  boolean dragEvent ( in unsigned long aMessage, in short aMouseGlobalX, in short aMouseGlobalY,
                       in unsigned short aKeyModifiers ) ;
  
  /**
   * Tell gecko to scroll, usually in response to a mouse-wheel
   *
   * @param aVertical <code>PR_TRUE</code> if scrolling veritcally, <code>PR_FALSE</code> if horizontal
   * @param aNumLines the number of lines to scroll, positive for down, negative for up
   * @param aMouseLocalX the x coordinate of the mouse in window (local) coordinates
   * @param aMouseLocalY the y coordinate of the mouse in window (local) coordinates
   */
  boolean scroll ( in boolean aVertical, in short aNumLines, in short aMouseLocalX, 
                    in short aMouseLocalY ) ;
                    
  /**
   * Perform any idle processing (handle timers, set the cursor, etc)
   */
  void Idle ( ) ;

};