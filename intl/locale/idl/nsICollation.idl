/* -*- Mode: idl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 *   mozilla.org
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsILocale.idl"

interface nsICollation;

[scriptable, uuid(04971e14-d6b3-4ada-8cbb-c3a13842b349)]
interface nsICollationFactory : nsISupports {
  nsICollation CreateCollation(in nsILocale locale);
};

[scriptable, uuid(b0132cc0-3786-4557-9874-910d7def5f93)]
interface nsICollation : nsISupports {

  // use the primary comparison for the given local - no flags
  const long kCollationStrengthDefault = 0;

  // do not consider case differences when doing the comparison i.e. A=a) 
  const long kCollationCaseInsensitiveAscii = 1;

  // do not consider accent differences when doing the comparison a=รก) 
  const long kCollationAccentInsenstive = 2;

  // case sensitive collation (default)
  const long kCollationCaseSensitive = kCollationStrengthDefault;

  // case insensitive collation
  const long kCollationCaseInSensitive = (kCollationCaseInsensitiveAscii | kCollationAccentInsenstive);

  // init this interface to a specified locale (should only be called by collation factory)
  void initialize(in nsILocale locale);

  // compare two strings
  // result is same as strcmp
  long compareString(in long strength, in AString string1, in AString string2);

  // allocate sort key from input string
  // returns newly allocated key, and its band its byte length
  [noscript] void allocateRawSortKey(in long strength, 
                                     in AString stringIn,
                                     [array,size_is(outLen)] out octet key,
                                     out unsigned long outLen);

  // compare two sort keys
  // length is a byte length, result is same as strcmp
  [noscript] long compareRawSortKey([const,array,size_is(len1)] in octet key1, in unsigned long len1,
                                    [const,array,size_is(len2)] in octet key2, in unsigned long len2);

};
