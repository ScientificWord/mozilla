/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is character set conversion service
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corp.
 * Portions created by the Initial Developer are Copyright (C) 2003
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Alec Flett <alecf@flett.org>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIAtom.idl"

%{ C++
#include "nsIUnicodeDecoder.h"
#include "nsIUnicodeEncoder.h"
#include "nsStringGlue.h"


// XXX change to NS_CHARSETCONVERTERMANAGER_CID
#define NS_ICHARSETCONVERTERMANAGER_CID \
  {0x3c1c0163, 0x9bd0, 0x11d3, { 0x9d, 0x9, 0x0, 0x50, 0x4, 0x0, 0x7, 0xb2}}

// XXX change to NS_CHARSETCONVERTERMANAGER_PID
#define NS_CHARSETCONVERTERMANAGER_CONTRACTID "@mozilla.org/charset-converter-manager;1"
%}

interface nsIUnicodeDecoder;
interface nsIUnicodeEncoder;
interface nsIUTF8StringEnumerator;

/**
 *
 * Here Charsets are identified by ASCII strings. Charset alias
 * resolution is provided by default in most methods. "Raw"
 * versions that do not need this resolution are also provided.
 *
 * @created         21/Feb/2000
 * @author  Catalin Rotaru [CATA]
 */
[scriptable, uuid(f5323a76-c8f7-4c65-8d0c-1250e969c7d5)]
interface nsICharsetConverterManager : nsISupports
{
    /**
     * Get the Unicode decoder for the given charset.
     * The "Raw" version skips charset alias resolution
     */
    nsIUnicodeDecoder getUnicodeDecoder(in string charset);
    nsIUnicodeDecoder getUnicodeDecoderRaw(in string charset);

    /**
     * Get the Unicode encoder for the given charset.
     * The "Raw" version skips charset alias resolution
     */
    nsIUnicodeEncoder getUnicodeEncoder(in string charset);
    nsIUnicodeEncoder getUnicodeEncoderRaw(in string charset);

    /**
     * A shortcut to calling nsICharsetAlias to do alias resolution
     */
    ACString getCharsetAlias(in string charset);
    
    /**
     * Get the complete list of available decoders.
     */
    nsIUTF8StringEnumerator getDecoderList();

    /**
     * Get the complete list of available encoders.
     */
    nsIUTF8StringEnumerator getEncoderList();

    /**
     * Get the complete list of available charset detectors.
     */
    nsIUTF8StringEnumerator GetCharsetDetectorList();

    /**
     * Get the human-readable name for the given charset.
     */
    AString getCharsetTitle(in string charset);

    /**
     * Get some data about the given charset. This includes whether the 
     * character encoding may be used for certain purposes, if it is 
     * multi-byte, and the language code for it. See charsetData.properties
     * for the source of this data. Some known property names:
     *    notForBrowser  - not to be used in the bowser.
     *    notForOutgoing - not to be used for exporting files.
     *    LangGroup      - language code for charset, e.g. 'he' and 'zh-CN'.
     *    isMultibyte    - is this a multi-byte charset?
     * 
     * @param charset name of the character encoding, e.g. 'iso-8859-15'.
     * @param prop property desired for the character encoding.
     * @return the value of the property, for the character encoding.
     */
    AString getCharsetData(in string charset, 
                           in wstring prop);

    /**
     * Get the language group for the given charset. This is similar to 
     * calling <tt>getCharsetData</tt> with the <tt>prop</tt> "LangGroup".
     * 
     * @param charset name of the character encoding, e.g. 'iso-8859-15'.
     * @return the language code for the character encoding.
     */
    nsIAtom getCharsetLangGroup(in string charset);
    nsIAtom getCharsetLangGroupRaw(in string charset);
};
