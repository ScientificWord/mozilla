/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2003
 * the Initial Developer. All Rights Reserved.
 *
 * Original Author: Aaron Leventhal (aaronl@netscape.com)
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIAccessNode;
interface nsIContent;

[uuid(eae56f75-ee68-4120-b113-10f21b75509e)]
interface nsPIAccessibleDocument : nsISupports
{
   /**
    * Find the accessible object in the accessibility cache that 
    * corresponds to aStartNode or the first ancestor of aStartNode 
    * that has an accessible object associated with it.
    * Clear that accessible object's parent's cache of accessible children and
    * and remove the accessible object and any decendents from the accessible cache.
    * New accessible objects will be created and cached again on demand.
    * @param aChangeContent     The child that is changing
    * @param aEvent             The event from nsIAccessibleEvent that caused the change:
    *                           Must be one of: EVENT_REORDER (change),
    *                                           EVENT_SHOW (make visible or create) or 
    *                                           EVENT_HIDE (destroy or hide)
    */
  void invalidateCacheSubtree(in nsIContent aChangeContent,
                              in PRUint32 aChangeEvent);
  void cacheAccessNode(in voidPtr aUniqueID, in nsIAccessNode aAccessNode);
  void destroy();
  void flushPendingEvents();
  void fireDocLoadingEvent(in boolean isFinished);
  void fireAnchorJumpEvent();
};
