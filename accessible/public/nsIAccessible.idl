/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2003
 * the Initial Developer. All Rights Reserved.
 *
 * Original Author: Eric D Vaughan (evaughan@netscape.com)
 * Contributor(s): Aaron Leventhal (aaronl@netscape.com)
 *                 John Gaunt (jgaunt@netscape.com)
 *                 Kyle Yuan (kyle.yuan@sun.com)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * A cross-platform interface that supports platform-specific 
 * accessibility APIs like MSAA and ATK. Contains the sum of what's needed
 * to support IAccessible as well as ATK's generic accessibility objects.
 * Can also be used by in-process accessibility clients to get information
 * about objects in the accessible tree. The accessible tree is a subset of 
 * nodes in the DOM tree -- such as documents, focusable elements and text.
 * Mozilla creates the implementations of nsIAccessible on demand.
 * See http://www.mozilla.org/projects/ui/accessibility for more information.
 *
 * @status UNDER_REVIEW
 */
[scriptable, uuid(DB717DB4-37E9-42F1-A3B0-2579DD7C3814)]
interface nsIAccessible : nsISupports
{
  /**
   * Parent node in accessible tree.
   */
  readonly attribute nsIAccessible parent;

  /**
   * Next sibling in accessible tree
   */
  readonly attribute nsIAccessible nextSibling;

  /**
   * Previous sibling in accessible tree
   */
  readonly attribute nsIAccessible previousSibling;

  /**
   * First child in accessible tree
   */
  readonly attribute nsIAccessible firstChild;

  /**
   * Last child in accessible tree
   */
  readonly attribute nsIAccessible lastChild;

  /**
   * Number of accessible children
   */
  readonly attribute long childCount;

  /**
   * The 0-based index of this accessible in its parent's list of children,
   * or -1 if this accessible does not have a parent.
   */
  readonly attribute long indexInParent;

  /**
   * Accessible name -- the main text equivalent for this node
   */
  attribute AString name;

  /**
   * Accessible value -- a number or a secondary text equivalent for this node
   * Widgets that use role attribute can force a value using the valuenow attribute
   */
  readonly attribute AString value;

  /**
   * Accessible description -- long text associated with this node
   */
  readonly attribute AString description;

  /**
   * Provides localized string of accesskey name, such as Alt+D.
   * The modifier may be affected by user and platform preferences.
   * Usually alt+letter, or just the letter alone for menu items. 
   */
  readonly attribute AString keyboardShortcut;

  /**
   * Provides localized string of global keyboard accelerator, such
   * as Ctrl+O for Open file
   */
  readonly attribute AString keyBinding;

  /**
   * Natural enumerated accessible role for the associated element.
   * The values depend on platform because of variations.
   * See the ROLE_* constants defined later in this file.
   * This does not take into account role attribute as the finalRole does.
   */
  readonly attribute unsigned long role;

  /**
   * Enumerated accessible role. The values depend on platform because of variations.
   * See the ROLE_* constants defined later in this file.
   * Widgets can use role attribute to force the final role
   */
  readonly attribute unsigned long finalRole;

  /**
   * Accessible states -- bit field which describes boolean properties of node. 
   * See the STATE_* constants defined later in this file.
   * Many states are only valid given a certain role attribute that supports them
   */
  readonly attribute unsigned long finalState;

  /**
   * Extended accessible states -- second bit field describing node
   */
  readonly attribute unsigned long extState;

  /**
   * True if this element is live in an editor.
   * False if the content is being displayed but not edited. 
   */
  readonly attribute boolean isEditable;

  /**
   * Help text associated with node
   */
  readonly attribute AString help;

  /**
   * Focused accessible child of node
   */
  readonly attribute nsIAccessible focusedChild;

  /**
   * Accessible child which contains the coordinate at x,y
   */
  nsIAccessible getChildAtPoint(in long x, in long y);

  /**
   * Nth accessible child using zero-based index or last child if index less than zero
   */
  nsIAccessible getChildAt(in long aChildIndex);

  /**
   * Accessible node geometrically to the right of this one
   */
  nsIAccessible getAccessibleToRight();

  /**
   * Accessible node geometrically to the left of this one
   */
  nsIAccessible getAccessibleToLeft();

  /**
   * Accessible node geometrically above this one
   */
  nsIAccessible getAccessibleAbove();

  /**
   * Accessible node geometrically below this one
   */
  nsIAccessible getAccessibleBelow();

  /**
   * Accessible node related to this one 
   */
  nsIAccessible getAccessibleRelated(in unsigned long aRelationType);

  void getBounds(out long x, 
                    out long y, 
                    out long width, 
                    out long height);

  /**
   * Add or remove this accessible to the current selection
   */
  void setSelected(in boolean isSelected);

  /**
   * Extend the current selection from its current accessible anchor node
   * to this accessible
   */
  void extendSelection();

  /**
   * Select this accessible node only
   */
  void takeSelection();

  /**
   * Focus this accessible node,
   * The state STATE_FOCUSABLE indicates whether this node is normally focusable.
   * It is the callers responsibility to determine whether this node is focusable.
   * accTakeFocus on a node that is not normally focusable (such as a table),
   * will still set focus on that node, although normally that will not be visually 
   * indicated in most style sheets.
   */
  void takeFocus();

  /**
   * The number of accessible actions associated with this accessible
   */
  readonly attribute PRUint8 numActions;

  /**
   * The name of the accessible action at the given zero-based index
   */
  AString getActionName(in PRUint8 index);

  /**
   * Perform the accessible action at the given zero-based index
   * Action number 0 is the default action
   */
  void doAction(in PRUint8 index);   

  /**
   * Get a pointer to accessibility interface for this node, which is specific 
   * to the OS/accessibility toolkit we're running on.
   */
  [noscript] void getNativeInterface(out voidPtr aOutAccessible);

  /**
   * MSAA State flags - used for bitfield. More than 1 allowed.
   */
  const unsigned long  STATE_UNAVAILABLE        = 0x00000001;  // Disabled, maps to opposite of Java ENABLED, Gnome/ATK SENSITIVE?
  const unsigned long  STATE_SELECTED           = 0x00000002;
  const unsigned long  STATE_FOCUSED            = 0x00000004;
  const unsigned long  STATE_PRESSED            = 0x00000008;
  const unsigned long  STATE_CHECKED            = 0x00000010;
  const unsigned long  STATE_MIXED              = 0x00000020; // 3-state checkbox or toolbar button
  const unsigned long  STATE_READONLY           = 0x00000040; // Maps to opposite of Java/Gnome/ATK EDITABLE state
  const unsigned long  STATE_HOTTRACKED         = 0x00000080;
  const unsigned long  STATE_DEFAULT            = 0x00000100;
  const unsigned long  STATE_EXPANDED           = 0x00000200;
  const unsigned long  STATE_COLLAPSED          = 0x00000400;
  const unsigned long  STATE_BUSY               = 0x00000800;
  const unsigned long  STATE_FLOATING           = 0x00001000;  // Children "owned" not "contained" by parent
  const unsigned long  STATE_MARQUEED           = 0x00002000;
  const unsigned long  STATE_ANIMATED           = 0x00004000;
  const unsigned long  STATE_INVISIBLE          = 0x00008000;
  const unsigned long  STATE_OFFSCREEN          = 0x00010000;
  const unsigned long  STATE_SIZEABLE           = 0x00020000;
  const unsigned long  STATE_MOVEABLE           = 0x00040000;
  const unsigned long  STATE_SELFVOICING        = 0x00080000;
  const unsigned long  STATE_FOCUSABLE          = 0x00100000;
  const unsigned long  STATE_SELECTABLE         = 0x00200000;
  const unsigned long  STATE_LINKED             = 0x00400000;
  const unsigned long  STATE_TRAVERSED          = 0x00800000;
  const unsigned long  STATE_MULTISELECTABLE    = 0x01000000;  // Supports multiple selection
  const unsigned long  STATE_EXTSELECTABLE      = 0x02000000;  // Supports extended selection
  const unsigned long  STATE_ALERT_LOW          = 0x04000000;  // This information is of low priority
  const unsigned long  STATE_ALERT_MEDIUM       = 0x08000000;  // This information is of medium priority
  const unsigned long  STATE_ALERT_HIGH         = 0x10000000;  // This information is of high priority
  const unsigned long  STATE_PROTECTED          = 0x20000000;  // Maps to Gnome's *Role* ATK_ROLE_PASSWD_TEXT, nothing for Java?
  const unsigned long  STATE_HASPOPUP           = 0x40000000;  // New in MSAA 2.0

  // Mapping important states that we don't have to unused alert states on MSAA
  // as per discussions with AT vendors. On ATK there will be legitimate states for
  // STATE_REQUIRED AND STATE_INVALID
  const unsigned long  STATE_REQUIRED           = STATE_ALERT_LOW;
  const unsigned long  STATE_IMPORTANT          = STATE_ALERT_MEDIUM;
  const unsigned long  STATE_INVALID            = STATE_ALERT_HIGH;
  const unsigned long  STATE_CHECKABLE          = STATE_MARQUEED;

/**
 * Extended state flags (for now non-MSAA, for Java and Gnome/ATK support)
 * "Extended state flags" has seperate value space from "MSAA State flags".
 */
  const unsigned long  EXT_STATE_DEFUNCT        = 0x00080000;  // Object no longer exists
  const unsigned long  EXT_STATE_SELECTABLE_TEXT= 0x00100000;  // For text which is selectable, object must implement nsIAccessibleText
  const unsigned long  EXT_STATE_EDITABLE       = 0x00200000;  // Used for XUL/HTML input (type = text,password) element
  const unsigned long  EXT_STATE_ACTIVE         = 0x00400000;  // This window is currently the active window    
  const unsigned long  EXT_STATE_EXPANDABLE     = 0x00800000;  // An item that can be expanded, such as a tree item with children    
  const unsigned long  EXT_STATE_MODAL          = 0x01000000;  // Must do something with control before leaving it    
  const unsigned long  EXT_STATE_MULTI_LINE     = 0x02000000;  // Edit control that can take multiple lines    
  const unsigned long  EXT_STATE_SENSITIVE      = 0x04000000;  // No explanation given    
  const unsigned long  EXT_STATE_SHOWING        = 0x10000000;  // This object and all of it's ancestors are visible    
  const unsigned long  EXT_STATE_SINGLE_LINE    = 0x20000000;  // This text object can only contain 1 line of text    
  const unsigned long  EXT_STATE_TRANSIENT      = 0x40000000;  // Tells accessibility aid "Don't add event listener - this object doesn't generate any". For example, could be used with higher level containers.    
  const unsigned long  EXT_STATE_VERTICAL       = 0x80000000;  // Especially used for sliders and scrollbars  

/**
 * Relation Types -- most of these come from ATK's atkrelationtype.h
 * RELATION_NULL:
 * RELATION_CONTROLLED_BY:    Controlled by one or more target objects.
 * RELATION_CONTROLLER_FOR:   Controller for one or more target objects.
 * RELATION_LABEL_FOR:        Label for one or more target objects.
 * RELATION_LABELLED_BY:      Labelled by one or more target objects.
 * RELATION_MEMBER_OF:        Member of a group of one or more target objects.
 * RELATION_NODE_CHILD_OF:    Cell in a treetable which is displayed because a
 *                            cell in the same col is expanded & identifies it.
 * RELATION_FLOWS_TO:         Has content that flows logically to another
 *                            object in a sequential way, e.g. text flow.
 * RELATION_FLOWS_FROM:       Has content that flows logically from another
 *                            object in a sequential way, e.g. text flow.
 * RELATION_SUBWINDOW_OF:     Subwindow attached to a component but otherwise 
 *                            not connected in the UI hierarchy to that component.
 * RELATION_EMBEDS:           Visually embeds another object's content, i.e.
 *                            this object's content flows around another's content.
 * RELATION_EMBEDDED_BY:      Inverse of RELATION_EMBEDS; this object's content
 *                            is visually embedded in another object.
 * RELATION_POPUP_FOR:        Popup for another object.
 * RELATION_PARENT_WINDOW_OF: Parent window of another object.
 * RELATION_DEFAULT_BUTTON:   Part of a form/dialog with a related default button.
 * RELATION_DESCRIBED_BY:     Described by one or more target objects.
 * RELATION_DESCRIPTION_FOR:  Description for one or more target objects.
 * RELATION_LAST_DEFINED:
 */

  const unsigned long RELATION_NUL = 0x00;               // ATK_RELATION_NUL
  const unsigned long RELATION_CONTROLLED_BY = 0x01;     // ATK_RELATION_CONTROLLED_BY
  const unsigned long RELATION_CONTROLLER_FOR = 0x02;    // ATK_RELATION_CONTROLLER_FOR
  const unsigned long RELATION_LABEL_FOR = 0x03;         // ATK_RELATION_LABEL_FOR
  const unsigned long RELATION_LABELLED_BY = 0x04;       // ATK_RELATION_LABELLED_BY
  const unsigned long RELATION_MEMBER_OF = 0x05;         // ATK_RELATION_MEMBER_OF
  const unsigned long RELATION_NODE_CHILD_OF = 0x06;     // ATK_RELATION_NODE_CHILD_OF
  const unsigned long RELATION_FLOWS_TO = 0x07;          // ATK_RELATION_FLOWS_TO
  const unsigned long RELATION_FLOWS_FROM = 0x08;        // ATK_RELATION_FLOWS_FROM
  const unsigned long RELATION_SUBWINDOW_OF = 0x09;      // ATK_RELATION_SUBWINDOW_OF
  const unsigned long RELATION_EMBEDS = 0x0a;            // ATK_RELATION_EMBEDS
  const unsigned long RELATION_EMBEDDED_BY = 0x0b;       // ATK_RELATION_EMBEDDED_BY
  const unsigned long RELATION_POPUP_FOR = 0x0c;         // ATK_RELATION_POPUP_FOR
  const unsigned long RELATION_PARENT_WINDOW_OF = 0x0d;  // ATK_RELATION_PARENT_WINDOW_OF
  const unsigned long RELATION_DESCRIBED_BY = 0x0e;      // ATK_RELATION_DESCRIBED_BY
  const unsigned long RELATION_DESCRIPTION_FOR = 0x0f;   // ATK_RELATION_DESCRIPTION_FOR
  const unsigned long RELATION_DEFAULT_BUTTON = 0x4000;  // MSAA only, no ATK relation

%{C++
#ifdef MOZ_ACCESSIBILITY_ATK

  enum { RELATION_LAST_DEFINED = 14U };

/**
 * The following nsIAccessible roles are translated to ATK_ROLE_UNKNOWN
 * 
 *  ROLE_TITLEBAR, ROLE_SOUND, ROLE_CURSOR, ROLE_CARET, ROLE_BORDER,
 *  ROLE_GROUPING, ROLE_EQUATION, ROLE_COLUMN, ROLE_ROW, ROLE_LINK,
 *  ROLE_WHITESPACE, ROLE_CLOCK, ROLE_IPADDRESS, ROLE_NOTHING
 *
 *  ROLE_GRIP
 *    The object represents a special mouse pointer, which allows a user to
 *    manipulate user interface elements such as windows.
 *
 *  ROLE_HELPBALLOON
 *    The object displays a Help topic in the form of a ToolTip or Help balloon.
 *
 *  ROLE_PROPERTYPAGE
 *    The object represents a property sheet.
 *
 *  ROLE_INDICATOR
 *    The object represents an indicator, such as a pointer graphic pointing to
 *    the current item.
 *
 *  ROLE_HOTKEYFIELD
 *    The object represents a hot-key field that allow the user to enter a
 *    sequence of keystroke.
 *
 * The following ATK roles have no corresponding nsIAccessible roles. Perhaps
 * there are not these types of widget/control in Mozilla, so don't need these
 * ATK roles? Or need add some of them?
 *
 *   ATK_ROLE_ARROW
 *     An arrow in one of the four cardinal directions.
 *
 *   ATK_ROLE_INTERNAL_FRAME
 *     A frame-like object that is clipped by a desktop pane.
 * 
 *  ATK_ROLE_ACCEL_LABEL, ATK_ROLE_CANVAS, ATK_ROLE_CHECK_MENU_ITEM,
 *   ATK_ROLE_COLOR_CHOOSER, ATK_ROLE_DATE_EDITOR, ATK_ROLE_DESKTOP_ICON,
 *   ATK_ROLE_DESKTOP_FRAME, ATK_ROLE_DIRECTORY_PANE, ATK_ROLE_FILE_CHOOSER,
 *   ATK_ROLE_FILLER, ATK_ROLE_FONT_CHOOSER, ATK_ROLE_GLASS_PANE,
 *  ATK_ROLE_HTML_CONTAINER, ATK_ROLE_ICON, ATK_ROLE_LAYERED_PANE,
 *   ATK_ROLE_POPUP_MENU, ATK_ROLE_OPTION_PANE, ATK_ROLE_PASSWORD_TEXT,
 *  ATK_ROLE_RADIO_MENU_ITEM, ATK_ROLE_ROOT_PANE, ATK_ROLE_SCROLL_PANE,
 *  ATK_ROLE_SPLIT_PANE, ATK_ROLE_TEAR_OFF_MENU_ITEM, ATK_ROLE_TERMINAL,
 *  ATK_ROLE_TOGGLE_BUTTON, ATK_ROLE_TREE_TABLE, ATK_ROLE_VIEWPORT, ATK_ROLE_LABEL
 *
 * Important:
 * Following value should keep synchronization with the definitions in atk.h
 */
  enum { ROLE_TITLEBAR = 66U };    // ATK_ROLE_UNKNOWN
  enum { ROLE_MENUBAR = 33U };     // ATK_ROLE_MENU_BAR
  enum { ROLE_SCROLLBAR = 47U };   // ATK_ROLE_SCROLL_BAR
  enum { ROLE_GRIP = 66U };        // ATK_ROLE_UNKNOWN
  enum { ROLE_SOUND = 66U };       // ATK_ROLE_UNKNOWN
  enum { ROLE_CURSOR = 66U };      // ATK_ROLE_UNKNOWN
  enum { ROLE_CARET = 66U };       // ATK_ROLE_UNKNOWN
  enum { ROLE_ALERT = 2U };        // ATK_ROLE_ALERT
  enum { ROLE_WINDOW = 68U };      // ATK_ROLE_WINDOW
  // An object used for drawing custom user interface elements
  enum { ROLE_CLIENT = 18U };      // ATK_ROLE_DRAWING_AREA
  enum { ROLE_MENUPOPUP = 32U };   // ATK_ROLE_MENU
  enum { ROLE_MENUITEM = 34U };    // ATK_ROLE_MENU_ITEM
  enum { ROLE_TOOLTIP = 63U };     // ATK_ROLE_TOOL_TIP
  // The object represents a main window for a application
  enum { ROLE_APPLICATION = 73U }; // ATK_ROLE_APPLICATION
  // The object represents a document window, only for MDI windows
  enum { ROLE_DOCUMENT = 80U };    // ATK_ROLE_DOCUMENT_FRAME
  enum { ROLE_PANE = 38U };        // ATK_ROLE_PANEL
  enum { ROLE_CHART = 78U };       // ATK_ROLE_CHART
  enum { ROLE_DIALOG = 16U };      // ATK_ROLE_DIALOG
  enum { ROLE_BORDER = 66U };      // ATK_ROLE_UNKNOWN
  enum { ROLE_GROUPING = 38U };    // ATK_ROLE_PANEL
  enum { ROLE_SEPARATOR = 49U };   // ATK_ROLE_SEPARATOR
  enum { ROLE_TOOLBAR = 62U };     // ATK_ROLE_TOOL_BAR
  enum { ROLE_STATUSBAR = 53U };   // ATK_ROLE_STATUSBAR
  enum { ROLE_TABLE = 54U };       // ATK_ROLE_TABLE
  // Or ATK_ROLE_TABLE_COLUMN_HEADER?
  enum { ROLE_COLUMNHEADER = 10U };// ATK_ROLE_COLUMN_HEADER
  // Or ATK_ROLE_TABLE_ROW_HEADER ?
  enum { ROLE_ROWHEADER = 46U };   // ATK_ROLE_ROW_HEADER
  enum { ROLE_COLUMN = 66U };      // ATK_ROLE_UNKNOWN
  enum { ROLE_ROW = 66U };         // ATK_ROLE_UNKNOWN
  enum { ROLE_CELL = 55U };        // ATK_ROLE_TABLE_CELL
  enum { ROLE_HELPBALLOON = 66U }; // ATK_ROLE_UNKNOWN
  // The object represents a cartoon-like graphic object
  enum { ROLE_CHARACTER = 26U };   // ATK_ROLE_IMAGE
  enum { ROLE_LIST = 30U };        // ATK_ROLE_LIST
  enum { ROLE_LISTITEM = 31U };    // ATK_ROLE_LIST_ITEM
  // The object represents an outline or tree structure
  enum { ROLE_OUTLINE = 64U };     // ATK_ROLE_TREE
  // The object represents an item in an outline or tree structure
  enum { ROLE_OUTLINEITEM = 31U }; // ATK_ROLE_LIST_ITEM
  enum { ROLE_PAGETAB = 36U };     // ATK_ROLE_PAGE_TAB
  enum { ROLE_PROPERTYPAGE = 66U };// ATK_ROLE_UNKNOWN
  enum { ROLE_INDICATOR = 66U };   // ATK_ROLE_UNKNOWN
  enum { ROLE_GRAPHIC = 26U };     // ATK_ROLE_IMAGE
  // Read-only text, can't be modified or selected
  enum { ROLE_STATICTEXT = 50000U };  // No matching ATK role, we will strip out
  enum { ROLE_TEXT_LEAF = 50000U };   // No matching ATK role, we will strip out
  enum { ROLE_TEXT_CONTAINER = 60U }; // ATK_ROLE_TEXT
  enum { ROLE_PUSHBUTTON = 42U };  // ATK_ROLE_PUSH_BUTTON
  enum { ROLE_CHECKBUTTON = 7U };  // ATK_ROLE_CHECK_BOX
  enum { ROLE_RADIOBUTTON = 43U }; // ATK_ROLE_RADIO_BUTTON
  enum { ROLE_COMBOBOX = 11U };    // ATK_ROLE_COMBO_BOX
  // Just represents the calender control
  enum { ROLE_DROPLIST = 5U };     // ATK_ROLE_CALENDAR
  enum { ROLE_PROGRESSBAR = 41U }; // ATK_ROLE_PROGRESS_BAR
  enum { ROLE_DIAL = 15U };        // ATK_ROLE_DIAL
  enum { ROLE_HOTKEYFIELD = 66U }; // ATK_ROLE_UNKNOWN
  enum { ROLE_SLIDER = 50U };      // ATK_ROLE_SLIDER
  enum { ROLE_SPINBUTTON = 52U };  // ATK_ROLE_SPIN_BUTTON
  enum { ROLE_DIAGRAM = 26U };     // ATK_ROLE_IMAGE
  enum { ROLE_ANIMATION = 3U };    // ATK_ROLE_ANIMATION
  enum { ROLE_EQUATION = 66U };    // ATK_ROLE_UNKNOWN
  enum { ROLE_BUTTONDROPDOWN = 42U }; // ATK_ROLE_PUSH_BUTTON
  enum { ROLE_BUTTONMENU = 42U };  // ATK_ROLE_PUSH_BUTTON
  // Represents a button that drops down a grid
  enum { ROLE_BUTTONDROPDOWNGRID = 66U }; // ATK_ROLE_UNKNOWN
  enum { ROLE_WHITESPACE = 66U };  // ATK_ROLE_UNKNOWN
  enum { ROLE_PAGETABLIST = 37U }; // ATK_ROLE_PAGE_TAB_LIST
  enum { ROLE_CLOCK = 66U };       // ATK_ROLE_UNKNOWN
  // Represents a button on the toolbar that has a drop-down list icon
  // directly adjacent to the button
  enum { ROLE_SPLITBUTTON = 42U }; // ATK_ROLE_PUSH_BUTTON
  enum { ROLE_IPADDRESS = 66U };   // ATK_ROLE_UNKNOWN
  enum { ROLE_NOTHING = 66U };     // ATK_ROLE_UNKNOWN
  // Represent top level window
  enum { ROLE_FRAME = 22U };       // ATK_ROLE_FRAME

  // Other roles from atk.h
  enum { ROLE_ACCEL_LABEL = 1U };          // ATK_ROLE_ACCEL_LABEL
  enum { ROLE_ARROW  = 4U };               // ATK_ROLE_ARROW
  enum { ROLE_CANVAS = 6U };               // ATK_ROLE_CANVAS
  enum { ROLE_CHECK_MENU_ITEM = 8U };      // ATK_ROLE_CHECK_MENU_ITEM
  enum { ROLE_COLOR_CHOOSER  = 9U };       // ATK_ROLE_COLOR_CHOOSER
  enum { ROLE_DATE_EDITOR = 12U };         // ATK_ROLE_DATE_EDITOR
  enum { ROLE_DESKTOP_ICON = 13U };        // ATK_ROLE_DESKTOP_ICON
  enum { ROLE_DESKTOP_FRAME = 14U };       // ATK_ROLE_DESKTOP_FRAME
  enum { ROLE_DIRECTORY_PANE = 17U };      // ATK_ROLE_DIRECTORY_PANE
  enum { ROLE_FILE_CHOOSER = 19U};         // ATK_ROLE_FILE_CHOOSER
  enum { ROLE_FILLER = 20U };              // ATK_ROLE_FILLER
  enum { ROLE_FONT_CHOOSER = 21U };        // ATK_ROLE_FONT_CHOOSER
  enum { ROLE_GLASS_PANE = 23U };          // ATK_ROLE_GLASS_PANE
  enum { ROLE_HTML_CONTAINER = 24U };      // ATK_ROLE_HTML_CONTAINER
  enum { ROLE_ICON = 25U };                // ATK_ROLE_ICON
  enum { ROLE_INTERNAL_FRAME = 27U };      // ATK_ROLE_INTERNAL_FRAME
  enum { ROLE_LABEL = 28U };               // ATK_ROLE_LABEL
  enum { ROLE_LAYERED_PANE = 29U };        // ATK_ROLE_LAYERED_PANE
  enum { ROLE_OPTION_PANE = 35U };         // ATK_ROLE_OPTION_PANE
  enum { ROLE_PASSWORD_TEXT = 39U };       // ATK_ROLE_PASSWORD_TEXT
  enum { ROLE_POPUP_MENU = 40U };          // ATK_ROLE_POPUP_MENU
  enum { ROLE_RADIO_MENU_ITEM = 44U };     // ATK_ROLE_RADIO_MENU_ITEM
  enum { ROLE_ROOT_PANE = 45U };           // ATK_ROLE_ROOT_PANE
  enum { ROLE_SCROLL_PANE = 48U };         // ATK_ROLE_SCROLL_PANE
  enum { ROLE_SPLIT_PANE = 51U };          // ATK_ROLE_SPLIT_PANE
  enum { ROLE_TABLE_COLUMN_HEADER = 56U }; // ATK_ROLE_TABLE_COLUMN_HEADER
  enum { ROLE_TABLE_ROW_HEADER = 57U };    // ATK_ROLE_TABLE_ROW_HEADER
  enum { ROLE_TEAR_OFF_MENU_ITEM = 58U };  // ATK_ROLE_TEAR_OFF_MENU_ITEM
  enum { ROLE_TERMINAL = 59U };            // ATK_ROLE_TERMINAL
  enum { ROLE_TOGGLE_BUTTON = 61U };       // ATK_ROLE_TOGGLE_BUTTON
  enum { ROLE_TREE_TABLE = 65U };          // ATK_ROLE_TREE_TABLE
  enum { ROLE_VIEWPORT = 67U };            // ATK_ROLE_VIEWPORT
  enum { ROLE_HEADER = 69U };              // ATK_ROLE_HEADER
  enum { ROLE_FOOTER = 70U };              // ATK_ROLE_FOOTER
  enum { ROLE_PARAGRAPH = 71U };           // ATK_ROLE_PARAGRAPH
  enum { ROLE_RULER = 72U };               // ATK_ROLE_RULER
  enum { ROLE_AUTOCOMPLETE = 74U };        // ATK_ROLE_AUTOCOMPLETE
  enum { ROLE_EDITBAR = 75U };             // ATK_ROLE_EDITBAR
  enum { ROLE_EMBEDDED = 76U };            // ATK_ROLE_EMBEDDED
  enum { ROLE_ENTRY = 77U };               // ATK_ROLE_ENTRY
  enum { ROLE_CAPTION = 79U };             // ATK_ROLE_CAPTION
  enum { ROLE_DOCUMENT_FRAME = 80U };      // ATK_ROLE_DOCUMENT_FRAME
  enum { ROLE_HEADING = 81U };             // ATK_ROLE_HEADING
  enum { ROLE_PAGE = 82U };                // ATK_ROLE_PAGE
  enum { ROLE_SECTION = 83U };             // ATK_ROLE_SECTION
  enum { ROLE_REDUNDANT_OBJECT = 84U };    // ATK_ROLE_REDUNDANT_OBJECT
  enum { ROLE_FORM = 85U };                // ATK_ROLE_FORM
  enum { ROLE_LINK = 86U };                // ATK_ROLE_LINK
  enum { ROLE_IME = 87U };                 // ATK_ROLE_INPUT_METHOD_WINDOW
#else
// MSAA Roles - only one per nsIAccessible or IAccessible
  enum { ROLE_TITLEBAR = 1U };
  enum { ROLE_MENUBAR = 2U };
  enum { ROLE_SCROLLBAR = 3U };
  enum { ROLE_GRIP = 4U };
  enum { ROLE_SOUND = 5U };
  enum { ROLE_CURSOR = 6U };
  enum { ROLE_CARET = 7U };
  enum { ROLE_ALERT = 8U };
  enum { ROLE_WINDOW = 9U };
  enum { ROLE_CLIENT = 10U };
  enum { ROLE_MENUPOPUP = 11U };
  enum { ROLE_MENUITEM = 12U };
  enum { ROLE_RADIO_MENU_ITEM = 12U }; // Same as ROLE_MENUITEM
  enum { ROLE_CHECK_MENU_ITEM = 12U }; // Same as ROLE_MENUITEM
  enum { ROLE_TOOLTIP = 13U };
  enum { ROLE_APPLICATION = 14U };
  enum { ROLE_DOCUMENT = 15U };
  enum { ROLE_PANE = 16U };
  enum { ROLE_CHART = 17U };
  enum { ROLE_DIALOG = 18U };
  enum { ROLE_BORDER = 19U };
  enum { ROLE_GROUPING = 20U };
  enum { ROLE_SEPARATOR = 21U };
  enum { ROLE_TOOLBAR = 22U };
  enum { ROLE_STATUSBAR = 23U };
  enum { ROLE_TABLE = 24U };
  enum { ROLE_COLUMNHEADER = 25U };
  enum { ROLE_ROWHEADER = 26U };
  enum { ROLE_COLUMN = 27U };
  enum { ROLE_ROW = 28U };
  enum { ROLE_CELL = 29U };
  enum { ROLE_LINK = 30U };
  enum { ROLE_HELPBALLOON = 31U };
  enum { ROLE_CHARACTER = 32U };
  enum { ROLE_LIST = 33U };
  enum { ROLE_LISTITEM = 34U };
  enum { ROLE_OUTLINE = 35U };
  enum { ROLE_TREE_TABLE = 35U }; // Same as ROLE_OUTLINE
  enum { ROLE_OUTLINEITEM = 36U };
  enum { ROLE_PAGETAB = 37U };
  enum { ROLE_PROPERTYPAGE = 38U };
  enum { ROLE_INDICATOR = 39U };
  enum { ROLE_GRAPHIC = 40U };
  enum { ROLE_STATICTEXT = 41U };
  enum { ROLE_TEXT_LEAF = 42U };
  enum { ROLE_PUSHBUTTON = 43U };
  enum { ROLE_CHECKBUTTON = 44U };
  enum { ROLE_RADIOBUTTON = 45U };
  enum { ROLE_COMBOBOX = 46U };
  enum { ROLE_DROPLIST = 47U };
  enum { ROLE_PROGRESSBAR = 48U };
  enum { ROLE_DIAL = 49U };
  enum { ROLE_HOTKEYFIELD = 50U };
  enum { ROLE_SLIDER = 51U };
  enum { ROLE_SPINBUTTON = 52U };
  enum { ROLE_DIAGRAM = 53U };
  enum { ROLE_ANIMATION = 54U };
  enum { ROLE_EQUATION = 55U };
  enum { ROLE_BUTTONDROPDOWN = 56U };
  enum { ROLE_BUTTONMENU = 57U };
  enum { ROLE_BUTTONDROPDOWNGRID = 58U };
  enum { ROLE_WHITESPACE = 59U };
  enum { ROLE_PAGETABLIST = 60U };
  enum { ROLE_CLOCK = 61U };
  enum { ROLE_SPLITBUTTON = 62U };
  enum { ROLE_IPADDRESS = 63U };
  enum { ROLE_NOTHING = 4294967295U };

// Make up for ATK roles that we don't have in MSAA
// When in doubt map them to ROLE_NOTHING so that the role string is exposed
  enum { ROLE_ICON = ROLE_NOTHING };
  enum { ROLE_PASSWORD_TEXT = 1000U };
  enum { ROLE_AUTOCOMPLETE = ROLE_COMBOBOX };
  enum { ROLE_EDITBAR = ROLE_NOTHING };
  enum { ROLE_EMBEDDED = ROLE_NOTHING };
  enum { ROLE_ENTRY = 1001U };
  enum { ROLE_CAPTION = ROLE_NOTHING };
  enum { ROLE_DOCUMENT_FRAME = ROLE_NOTHING };
  enum { ROLE_HEADING = ROLE_NOTHING };
  enum { ROLE_PAGE = ROLE_NOTHING };
  enum { ROLE_SECTION = ROLE_NOTHING };
  enum { ROLE_REDUNDANT_OBJECT = ROLE_NOTHING };
  enum { ROLE_HTML_CONTAINER = ROLE_NOTHING };
  enum { ROLE_FORM = ROLE_NOTHING };
  enum { ROLE_PARAGRAPH = ROLE_NOTHING };
  enum { ROLE_TEXT_CONTAINER = ROLE_NOTHING };
  enum { ROLE_LABEL = ROLE_STATICTEXT };

// MSAA relationship extensions to accNavigate
  enum { NAVRELATION_CONTROLLED_BY = 0x1000 };
  enum { NAVRELATION_CONTROLLER_FOR = 0x1001 };
  enum { NAVRELATION_LABEL_FOR = 0x1002 };
  enum { NAVRELATION_LABELLED_BY = 0x1003 };
  enum { NAVRELATION_MEMBER_OF = 0x1004 };
  enum { NAVRELATION_NODE_CHILD_OF = 0x1005 };
  enum { NAVRELATION_FLOWS_TO = 0x1006 };
  enum { NAVRELATION_FLOWS_FROM = 0x1007 };
  enum { NAVRELATION_SUBWINDOW_OF = 0x1008 };
  enum { NAVRELATION_EMBEDS = 0x1009 };
  enum { NAVRELATION_EMBEDDED_BY = 0x100a };
  enum { NAVRELATION_POPUP_FOR = 0x100b };
  enum { NAVRELATION_PARENT_WINDOW_OF = 0x100c };
  enum { NAVRELATION_DEFAULT_BUTTON = 0x100d };
  enum { NAVRELATION_DESCRIBED_BY = 0x100e };
  enum { NAVRELATION_DESCRIPTION_FOR = 0x100f };

#endif
%}
};
