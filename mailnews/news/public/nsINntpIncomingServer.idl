/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIFileSpec;
interface nsIMsgNewsFolder;
interface nsINNTPProtocol;
interface nsIURI;
interface nsIMsgWindow;

[scriptable, uuid(6200a8d1-21ac-4d28-926f-f9d7ea9d7bf7)]
interface nsINntpIncomingServer : nsISupports {
    /* the on-disk path to the newsrc file for this server */
    attribute nsIFileSpec newsrcFilePath;

    /* the newsrc root path (the directories all the newsrc files live) */
    attribute nsIFileSpec newsrcRootPath;
    
    /* ask the user before downloading more than maxArticles? */
    attribute boolean notifyOn;

    /* the max articles to download */
    attribute long maxArticles;

    /* when we don't download all, do we mark the rest read? */
    attribute boolean markOldRead;

    /* abbreviate the newsgroup names in the folder pane? */
    attribute boolean abbreviate;

    /* do we use a single login per server or do we login per group */
    attribute boolean singleSignon;

    /** the server charset and it may be needed to display newsgroup folder
     *  names correctly 
     **/
    attribute ACString charset;

    /* the server keeps track of all the newsgroups we are subscribed to */
    void addNewsgroup(in AString name);
    void removeNewsgroup(in AString name);

    void writeNewsrcFile();

    attribute boolean newsrcHasChanged;

    attribute long maximumConnectionsNumber;

    readonly attribute long numGroupsNeedingCounts;
    readonly attribute nsISupports firstGroupNeedingCounts;

    void displaySubscribedGroup(in nsIMsgNewsFolder msgFolder,
                                in long firstMessage, in long lastMessage,
                                in long totalMessages);


    void getNntpConnection(in nsIURI url, in nsIMsgWindow window,
                           out nsINNTPProtocol aNntpConnection);
    void removeConnection(in nsINNTPProtocol aNntpConnection);

    /* used for auto subscribing */
    boolean containsNewsgroup(in AUTF8String name);
    void subscribeToNewsgroup(in AUTF8String name);

    /* used for the subscribe dialog.
       name is encoded in |charset|  (attribute declared above) */
    [noscript] void addNewsgroupToList(in string name);

    attribute boolean supportsExtensions;
    void addExtension(in string extension);
    boolean queryExtension(in string extension);

    attribute boolean postingAllowed;
    attribute boolean pushAuth;
    attribute unsigned long lastUpdatedTime;
    
    void addPropertyForGet(in string name, in string value);
    string queryPropertyForGet(in string name);
    
    void addSearchableGroup(in AString name);
    boolean querySearchableGroup(in AString name);
    
    void addSearchableHeader(in string headerName);
    boolean querySearchableHeader(in string headerName);

    nsIMsgNewsFolder findGroup(in AUTF8String name);

    readonly attribute AUTF8String firstGroupNeedingExtraInfo;
    void setGroupNeedsExtraInfo(in AUTF8String name, in boolean needsExtraInfo);

    void groupNotFound(in nsIMsgWindow window, in AString group,
                       in boolean opening);

    void setPrettyNameForGroup(in AString name, in AString prettyName);

    // user has successfully authenticated in this session.
    // Used to decide whether to throw away the user's password
    attribute boolean userAuthenticated; 
};
