/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsISupportsArray.idl"
interface nsIMsgWindow;
interface nsIUrlListener;
interface nsIMsgDatabase;
interface nsIMsgDBHdr;
interface nsIMsgFolder;
interface nsIMsgCopyServiceListener;

[ptr] native nsLocalFolderScanState(nsLocalFolderScanState);

%{C++
/* flags for markMsgsOnPop3Server */
#define POP3_NONE	0
#define POP3_DELETE	1
#define POP3_FETCH_BODY	2
#define POP3_FORCE_DEL	3

struct nsLocalFolderScanState;

%}

[scriptable, uuid(260398bd-9152-4b10-af4e-3126dcd37837)]
interface nsIMsgLocalMailFolder : nsISupports {
  /**
   * set the default flags on the subfolders of this folder, such as
   * Drafts, Templates, etc
   * you should bitwise OR all the flags all mailboxes you want to flag,
   * this function will be smart and find the right names.
   * like MSG_FOLDER_FLAG_INBOX | MSG_FOLDER_FLAG_DRAFTS | etc
   */
  void setFlagsOnDefaultMailboxes(in unsigned long flags);

  /* 
   * This will return null if the db is out of date
   */
  nsIMsgDatabase getDatabaseWOReparse();

  /*
   * This will kick off a url to reparse the db if it's out of date.
   * If aReparseUrlListener isn ull, folder will use itself as the listener
   */
  nsIMsgDatabase getDatabaseWithReparse(in nsIUrlListener aReparseUrlListener, in nsIMsgWindow aMsgWindow);
  void parseFolder(in nsIMsgWindow aMsgWindow, in nsIUrlListener listener);
  void copyFolderLocal(in nsIMsgFolder srcFolder, in boolean isMove, in nsIMsgWindow msgWindow, in nsIMsgCopyServiceListener listener );
  void copyAllSubFolders(in nsIMsgFolder srcFolder, in nsIMsgWindow msgWindow, in nsIMsgCopyServiceListener listener );
  void onCopyCompleted(in nsISupports aSrcSupport, in boolean aMoveCopySucceeded);
  attribute boolean checkForNewMessagesAfterParsing;
  [noscript] void markMsgsOnPop3Server(in nsISupportsArray aMessages, in PRInt32 aMark);
  void refreshSizeOnDisk(); // file size on disk has possibly changed - update and notify

  // this adds a message to the end of the folder, parsing it as it goes, and
  // applying filters, if applicable.
  void addMessage(in string aMessage);
  /**
   * functions for updating the UI while running DownloadMessagesForOffline:
   * delete the old message before adding its newly downloaded body, and
   * select the new message after it has replaced the old one
   */
  void deleteDownloadMsg(in nsIMsgDBHdr aMsgHdr, out boolean aDoSelect);
  void selectDownloadMsg();
  void notifyDelete();

  /**
   * functions for grubbing thru a folder to find the Uidl for a
   * given msgDBHdr
   */
  [noscript] void getFolderScanState(in nsLocalFolderScanState aState);
  [noscript] void getUidlFromFolder(in nsLocalFolderScanState aState, in nsIMsgDBHdr aMsgHdr);

  boolean warnIfLocalFileTooBig(in nsIMsgWindow aWindow);
};
