/* -*- Mode: idl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIPrompt.idl"


[scriptable, uuid(2247c280-7f7f-11d5-9daa-994d49414e7c)]
interface nsIMsgProcessReport : nsISupports {

  attribute boolean proceeded;
  attribute nsresult error;
  attribute wstring message;
  
  void reset();
};

[scriptable, uuid(2247c281-7f7f-11d5-9daa-994d49414e7c)]
interface nsIMsgSendReport : nsISupports {

  const long process_Current = -1;
  const long process_BuildMessage = 0;
  const long process_NNTP = 1;
  const long process_SMTP = 2;
  const long process_Copy = 3;
  const long process_FCC = 4;
  
  attribute long deliveryMode;      /* see nsMsgDeliverMode in nsIMsgSend.idl for valid value */
  attribute long currentProcess;

  void reset();
  
  void setProceeded(in long process, in boolean proceeded);
  void setError(in long process, in nsresult error, in boolean overwriteError);
  void setMessage(in long process, in wstring message, in boolean overwriteMessage);
  
  nsIMsgProcessReport getProcessReport(in long process);
  
  /* Display Report will ananlyze data collected during the send and will show the most appropriate error.
     Also it will return the error code. In case of no error or if the error has been canceld, it will return
     NS_OK.
  */
  nsresult displayReport(in nsIPrompt prompt, in boolean showErrorOnly, in boolean dontShowReportTwice);
};
