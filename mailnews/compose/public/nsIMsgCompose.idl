/* -*- Mode: idl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   David Bienvenu - bienvenu@nventure.com
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIMsgCompFields.idl"
#include "nsIMsgComposeParams.idl"

%{C++
#include "nsString.h"
%}

interface nsIMsgSend;
interface nsIMsgIdentity;
interface nsIMsgProgress;
interface nsIDOMWindowInternal;
interface nsIDOMWindow;
interface nsIDOMNode;
interface nsIEditor;
interface nsIMsgWindow;

typedef long MSG_ComposeSaveType;

[scriptable, uuid(6953e50a-7531-11d3-85fe-006008948010)]
interface nsIMsgCompSaveType {
    const long File     = 0;
    const long Template = 1;
    const long Draft    = 2;
};

typedef long MSG_DeliverMode;

[scriptable, uuid(a9f27dd7-8f89-4de3-8fbf-41b789c16ee5)]
interface nsIMsgCompDeliverMode {
    const long Now = 0;
    const long Later = 1;
    const long Save = 2;
    const long SaveAs = 3;
    const long SaveAsDraft = 4;
    const long SaveAsTemplate = 5;
    const long SendUnsent = 6;
    const long AutoSaveAsDraft = 7;
};

[scriptable, uuid(f38ea280-e090-11d3-a449-e3153319347c)]
interface nsIMsgCompSendFormat {
    const long AskUser = 4;     /* Hack: Bug 44512. If this is 0 and passed
                                   as results.action to the askSendFormat
                                   dialog, the args object gets destroyed.*/
    const long PlainText = 1;
    const long HTML = 2;
    const long Both = 3;
};

[scriptable, uuid(9638af92-1dd1-11b2-bef1-ca5fee0abc62)]
interface nsIMsgCompConvertible/*ToTXT*/ {
    const long Plain = 1;  // Like 4.x: Only <html>, <p>, <br>, ...
    const long Yes = 2;  // *Minor* alterations of the look: <ol>, <dd>, ...
    const long Altering = 3;  /* Look altered: <strong>, <i>, <h1>, ...
                                 Can be expressed in plaintext, but not in
                                 the way it looked in the HTML composer. */
    const long No = 4;  /* Will lose data: <font>, ...
                           Really *requires* visual formatting or
                           is not supported by our HTML->TXT converter. */
    /* The values here have meaning, they are "levels":
       convertible({a; b}) == max(convertible({a}), convertible({b}))
       must be true, i.e. the higher value counts. */
};

[scriptable, uuid(6ce49b2a-07dc-4783-b307-9a355423163f)]
interface nsIMsgComposeStateListener : nsISupports
{
	/* ... */
	void        NotifyComposeFieldsReady();
	void        ComposeProcessDone(in nsresult aResult);
	void        SaveInFolderDone(in string folderName);
	void        NotifyComposeBodyReady();
};

[scriptable, uuid(061aae23-7e0a-4818-9a15-1b5db3ceb7f4)]
interface nsIMsgComposeNotificationType
{
    const long ComposeFieldsReady = 0;
    const long ComposeProcessDone = 1;
    const long SaveInFolderDone   = 2;
    const long ComposeBodyReady   = 3;
};

native nsString(nsString);
[ref] native nsStringRef(nsString);

/* recycling listener interface */
[scriptable, uuid(0b28cc56-1dd2-11b2-bbe4-99e6a314f8ba)]
interface nsIMsgComposeRecyclingListener : nsISupports {
  void onClose();
  void onReopen(in nsIMsgComposeParams params);
};


[scriptable, uuid(bd6a81fc-e18e-413c-8086-1481b67447f4)]
interface nsIMsgCompose : nsISupports {

  /* ... */
  void Initialize(in nsIDOMWindowInternal aWindow, in nsIMsgComposeParams aParams); 

  /* ... */
  void SetDocumentCharset(in string charset);
  
  /* ... */
  void RegisterStateListener(in nsIMsgComposeStateListener stateListener);

  /* ... */
  void UnregisterStateListener(in nsIMsgComposeStateListener stateListener);

  /* ... */
  void SendMsg(in MSG_DeliverMode deliverMode, in nsIMsgIdentity identity, in string accountKey, in nsIMsgWindow aMsgWindow, in nsIMsgProgress progress);

  /* ... */
  void CloseWindow(in boolean reclycleIt);

  /* ... */
  void abort();
    
  /* ... */
  void quoteMessage(in string msgURI);

  /*
    AttachmentPrettyName will return only the leafName if the it's a file URL.
    It will also convert the filename to Unicode assuming it's in  the file system 
    charset. In case of URL, |charset| parameter will be used in the conversion.
    This UI utility function should probably go into it's own class
  */
  AUTF8String AttachmentPrettyName(in string url, in string charset);
    
  /*
    CheckAndPopulateRecipients will perform several tasks:
      1) if populateMailList is true, it will populate mailing presents in the compose field
      2) if returnNoHTMLRecipients is true, build a list of non HTML recipient
      3) return the lowest common format preferred by recipients (unknown, plaintext or html)
  */
  unsigned long CheckAndPopulateRecipients(in boolean populateMailList, in boolean returnNonHTMLRecipients, out wstring nonHTMLRecipients);
  
  /* bodyConvertible: The level of "convertibility" to plaintext
   * @return a value from nsIMsgCompConvertible.
  */
  long bodyConvertible();

  /* SetSignature: will replace the curr.
  */
  void SetSignature(in nsIMsgIdentity identity);

  /* Check if the composing mail headers (and identity) can be converted to a mail charset.
  */
  boolean checkCharsetConversion(in nsIMsgIdentity identity, out string fallbackCharset);

  /* Retreive the message send object */
  readonly attribute nsIMsgSend messageSend;
  
	/* ... */
  readonly attribute nsIEditor editor;

	/* ... */
  readonly attribute nsIDOMWindowInternal domWindow;

	/* ... */
  readonly attribute nsIMsgCompFields compFields;
    
	/* ... */
  readonly attribute boolean composeHTML;

	/* ... */
  attribute MSG_ComposeType type;

	/* ... */
  readonly attribute long wrapLength;

  /* by reading this value, you can determine if yes or not the message has been mofified
     by the user. When you set this value to false, you reset the modification count
     of the body to 0 (clean).
  */
  attribute boolean bodyModified;


  /**
   *  Init the editor THIS USED TO BE [noscript]
   *  Now, this is called after editor is created,
   *  which is triggered by loading startup url from JS.
   *  The completion of document loading is detected by observing 
   *  the "obs_documentCreated" command
   */
  void initEditor(in nsIEditor editor, in nsIDOMWindow contentWindow);

  /* The following functions are for internal use, essentially for the listener */

  /* Clear the editor */
  [noscript] void clearEditor();

  /* ... */
  [noscript] void setCiteReference(in nsString citeReference);

  /* Set the URI of the folder where the message has been saved */
  [noscript] attribute string savedFolderURI;

  /* Append the signature defined in the identity to the msgBody */
  [noscript] void processSignature(in nsIMsgIdentity identity,
                                   in boolean aQuoted,
                                   inout nsString aMsgBody);

  /* set any reply flags on the original message's folder */
  [noscript] void processReplyFlags();
  [noscript] void rememberQueuedDisposition();

  /* ... */
  [noscript] void convertAndLoadComposeWindow(in nsStringRef aPrefix,
                                              in nsStringRef aBuf, 
                                              in nsStringRef aSignature,
                                              in boolean aQuoted,
                                              in boolean aHTMLEditor);

  /* Tell the doc state listeners that the doc state has changed
   * aNotificationType is from nsIMsgComposeNotificationType
   */
  [noscript] void notifyStateListeners(in long aNotificationType, in nsresult aResult);

  /* Retreive the progress object */
  readonly attribute nsIMsgProgress progress;
  
  /* Retreive the external send listener */
  nsIMsgSendListener getExternalSendListener();
  
	/* ... */
  [noscript] void buildBodyMessageAndSignature();
  
	/* ... */
  [noscript] void buildQuotedMessageAndSignature();

 	/* ... */
  [noscript] void getQuotingToFollow(out boolean quotingToFollow);

 	/* ... */
  attribute nsIMsgComposeRecyclingListener recyclingListener;
  
  /* ... */
  attribute boolean recycledWindow;
  
  readonly attribute string originalMsgURI;

  attribute boolean deleteDraft;
};

/* send listener interface */
[noscript, uuid(ACC72780-2CEA-11D5-9DAA-BACDEAC1EEFC)]
interface nsIMsgComposeSendListener : nsISupports {

  void setMsgCompose(in nsIMsgCompose msgCompose);
  void setDeliverMode(in MSG_DeliverMode deliverMode);
 
};
