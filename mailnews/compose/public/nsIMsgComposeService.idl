/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */


#include "nsISupports.idl"
#include "nsIMsgCompose.idl"
#include "nsIMsgComposeParams.idl"

interface nsIURI;
interface nsIDOMWindowInternal;
interface nsIMsgWindow;
interface nsIMsgIdentity;
interface nsIMsgIncomingServer;
interface nsIMsgDBHdr;

[scriptable, uuid(acb1a30a-466e-4809-bb59-f9b7946f6cf6)]
interface nsIMsgComposeService : nsISupports {

  /* we need a msg window because when we forward inline we may need progress */
  void OpenComposeWindow(in string msgComposeWindowURL, in string originalMsgURI, in MSG_ComposeType type, 
                         in MSG_ComposeFormat format,
                         in nsIMsgIdentity identity, 
                         in nsIMsgWindow aMsgWindow);

    /* use this method to invoke a compose window given a mailto url.
     aMsgComposeWindowURL --> can be null in most cases. If you have your own chrome
     url you want to use in brining up a compose window, pass it in here. 
     aURI --> the mailto url you want to use as the foundation for the data inside
     the compose window  */
  void OpenComposeWindowWithURI(in string msgComposeWindowURL, in nsIURI aURI);

  /* ... */
  void OpenComposeWindowWithParams(in string msgComposeWindowURL, in nsIMsgComposeParams params);

  /* ... */
  nsIMsgCompose InitCompose(in nsIDOMWindowInternal aWindow, in nsIMsgComposeParams params);

  
  /**
  * defaultIdentity
  *
  * @return the default identity, in case no identity has been setup yet, will return null
  */
  readonly attribute nsIMsgIdentity defaultIdentity;

  /* This function is use for debugging purpose only and may go away at anytime without warning */
  void TimeStamp(in string label, in boolean resetTime);  
  
  /* This attribute is use for debugging purposes for determining whether to PR_LOG or not */
  readonly attribute boolean logComposePerformance;

  [noscript] boolean determineComposeHTML(in nsIMsgIdentity aIdentity, in MSG_ComposeFormat aFormat);
  [noscript] void cacheWindow(in nsIDOMWindowInternal aWindow, in boolean aComposeHTML, in nsIMsgComposeRecyclingListener listener);
  boolean isCachedWindow(in nsIDOMWindowInternal aWindow);

  /** 
   * given a mailto url, parse the attributes and turn them into a nsIMsgComposeParams object
   * @return nsIMsgComposeParams which corresponds to the passed in mailto url
   */
  nsIMsgComposeParams getParamsForMailto(in nsIURI aURI); 

  void forwardMessage(in AString forwardTo, in nsIMsgDBHdr aMsgHdr, 
                                             in nsIMsgWindow aMsgWindow, in nsIMsgIncomingServer aServer);

  void replyWithTemplate(in nsIMsgDBHdr msgHdr, in string templateUri,
                                             in nsIMsgWindow aMsgWindow, in nsIMsgIncomingServer server);
};

