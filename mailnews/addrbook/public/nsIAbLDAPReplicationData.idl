/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Rajiv Dayal <rdayal@netscape.com>
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsILDAPMessageListener.idl"

interface nsIAbLDAPReplicationQuery;
interface nsIWebProgressListener;

/**
 * this service does replication of an LDAP directory to a local Mork AB Database.
 */
[scriptable, uuid(00D568A2-3C3B-11d6-B7B9-00B0D06E5F27)]
interface nsIAbLDAPProcessReplicationData : nsILDAPMessageListener {
   
   /**
     * readonly attribute giving the current replication state
     */
    readonly attribute PRInt32 replicationState;

   /**
     * replication states
     */
    const long kIdle                  = 0;
    const long kAnonymousBinding      = 1;
    const long kAuthenticatedBinding  = 2;
    const long kSyncServerBinding     = 3;
    const long kSearchingAuthDN       = 4;
    const long kDecidingProtocol      = 5;
    const long kAuthenticating        = 6;
    const long kReplicatingAll        = 7;
    const long kSearchingRootDSE      = 8;
    const long kFindingChanges        = 9;
    const long kReplicatingChanges    = 10;
    const long kReplicationDone       = 11;

   /**
     * readonly attribute giving the current protocol used
     */
    readonly attribute PRInt32 protocolUsed ;

   /**
     * replication protocols
     */
    const long kDefaultDownloadAll         = 0;
    const long kChangeLogProtocol          = 1;
    const long kLCUPProtocol               = 2;
    const long kLastUpdatedTimeStampMethod = 3;

   /**
     * this method initializes the implementation
     */
    void init (in nsIAbLDAPReplicationQuery query, in nsIWebProgressListener progressListener);

   /**
     * this method a aborts the ongoing processing
     */
    void abort();
   
   /**
     * this utility method populates authentication data from Dir Server
     */
   void populateAuthData();
};

