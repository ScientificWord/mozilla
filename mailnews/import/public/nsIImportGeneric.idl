/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
  	Interface for importing anything.  You are responsible for opening
  	up UI and doing all of the work to make it happen.
  
*/

#include "nsISupports.idl"

interface nsIDOMWindowInternal;
interface nsISupportsString;

[scriptable, uuid(9b5c20c0-2348-11d3-a206-00a0cc26da63)]
interface nsIImportGeneric : nsISupports
{	
	/* Use these to prepare for the import */
		/*
			"mailInterface" - nsIImportMail interface
			"mailBoxes" - nsISupportsArray of nsIImportMailboxDescriptors
			"mailLocation" - nsIFileSpec, source location for mail

			"addressInterface" - nsIImportAddressBooks interface
			"addressBooks" - nsISupportsArray of nsIImportABDescriptors
			"addressLocation" - src location of address books (if needed!)
			"addressDestination" - uri of destination address book or null if
								new address books will be created.
		*/
	nsISupports	GetData( in string dataId);

	void		SetData( in string dataId, in nsISupports pData);
	
		/*
			"isInstalled" - if true then mail can be automatically located.
			"canUserSetLocation" - if true then the user can specify the location
				to look for mail.  If both are false, then there is no way
				to import mail from this format!  
				TBD: How to specify whether or not a file or a directory
				should be specified?
			"autoFind" - for address books, is the address book located without
				using the file system - i.e. addressLocation is irrelevant.
			"supportsMultiple" - 1 or 1..n address books are imported by this format?

		*/
	long		GetStatus( in string statusKind);

	/*
		When you are ready to import call this.  If it returns TRUE then
		you must call BeginImport and then repeatedly call GetProgress until
		it returns 100 % done or until ContinueImport returns FALSE.
		If this returns FALSE then BeginImport will begin and finish the import
		before it returns.
	*/
	boolean		WantsProgress();

	/* Use these for the actual import */
		/* Begin import is expected to start a new thread UNLESS WantsProgress returned
			FALSE.  It is REQUIRED to call WantsProgress before calling BeginImport.
			If WantsProgress was false then this will return the success or
			failure of the import.  Failure can be reported even if WantsProgress
			returned TRUE. 
		 */
	boolean         BeginImport( in nsISupportsString successLog, in nsISupportsString errorLog, in boolean isAddrLocHome);	
		/*
			If WantsProgress returned TRUE then this will indicate if the import should
			continue.  If this returns FALSE then no other methods should be called
			and the error log should be shown to the user.
		*/
	boolean		ContinueImport();
		/*
			Returns the percentage done.  When this returns 100 then the import is done.
			(only valid if WantsProgress returned true)
		*/
	long		GetProgress();
		/*
			Cancel an import in progress.  Again, this is only valid if WantsProgress
			returned true.
		*/
	void		CancelImport();
};
	


%{ C++

%}
