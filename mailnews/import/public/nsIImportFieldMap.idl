/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
  	Field map interface for importing address books
  
	A field map is an arbitrary sized list of mozilla address book fields.
	The field map is used by import to map fields from the import format
	to mozilla fields.
	For export, the map contains the ordered list of mozilla fields to
	export!
*/

#include "nsISupports.idl"

interface nsIAddrDatabase;
interface nsIMdbRow;
interface nsIAbCard;


[scriptable, uuid(0e376da3-e289-4d14-bdec-867764585eb7)]
interface nsIImportFieldMap : nsISupports
{
  /*
    Flag to indicate whether or not to skip the first record,
    for instance csv files often have field names as the first
    record
  */
  attribute boolean skipFirstRecord;

	readonly attribute long	numMozFields;
	readonly attribute long	mapSize;
	
	wstring GetFieldDescription( in long index);
	
	/*
		Set the size of the field map, all unpopulated entries
		will default to -1
	*/
	void	SetFieldMapSize( in long size);
		
	/*
		Initialize the field map to a given size with default values
	*/
	void	DefaultFieldMap( in long size);

	/*
		Return the field number that this index maps to, -1 for no field
	*/
	long	GetFieldMap( in long index);

	/*
		Set the field that this index maps to, -1 for no field
	*/
	void	SetFieldMap( in long index, in long fieldNum);	
	
	/*
		Set the field that this index maps to, -1 for no field
	*/
	void	SetFieldMapByDescription( in long index, in wstring fieldDesc);	
	
	/*
		Return if this field is "active" in the map.
	*/
	boolean	GetFieldActive( in long index);

	/*
		Set the active state of this field
	*/
	void	SetFieldActive( in long index, in boolean active);

	/*
		Set the value of the given field in the database row 
	*/
	void	SetFieldValue( in nsIAddrDatabase database, in nsIMdbRow row, in long fieldNum, in wstring value);

	/*
		Set the value of the given field in the database row 
	*/
	void	SetFieldValueByDescription( in nsIAddrDatabase database, in nsIMdbRow row, in wstring fieldDesc, in wstring value);
	
	/*
		Get the value of the given field from the address card
	*/
	wstring GetFieldValue( in nsIAbCard card, in long fieldNum);

	/*
		Get the value of the given field from the address card
	*/
	wstring GetFieldValueByDescription( in nsIAbCard card, in wstring fieldDesc);

};
	


%{ C++

%}
