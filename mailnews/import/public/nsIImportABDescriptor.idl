/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*

  Interface for importing mail - ui provided by the import module.  If
  you wish to provide your own UI then implement the nsIImportGeneric
  interface.

  Can I get an attribute set method to take a const value???
  
 */

#include "nsISupports.idl"

interface nsIFileSpec;

[scriptable, uuid(9c1774e0-3538-11d3-a206-00a0cc26da63)]
interface nsIImportABDescriptor : nsISupports
{	
	/*
		use the following 2 attributes however you'd like to
		refer to a specific address book
	*/
	attribute unsigned long 		identifier;
	attribute unsigned long			ref;
	
	/*
		Doesn't have to be accurate, this is merely used to report progress.
		If you're importing a file, using file size and reporting progress
		as the number of bytes processed so far makes sense.  For other formats
		returning the number of records may make more sense.  
	*/
	attribute unsigned long			size;
	
	/*
		The preferred name for this address book.  Depending upon how the 
		user selected import, the caller of the nsIImportAddressBooks interface
		may use this name to create the destination address book or it may
		ignore it.  However, this must be provided in all cases as it is
		also displayed in the UI to the user.
	*/
	wstring	GetPreferredName();
	void	SetPreferredName( [const] in wstring name);
	
	/*
		For address books that want a file descriptor to locate the address book.
		For formats that do not, use identifier & ref to refer to the address book
		OR implement your own nsIImportABDescriptor that contains additional data
		necessary to identify specific address books,
	*/
	
	readonly attribute nsIFileSpec	fileSpec;
	
	/*
		Set by the UI to indicate whether or not this address book should be imported.
	*/
	attribute boolean				import;
};
	


%{ C++

/*
	The default implementation can be obtained from
	nsIImportService::CreateNewABDescriptor();
	
	You should only be interested in using this class if you implement
	the nsIImportAddressBooks interface in which case, just using the service to
	create new ones should work fine for you.  If not, implement your
	own.
*/

%}
