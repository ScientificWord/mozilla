/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2000
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

////////////////////////////////////////////////////////////////////////////////////////
// The IMAP Service is an interfaced designed to make building and running imap urls
// easier. Clients typically go to the imap service and ask it do things such as:
// get new mail, etc....
//
// Oh and in case you couldn't tell by the name, the imap service is a service! and you
// should go through the service manager to obtain an instance of it.
////////////////////////////////////////////////////////////////////////////////////////

#include "nsISupports.idl"
#include "nsIImapUrl.idl"

interface nsIImapProtocol;
interface nsIImapMessageSink;
interface nsIUrlListener;
interface nsIURI;
interface nsIEventTarget;
interface nsIMsgFolder;
interface nsIMsgWindow;
interface nsIImapIncomingServer;
interface nsICacheSession;


[scriptable, uuid(0819ca53-746b-4072-896a-87a452dc5a77)]
interface nsIImapService : nsISupports
{
	// As always, you can pass in null for the url listener and the url if you don't require either.....
	// aClientEventTarget is the event queue of the event sinks. We post events into this queue.
	// mscott -- eventually this function will take in the account (identity/incoming server) associated with 
	// the request
  void selectFolder(in nsIEventTarget aClientEventTarget, 
                    in nsIMsgFolder aImapMailFolder,
                    in nsIUrlListener aUrlListener,
                    in nsIMsgWindow   aMsgWindow,
                    out nsIURI aURL);
  
  void liteSelectFolder(in nsIEventTarget aClientEventTarget, 
                        in nsIMsgFolder aImapMailFolder,
                        in nsIUrlListener aUrlListener,
                        out nsIURI aURL);
  
  void fetchMessage(in nsIImapUrl aUrl,
                    in nsImapState aImapAction,
                    in nsIMsgFolder aImapMailFolder,
                    in nsIImapMessageSink aImapMessageSink,
                    in nsIMsgWindow aMsgWindow, 
                    in nsISupports aConsumer,
                    in string aMessageIdentifierList,
                    in boolean convertDataToText,
                    in string additionalHeader,
                    out nsIURI aOutURL);

  void noop(in nsIEventTarget aClientEventTarget, 
            in nsIMsgFolder aImapMailFolder,
            in nsIUrlListener aUrlListener,
            out nsIURI aURL);

  void getHeaders(in nsIEventTarget aClientEventTarget, 
                  in nsIMsgFolder aImapMailFolder,
                  in nsIUrlListener aUrlListener,
                  out nsIURI aURL,
                  in string aMessageIdentifierList,
                  in boolean aMessageIdsAreUID);

  nsIURI getBodyStart(in nsIEventTarget aClientEventTarget, 
                  in nsIMsgFolder aImapMailFolder,
                  in nsIUrlListener aUrlListener,
                  in string aMessageIdentifierList,
                  in long numBytes);

  void expunge(in nsIEventTarget aClientEventTarget, 
               in nsIMsgFolder aImapMailFolder,
               in nsIUrlListener aUrlListener,
               out nsIURI aURL);
  
  nsIURI updateFolderStatus(in nsIEventTarget aClientEventTarget, 
               in nsIMsgFolder aImapMailFolder,
               in nsIUrlListener aUrlListener);

  void biff(in nsIEventTarget aClientEventTarget, 
            in nsIMsgFolder aImapMailFolder,
            in nsIUrlListener aUrlListener,
            out nsIURI aURL,
            in unsigned long aUidHighWater);

  void deleteMessages(in nsIEventTarget aClientEventTarget, 
                      in nsIMsgFolder aImapMailFolder,
                      in nsIUrlListener aUrlListener,
                      out nsIURI aURL,
                      in string aMessageIdentifierList,
                      in boolean aMessageIdsAreUID);

  void deleteAllMessages(in nsIEventTarget aClientEventTarget, 
                         in nsIMsgFolder aImapMailFolder,
                         in nsIUrlListener aUrlListener,
                         out nsIURI aURL);
  
  void addMessageFlags(in nsIEventTarget aClientEventTarget, 
                         in nsIMsgFolder aImapMailFolder,
                         in nsIUrlListener aUrlListener,
                         out nsIURI aURL,
                         in string aMessageIdentifierList,
                         in imapMessageFlagsType aFlags,
                         in boolean aMessageIdsAreUID);
  
  void subtractMessageFlags(in nsIEventTarget aClientEventTarget, 
                            in nsIMsgFolder aImapMailFolder,
                            in nsIUrlListener aUrlListener,
                            out nsIURI aURL,
                            in string aMessageIdentifierList,
                            in imapMessageFlagsType aFlags,
                            in boolean aMessageIdsAreUID);

  void setMessageFlags(in nsIEventTarget aClientEventTarget, 
                       in nsIMsgFolder aImapMailFolder,
                       in nsIUrlListener aUrlListener,
                       out nsIURI aURL,
                       in string aMessageIdentifierList,
                       in imapMessageFlagsType aFlags,
                       in boolean aMessageIdsAreUID);
  
  void discoverAllFolders(in nsIEventTarget aClientEventTarget, 
                          in nsIMsgFolder aImapMailFolder,
                          in nsIUrlListener aUrlListener,
                          in nsIMsgWindow aMsgWindow,
                          out nsIURI aURL);

  void discoverAllAndSubscribedFolders(in nsIEventTarget aClientEventTarget, 
                                       in nsIMsgFolder aImapMailFolder,
                                       in nsIUrlListener aUrlListener,
                                       out nsIURI aURL);
  void discoverChildren(in nsIEventTarget aClientEventTarget, 
                        in nsIMsgFolder aImapMailFolder,
                        in nsIUrlListener aUrlListener,
                        in string folderPath,
                        out nsIURI aURL);

  void onlineMessageCopy(in nsIEventTarget aClientEventTarget, 
                         in nsIMsgFolder aSrcFolder,
                         in string aMessageIds,
                         in nsIMsgFolder aDstFolder,
                         in boolean aIdsAreUids,
                         in boolean aIsMove,
                         in nsIUrlListener aUrlListener,
                         out nsIURI aURL,
                         in nsISupports aCopyState,
                         in nsIMsgWindow aWindow);


  void appendMessageFromFile(in nsIEventTarget aClientEventTarget, 
                             in nsIFileSpec aFileSpec,
                             in nsIMsgFolder aDstFolder,
                             in string aMessageId,
                             in boolean idsAreUids,
                             in boolean aInSelectedState,
                             in nsIUrlListener aUrlListener,
                             out nsIURI aURL,
                             in nsISupports aCopyState,
                             in nsIMsgWindow aMsgWindow);
  
  void downloadMessagesForOffline(in string aMessageIds, in nsIMsgFolder aSrcFolder,
                      in nsIUrlListener aListener, in nsIMsgWindow   aMsgWindow);

  nsIURI moveFolder(in nsIEventTarget aClientEventTarget, 
                    in nsIMsgFolder aSrcFolder,
                    in nsIMsgFolder aDstFolder,
                    in nsIUrlListener aUrlListener,
                    in nsIMsgWindow msgWindow);

  nsIURI renameLeaf(in nsIEventTarget aClientEventTarget, 
                    in nsIMsgFolder aSrcFolder,
                    in wstring aLeafName,
                    in nsIUrlListener aUrlListener,
                    in nsIMsgWindow msgWindow);

  nsIURI deleteFolder(in nsIEventTarget aClientEventTarget, 
                      in nsIMsgFolder aFolder,
                      in nsIUrlListener aUrlListener);

  nsIURI createFolder(in nsIEventTarget aClientEventTarget, 
                      in nsIMsgFolder aParentFolder,
                      in wstring aLeafName,
                      in nsIUrlListener aUrlListener);
  
  nsIURI listFolder(in nsIEventTarget aClientEventTarget, 
                    in nsIMsgFolder aMailFolder,
                    in nsIUrlListener aUrlListener);

  nsIURI subscribeFolder(in nsIEventTarget aClientEventTarget,
                         in nsIMsgFolder aMailFolder,
                         in wstring mailboxName,
                         in nsIUrlListener aUrlListener);

  nsIURI unsubscribeFolder(in nsIEventTarget aClientEventTarget,
                           in nsIMsgFolder aMailFolder,
                           in wstring mailboxName,
                           in nsIUrlListener aUrlListener);

  // this method will first check if the folder exists but is
  // not subscribed to, in which case it will subscribe to the folder.
  // otherwise, it will try to create the folder. It will try to do this
  // with one url.
  nsIURI ensureFolderExists(in nsIEventTarget aClientEventTarget,
                            in nsIMsgFolder aParentFolder,
                            in wstring aLeafName,
                            in nsIUrlListener aUrlListener);


  nsIURI getFolderAdminUrl(in nsIEventTarget aClientEventTarget,
                      in nsIMsgFolder aMailFolder,
                      in nsIMsgWindow   aMsgWindow,
                      in nsIUrlListener aUrlListener);

  nsIURI issueCommandOnMsgs(in nsIEventTarget aClientEventTarget,
                      in nsIMsgFolder aMailFolder,
                      in nsIMsgWindow aMsgWindow,
                      in string aCommand,
                      in string aMessageIdentifierList);

  nsIURI fetchCustomMsgAttribute(in nsIEventTarget aClientEventTarget,
                      in nsIMsgFolder aMailFolder,
                      in nsIMsgWindow aMsgWindow,
                      in string aAttribute,
                      in string aMessageIdentifierList);

  nsIURI storeCustomKeywords(in nsIEventTarget aClientEventTarget,
                      in nsIMsgFolder aMailFolder,
                      in nsIMsgWindow aMsgWindow,
                      in string flagsToAdd,
                      in string flagsToSubtract,
                      in string aMessageIdentifierList);

  void getListOfFoldersOnServer(in nsIImapIncomingServer aServer, in nsIMsgWindow aMsgWindow);
  void getListOfFoldersWithPath(in nsIImapIncomingServer aServer, in nsIMsgWindow aMsgWindow, in string folderPath);

  nsISupports playbackAllOfflineOperations(in nsIMsgWindow aMsgWindow, in nsIUrlListener aListener);
  void downloadAllOffineImapFolders(in nsIMsgWindow aMsgWindow, in nsIUrlListener aListener);

  readonly attribute nsICacheSession cacheSession;
};
