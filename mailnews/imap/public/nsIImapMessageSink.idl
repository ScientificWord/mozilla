/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "MailNewsTypes2.idl"
#include "nsIImapUrl.idl"

interface nsIFileSpec;
interface nsIMsgMailNewsUrl;

[scriptable, uuid(5a53b814-68b1-11d3-a53e-0060b0fc04b7)]

interface nsIImapMessageSink : nsISupports {
    // set up messge download output stream
//    void SetupMsgWriteStream(in nsIFileSpec aFileSpec, in boolean appendDummyEnvelope);
	void SetupMsgWriteStream(in string aNativePath, in boolean appendDummyEnvelope);

    void ParseAdoptedMsgLine(in string adoptedMsgLine, in nsMsgKey uidOfMsg);
    
    void normalEndMsgWriteStream(in nsMsgKey uidOfMessage, in boolean markMsgRead, in nsIImapUrl imapUrl);
    
    void AbortMsgWriteStream();

  attribute boolean notifyDownloadedLines;  // imap protocol doesn't notify message sink of downloaded
                                  // lines when it has a channelListener. This forces it to,
                                  // even if there is a channel listener.
    // message move/copy related methods
//    void OnlineCopyReport(in ImapOnlineCopyState aCopyState);
    void BeginMessageUpload();
//    void UploadMessageFile(UploadMessageInfo* aMsgInfo);

    // message flags operation
    void NotifyMessageFlags(in unsigned long flags, in nsMsgKey messageKey);

    void NotifyMessageDeleted(in string onlineFolderName,in boolean deleteAllMsgs,in string msgIdString);

    void GetMessageSizeFromDB(in string id, in boolean idIsUid, out unsigned long size);

    void SetContentModified(in nsIImapUrl aImapUrl, in nsImapContentModifiedType modified);
    void SetImageCacheSessionForUrl(in nsIMsgMailNewsUrl aMailUrl);
    
    unsigned long getCurMoveCopyMessageFlags(in nsIImapUrl runningUrl);
};
