/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */


/*
    Because imap protocol connections (which are channels) run through a cache,
    it isn't always the case that when you want to run a url, you actually get
    a connection back right away. Often times, the url goes into a queue until
    a connection becomes available.

    Unfortunately, if we want to be a truly pluggable protocol with necko, necko
    requires the ability to get a channel back right away when it wants to run 
    a url. It doesn't let you wait until an imap connection becomes available.

    So I've created the notion of a "mock channel". This mock channel is what
    gets returned to necko (or other callers) when they ask the imap service
    for a new channel for a url. The mock channel has "mock" implementations
    of nsIChannel. Eventually, when we actually assign the url to a real
    channel, we set the real channel on the mock channel. From that point forward,
    the mock channel forwards channel calls directly to the real channel.

    In short, this class is how I'm solving the problem where necko wants
    a channel back as soon as they ask for when with the fact that it
    may be a while until the url is loaded into a connection.
 */

#include "nsISupports.idl"
#include "nsIChannel.idl"

interface nsIStreamListener;
interface nsIProgressEventSink;
interface nsIURI;
interface nsIImapProtocol;

[scriptable, uuid(e0178cd5-d37b-4bde-9ab8-752083536225)]

interface nsIImapMockChannel : nsIChannel
{
  attribute nsIProgressEventSink progressEventSink;
  void GetChannelListener(out nsIStreamListener aChannelListener);
  void GetChannelContext(out nsISupports aChannelContext);
  void Close();
  void setImapProtocol(in nsIImapProtocol aProtocol);
  [noscript] void setSecurityInfo(in nsISupports securityInfo);

  void setURI(in nsIURI uri);
};
