/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2000
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIStreamListener.idl"

interface nsIUrlListener;
interface nsIURI;
interface nsIImapUrl;
interface nsIEventTarget;
interface nsIImapProtocol;
interface nsIImapIncomingServer;
interface nsISupportsArray;
interface nsIMsgFolder;
interface nsIImapHostSessionList;
interface nsIMsgWindow;

[scriptable, uuid(9410ec75-854c-4b0e-96f4-b485ffe1f0d4)]
interface nsIImapProtocol : nsISupports {
	/////////////////////////////////////////////////////////////////////////
	/* LoadUrl should really be pushed into a generic protocol interface
	// I think. Imap happens to be the only case where we need to push back
	// a thread safe object to our test app. 
	///////////////////////////////////////////////////////////////////////// */
	void LoadImapUrl(in nsIURI aUrl, in nsISupports aConsumer);

	///////////////////////////////////////////////////////////////////////// 
	// IsBusy returns true if the connection is currently processing a url
	// and false otherwise.
	/////////////////////////////////////////////////////////////////////////
	void IsBusy(out boolean aIsConnectionBusy, 
                      out boolean isInboxConnection);

	// Protocol instance examines the url, looking at the host name,
	// user name and folder the action would be on in order to figure out
	// if it can process this url. I decided to push the semantics about
	// whether a connection can handle a url down into the connection level
	// instead of in the connection cache.
	void CanHandleUrl(in nsIImapUrl aImapUrl, out boolean aCanRunUrl,
                            out boolean hasToWait);

	/////////////////////////////////////////////////////////////////////////
	// Right now, initialize requires the event queue of the UI thread, 
	// or more importantly the event queue of the consumer of the imap
	// protocol data. The protocol also needs a host session list.
	/////////////////////////////////////////////////////////////////////////
	void Initialize(in nsIImapHostSessionList aHostSessionList, in nsIImapIncomingServer aServer, 
                  in nsIEventTarget aSinkEventTarget) ;

	void NotifyHdrsToDownload(out unsigned long keys, in unsigned long keyCount);
	void NotifyBodysToDownload(out unsigned long keys, in unsigned long count);
	// methods to get data from the imap parser flag state.
	void GetFlagsForUID(in unsigned long uid, out boolean foundIt, out unsigned short flags, out string customFlags);
	void GetSupportedUserFlags(out unsigned short flags);

	void GetRunningImapURL(out nsIImapUrl aImapUrl);

  void GetRunningUrl(out nsIURI aUrl);

  // Tell thread to die
  void TellThreadToDie(in boolean isSafeToDie);
  // Get last active time stamp
  void GetLastActiveTimeStamp(out PRTime aTimeStamp);

	void pseudoInterruptMsgLoad(in nsIMsgFolder imapFolder, in nsIMsgWindow aMsgWindow, out boolean interrupted);
  void GetSelectedMailboxName(out string folderName);
  // Reset folder connection to authenticated state
  void ResetToAuthenticatedState();

	void OverrideConnectionInfo(in wstring pHost, in unsigned short pPort, in string pCookieData);
};

