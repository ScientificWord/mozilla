/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIUrlListener;
interface nsIURI;
interface nsIImapUrl;
interface nsIEventTarget;
interface nsIImapProtocol;
interface nsISupportsArray;
interface nsIMsgFolder;
interface nsIMsgWindow;

typedef long nsMsgImapDeleteModel;

[scriptable, uuid(bbfc33de-fe89-11d3-a564-0060b0fc04b7)]
interface nsMsgImapDeleteModels
{
	const long IMAPDelete = 0;	/* delete with a big red x */
	const long MoveToTrash = 1; /* delete moves message to the trash */
	const long DeleteNoTrash = 2; /* delete is shift delete - don't create or use trash */
};

[scriptable, uuid(e2edee9e-5660-46d5-965b-b824cc81a335)]
interface nsIImapIncomingServer : nsISupports {

  attribute long maximumConnectionsNumber;
  attribute long timeOutLimits;
  attribute string adminUrl;
  attribute string serverDirectory;
  attribute long capabilityPref;
  attribute boolean cleanupInboxOnExit;
  attribute nsMsgImapDeleteModel deleteModel;
  attribute boolean dualUseFolders;
  attribute long emptyTrashThreshhold;
  attribute string personalNamespace;
  attribute string publicNamespace;
  attribute string otherUsersNamespace;
  attribute boolean offlineDownload;
  attribute boolean overrideNamespaces;
  attribute boolean usingSubscription;
  attribute string manageMailAccountUrl;
  attribute boolean fetchByChunks;
  attribute boolean mimePartsOnDemand;
  attribute boolean isAOLServer;       
  attribute boolean aOLMailboxView;
  attribute boolean storeReadMailInPFC;
  attribute boolean storeSentMailInPFC;
  attribute boolean useIdle;
  attribute wstring trashFolderName;

  boolean getIsPFC(in string folderName);
  nsIMsgFolder getPFC(in boolean createIfMissing);
  attribute boolean downloadBodiesOnGetNewMail;
  attribute boolean autoSyncOfflineStores;
  void GetImapConnectionAndLoadUrl(in nsIEventTarget aClientEventTarget,
                                           in nsIImapUrl aImapUrl,
                                           in nsISupports aConsumer);

  void RemoveConnection(in nsIImapProtocol aImapConnection);
  void ResetNamespaceReferences();
  void pseudoInterruptMsgLoad(in nsIMsgFolder aImapFolder, in nsIMsgWindow aMsgWindow, out boolean interrupted);
  void ResetConnection(in string folderName);
  void CloseConnectionForFolder(in nsIMsgFolder aMsgFolder);
  void reDiscoverAllFolders();
  nsIURI subscribeToFolder(in wstring name, in boolean subscribe);
  nsIMsgFolder GetReadMailPFC(in boolean createIfMissing);
  nsIMsgFolder GetSentMailPFC(in boolean createIfMissing);
  void GetNewMessagesForNonInboxFolders(in nsIMsgFolder aRootFolder,
                                        in nsIMsgWindow aWindow,
                                        in boolean forceAllFolders,
                                        in boolean performingBiff);
  attribute boolean doingLsub;
  void allowFolderConversion(out boolean allowConversion);
  void convertFolderName(in string originalName, out wstring convertedName);
  void hideFolderName(in string originalName, out boolean hideFolder);
  string getTrashFolderByRedirectorType();
  attribute string redirectorType;

  string getUriWithNamespacePrefixIfNecessary(in long namespaceType, in string originalUri);
  attribute boolean shuttingDown;
};
