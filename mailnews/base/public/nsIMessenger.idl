/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsrootidl.idl"
#include "nsIRDFCompositeDataSource.idl"
#include "nsIMsgWindow.idl"
#include "nsIMsgIdentity.idl"
#include "nsIMsgThread.idl"
#include "nsIMsgFolder.idl"

interface nsIMsgDBHdr;
interface nsIDOMWindowInternal;
interface nsITransactionManager;
interface nsIMsgMessageService;

[scriptable, uuid(23d3e8c1-9fa9-4496-96a6-eb43cb1c4bb0)]
interface nsIMessenger : nsISupports {

    const long eUnknown = 0;
    const long eDeleteMsg = 1;
    const long eMoveMsg = 2;
    const long eCopyMsg = 3;

    void setDisplayCharset(in string aCharset);

    readonly attribute nsITransactionManager transactionManager;

    void SetWindow(in nsIDOMWindowInternal ptr, in nsIMsgWindow msgWindow);

    void DeleteFolders(in nsIRDFCompositeDataSource db,
                       in nsIRDFResource parentFolder,
                       in nsIRDFResource folder);
    void CopyMessages(in nsIRDFCompositeDataSource database,
                   in nsIRDFResource srcResource,
                   in nsIRDFResource dstResource,
                   in nsISupportsArray messages,
                   in boolean isMove);

    void CopyFolders(in nsIRDFCompositeDataSource database,
                   in nsIRDFResource dstResource,
                   in nsISupportsArray folders,
                   in boolean isMoveFolder);
    

    void OpenURL(in string aURL);

    /** load a custom message by url, e.g load a attachment as a email
      */
    void loadURL(in nsIDOMWindowInternal ptr, in string aURL); 

    void launchExternalURL(in string aURL);

    void RenameFolder(in nsIRDFCompositeDataSource db, 
                      in nsIRDFResource folder, in wstring name);
    void CompactFolder(in nsIRDFCompositeDataSource db,
                       in nsIRDFResource folder, 
                       in boolean forAll);
    void EmptyTrash(in nsIRDFCompositeDataSource db,
                    in nsIRDFResource folder);

    boolean CanUndo();
    boolean CanRedo();
    unsigned long GetUndoTransactionType();
    unsigned long GetRedoTransactionType();
    void Undo(in nsIMsgWindow msgWindow);
    void Redo(in nsIMsgWindow msgWindow);
    void sendUnsentMessages(in nsIMsgIdentity aIdentity, in nsIMsgWindow aMsgWindow);
    void SetDocumentCharset(in string characterSet);
    void saveAs(in string aURI, in boolean aAsFile, in nsIMsgIdentity aIdentity, in wstring aMsgFilename);
    void openAttachment(in string contentTpe, in string url, in string displayName, in string messageUri, in boolean isExternalAttachment);
    void saveAttachment(in string contentTpe, in string url, in string displayName, in string messageUri, in boolean isExternalAttachment);
    void saveAllAttachments(in unsigned long count, [array, size_is(count)] in string contentTypeArray,
                            [array, size_is(count)] in string urlArray, [array, size_is(count)] in string displayNameArray,
                            [array, size_is(count)] in string messageUriArray);
    void detachAttachment(in string contentTpe, in string url, in string displayName, in string messageUri, in boolean saveFirst);
    void detachAllAttachments(in unsigned long count, [array, size_is(count)] in string contentTypeArray,
                             [array, size_is(count)] in string urlArray, [array, size_is(count)] in string displayNameArray,
                             [array, size_is(count)] in string messageUriArray, in boolean saveFirst);
    // saveAttachmentToFolder is used by the drag and drop code to drop an attachment to a destination folder
	// we need to return the actual file path (including the filename).
    nsILocalFile saveAttachmentToFolder(in string contentType, in string url, in string displayName, in string messageUri, in nsILocalFile aDestFolder);

    attribute boolean sendingUnsentMsgs;

    readonly attribute string lastDisplayedMessageUri;

    nsIMsgMessageService messageServiceFromURI(in string aUri);
    nsIMsgDBHdr msgHdrFromURI(in string aUri);
};

