/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Seth Spitzer <sspitzer@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsISupportsArray.idl"

interface nsIMsgWindow;
interface nsIMsgIncomingServer;
interface nsIRDFResource;
interface nsIRDFNode;

[scriptable, uuid(61a08c3a-1dd2-11b2-b64f-c4b2de1cf129)]
interface nsISubscribeDataSource : nsISupports {
    readonly attribute boolean hasObservers;
    void NotifyObservers(in nsIRDFResource subject, in nsIRDFResource property, in nsIRDFNode object, in boolean isAssert, in boolean isChange);
};

[scriptable, uuid(f337b84a-1dd1-11b2-97c7-fb8b2e3f2280)]
interface nsISubscribeListener : nsISupports {
	void OnDonePopulating();
};

[scriptable, uuid(4afd3d64-f7e9-4eb6-98bf-8200a7dab60f)]
interface nsISubscribableServer : nsISupports {
	attribute nsISubscribeListener subscribeListener;
	attribute char delimiter;

	void startPopulating(in nsIMsgWindow aMsgWindow, in boolean forceToServer);
	void startPopulatingWithUri(in nsIMsgWindow aMsgWindow, in boolean forceToServer, in string uri);
    void stopPopulating(in nsIMsgWindow aMsgWindow);

    // return true if state changed, false otherwise
    boolean setState(in AUTF8String path, in boolean state);

	void subscribeCleanup();

	void subscribe(in wstring name);
	void unsubscribe(in wstring name);

    void commitSubscribeChanges();

    // other stuff
	void setIncomingServer(in nsIMsgIncomingServer server);
    void addTo(in AUTF8String aName, in boolean addAsSubscribed,
               in boolean aSubscribable, in boolean aChangeIfExists);
    void setAsSubscribed(in AUTF8String path);
	void updateSubscribed();
	void setShowFullName(in boolean showFullName);
 
    // if path is null, use the root
    boolean hasChildren(in AUTF8String path);
    // if path is null, use the root
    boolean isSubscribed(in AUTF8String path);
    // if path is null, use the root
    boolean isSubscribable(in AUTF8String path);
    // if path is null, use the root
    AString getLeafName(in AUTF8String path);
    // if path is null, use the root
    void getChildren(in AUTF8String path, in nsISupportsArray array);
    // if path is null, use the root
    AUTF8String getFirstChildURI(in AUTF8String path);

    // for searching
    void setSearchValue(in AString searchValue);
    readonly attribute boolean supportsSubscribeSearch;
};

