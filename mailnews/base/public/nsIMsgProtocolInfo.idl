/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIFileSpec;

%{C++
#define NS_MSGPROTOCOLINFO_CONTRACTID_PREFIX \
  "@mozilla.org/messenger/protocol/info;1?type="
%}


[scriptable, uuid(53d0214a-689c-11d3-80f5-00a0c900d445)]
interface nsIMsgProtocolInfo : nsISupports
{
    /**
     * the default path to store local data for this type of
     * server. Each server is usually in a subdirectory below this
     */
    attribute nsIFileSpec defaultLocalPath;

    /**
     * the IID of the protocol-specific interface for this server
     * usually used from JS to dynamically get server-specific attributes
     */
    readonly attribute nsIIDPtr serverIID;

    /**
     * does this server type require a username?
     * for instance, news does not but IMAP/POP do
     */
    readonly attribute boolean requiresUsername;

    /**
     * if the pretty name of the server should
     * just be the e-mail address. Otherwise it usually
     * ends up being something like "news on hostname"
     */
    readonly attribute boolean preflightPrettyNameWithEmailAddress;

    /**
     * can this type of server be removed from the account manager?
     * for instance, local mail is not removable
     */
    readonly attribute boolean canDelete;

    /**
     * can this type of server log in at startup?
     */
    readonly attribute boolean canLoginAtStartUp;

    /**
     * can you duplicate this server?
     * for instance, local mail is unique and should not be duplicated.
     */
    readonly attribute boolean canDuplicate;

    /* the default port
       This is similar to nsIProtocolHanderl.defaultPort,
       but for architectural reasons, there is a mail-specific interface to this.
       When the input param isSecure is set to true, for all supported protocols, 
       the secure port value is returned. If isSecure is set to false the default
       port value is returned  */
    long getDefaultServerPort(in boolean isSecure);

    /**
     * An attribute that tell us whether on not we can 
     * get messages for the given server type 
	 * this is poorly named right now.
	 * it's really is there an inbox for this type?
	 * XXX todo, rename this.
     */
    readonly attribute boolean canGetMessages;

    /** 
	 * do messages arrive for this server
	 * if they do, we can use our junk controls on it.
	 */
    readonly attribute boolean canGetIncomingMessages;

    /**
     * do biff by default?
     */
    readonly attribute boolean defaultDoBiff;

    /**
     * do we need to show compose message link in the AccountCentral page ? 
     */
    readonly attribute boolean showComposeMsgLink;

    /**
     * do we need to build special folder URIs ? In case of IMAP, special folders
     * like 'Sent', 'Drafts' and 'Templates' are not created unless needed.
     * But, we do need to create folder URIs to reflect the choices in the UI in
     * copies and folders settings panel.
     */
    readonly attribute boolean needToBuildSpecialFolderURIs;

    /**
     * do we allow special folder deletion ?
     */
    readonly attribute boolean specialFoldersDeletionAllowed;
};

