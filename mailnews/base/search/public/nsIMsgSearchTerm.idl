/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alec Flett <alecf@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsMsgSearchCore.idl"
#include "nsIMsgSearchValue.idl"

interface nsIMsgDBHdr;
interface nsIMsgDatabase;
interface nsIMsgSearchScopeTerm;

native nsCStringRef(nsCString&);

[scriptable, uuid(cde583fe-9add-4adb-9e1a-9cfe050d8a26)]
interface nsIMsgSearchTerm : nsISupports {
    attribute nsMsgSearchAttribValue attrib;
    attribute nsMsgSearchOpValue op;
    attribute nsIMsgSearchValue value;

    attribute boolean booleanAnd;
    attribute string arbitraryHeader;

    attribute boolean beginsGrouping;
    attribute boolean endsGrouping;

    boolean matchRfc822String(in string aString, in string charset, in boolean charsetOverride);
    boolean matchRfc2047String(in string aString, in string charset, in boolean charsetOverride);
    boolean matchDate(in PRTime aTime);
    boolean matchStatus(in unsigned long aStatus);
    boolean matchPriority(in nsMsgPriorityValue priority);
    boolean matchAge(in PRTime days);
    boolean matchSize(in unsigned long size);
    boolean matchLabel(in nsMsgLabelValue aLabelValue);
    boolean matchJunkStatus(in string aJunkScore);
	
    boolean matchBody(in nsIMsgSearchScopeTerm scopeTerm,
                      in unsigned long offset,
                      in unsigned long length,
                      in string charset,
                      in nsIMsgDBHdr msg,
                      in nsIMsgDatabase db);

    // marking noscript because headers is a null-separated list of strings,
    // which is not scriptable
    [noscript]
    boolean matchArbitraryHeader(in nsIMsgSearchScopeTerm scopeTerm,
                                 in unsigned long offset,
                                 in unsigned long length,
                                 in string charset,
                                 in boolean charsetOverride,
                                 in nsIMsgDBHdr msg,
                                 in nsIMsgDatabase db,
                                 //[array, size_is(headerLength)] in string headers,
                                 in string headers,
                                 in unsigned long headerLength,
                                 in boolean forFilters);
                      
    readonly attribute boolean matchAllBeforeDeciding;

    readonly attribute ACString termAsString;
    boolean matchKeyword(in string keyword); // used for tag searches 
    attribute boolean matchAll;
};

